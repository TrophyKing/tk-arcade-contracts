{
	"id": "08af85e85f04d4efa729888cedde45b6",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.4",
	"solcLongVersion": "0.8.4+commit.c7e474f2",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Arcade.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 < 0.9.0;\n\nimport \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts@4.6.0/utils/math/SafeMath.sol\";\n\ncontract Arcade is AccessControl {\n    using SafeMath for uint256;\n    \n    event CloseGame(uint256 id);\n    event CreateGame(uint256 id);\n    event DeleteGame(uint256 id);\n    event Fee(uint256 fee);\n    event OpenGame(uint256 id);\n    event Payout(uint256 payout);\n    event PlacePlayer(address player, uint256 id);\n    event Refund(uint256 id, address player, uint256 amount);\n    event Register(address indexed _player, uint256 id);\n    event RemovePlayer(address player);\n\n    bytes32 public constant TREASURER_ROLE = keccak256(\"TREASURER_ROLE\");\n\n    struct GameInfo {\n        bool    exchange;\n        uint256 player_count;\n        uint256 player_limit;\n        uint256 registration_fee;\n        uint256 status;\n        address arcade_token;\n        uint256 total_fee;\n        mapping(address => uint256) fee;\n        mapping(address => uint256) paid;\n        mapping(address => uint256) seats;\n    }\n\n    struct ArcadeToken {\n        IERC20  native_token;\n        bool    active;\n        uint256 redemption_rate;\n    }\n\n    mapping(address => ArcadeToken) public acceptedArcadeTokens;\n\n    mapping(uint256 => GameInfo) public gameData;\n\n    uint256 public decimals = 18;\n\n    uint256 public fee_percentage;\n\n    uint256 private base = 10**(uint256(decimals));\n\n    address public market_maker;\n\n    address public owner;\n\n    constructor() {\n        owner = _msgSender();\n        fee_percentage = 1e17;\n        market_maker = _msgSender();\n    }\n\n    /**\n     * @dev Returns {active} for `token_address`.\n     */\n    function isAccepted(address token_address) public view returns (bool) {\n        return acceptedArcadeTokens[token_address].active;\n    }\n\n    /**\n     * @dev Adds token to {acceptedArcadeTokens} Require `token_address` for proxy balance exchange.  \n     * `redemption_rate` is set and determines the rate that proxy balance is exchanged.  \n     * Set `active` to reflect status of exchange.\n     */\n    function addArcadeToken(address token_address, uint256 redemption_rate, bool _active) public onlyRole(TREASURER_ROLE) {\n        acceptedArcadeTokens[token_address].redemption_rate = redemption_rate;\n        acceptedArcadeTokens[token_address].active = _active;\n\n        address tokenAddress = payable(token_address);\n\n        acceptedArcadeTokens[token_address].native_token = IERC20(tokenAddress);\n        acceptedArcadeTokens[token_address].native_token.approve(_msgSender(), 115792089237316195423570985008687907853269984665640564039457584007913129639935);\n    }\n\n    /**\n     * @dev Disable token for proxy balance exchange.\n     */\n    function removeArcadeToken(address token_address) public onlyRole(TREASURER_ROLE) {\n        acceptedArcadeTokens[token_address].active = false;\n    }\n\n    /**\n     * @dev Returns {Stablecoin} struct for `token_address`.\n     */\n    function getStablecoin(address token_address) public view returns (bool, uint256) {\n        return (acceptedArcadeTokens[token_address].active, acceptedArcadeTokens[token_address].redemption_rate);\n    }\n\n    /**\n     * @dev Returns {active} for `token_address`.\n     */\n    function closeGame(uint256 game_id) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        gameData[game_id].status = 0;\n\n        emit CloseGame(game_id);\n    }\n\n    /**\n     * @dev Returns {active} for `token_address`.\n     */\n    function createGame(uint256 game_id, uint256 registration_fee, address arcade_token, uint256 player_limit, bool exchange) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        gameData[game_id].status = 1;\n        gameData[game_id].total_fee = 0;\n        gameData[game_id].registration_fee = registration_fee;\n        gameData[game_id].arcade_token = arcade_token;\n        gameData[game_id].player_count = 0;\n        gameData[game_id].player_limit = player_limit;\n        gameData[game_id].exchange = exchange;\n\n        emit CreateGame(game_id);\n    }\n\n    /**\n     * @dev Returns {active} for `token_address`.\n     */\n    function deleteGame(uint256 game_id) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        delete gameData[game_id];\n\n        emit DeleteGame(game_id);\n    }\n\n    /**\n     * @dev Returns {active} for `token_address`.\n     */\n    function openGame(uint256 game_id) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        gameData[game_id].status = 1;\n\n        emit OpenGame(game_id);\n    }\n\n    /**\n     * @dev Returns {active} for `token_address`.\n     */\n    function placePlayer(uint256 game_id, address player) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(gameData[game_id].seats[player] != 1, \"Trophy King Arcade: Already seated.\");\n\n        gameData[game_id].seats[player] = 1;\n\n        emit PlacePlayer(player, game_id);\n    }\n\n    /**\n     * @dev Returns {active} for `token_address`.\n     */\n    function reconcile() public onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 balance = address(this).balance;\n\n        if (balance > 0) {\n            (bool success, ) = owner.call{ value: balance }(\"\");\n            require(success, \"Trophy King Arcade: Unable to transfer.\");\n        }\n    }\n\n    /**\n     * @dev Returns {active} for `token_address`.\n     */\n    function refund(uint256 game_id, address player) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (gameData[game_id].exchange == false) {\n            require(gameData[game_id].paid[player] == 1, \"Trophy King Arcade: Not registered for this game.\");\n\n            GameInfo storage gi = gameData[game_id];\n\n            require(acceptedArcadeTokens[(gi.arcade_token)].native_token.transfer(_msgSender(), gi.registration_fee), \"Trophy King Arcade: Refund failed.\");\n\n            emit Refund(game_id, player, gi.registration_fee);\n\n            gi.total_fee -= (gi.registration_fee);\n\n            gi.fee[player] = 0;\n            gi.paid[player] = 0;\n            gi.player_count -= 1;\n        }\n    }\n\n\n    /**\n     * @dev Returns {active} for `token_address`.\n     */\n    function _register(uint256 game_id, address player_address, uint256 amount) internal {\n        GameInfo storage gi = gameData[game_id];\n\n        gi.player_count += 1;\n        gi.fee[player_address] = amount;\n        gi.paid[player_address] = 1;\n        gi.total_fee += amount;\n        \n        emit Register(msg.sender, game_id);\n    }\n\n    /**\n     * @dev Returns {active} for `token_address`.\n     */\n    function register(uint256 game_id) public {\n        require(gameData[game_id].seats[msg.sender] == 1, \"Trophy King Arcade: Unauthorized.\");\n        require(gameData[game_id].status == 1, \"Trophy King Arcade: Game closed.\");\n        require(gameData[game_id].player_limit > gameData[game_id].player_count, \"Trophy King Arcade: Game full.  Try again.\");\n        require(gameData[game_id].paid[msg.sender] == 0, \"Trophy King Arcade: Already registered.\");\n        require(gameData[game_id].player_limit > 0, \"Trophy King Arcade: Game not found.\");\n        require(acceptedArcadeTokens[(gameData[game_id].arcade_token)].native_token.transferFrom(_msgSender(), address(this), gameData[game_id].registration_fee), \"Trophy King Arcade: Must approve registration fee.\");\n\n        _register(game_id, msg.sender, gameData[game_id].registration_fee);\n    }\n\n    /**\n     * @dev Returns {active} for `token_address`.\n     */\n    function swap(uint256 game_id) public payable {\n        require(gameData[game_id].seats[msg.sender] == 1, \"Trophy King Arcade: Unauthorized.\");\n        require(gameData[game_id].status == 1, \"Trophy King Arcade: Game closed.\");\n        require(gameData[game_id].player_limit > gameData[game_id].player_count, \"Trophy King Arcade: Game full.  Try again.\");\n        require(gameData[game_id].paid[msg.sender] == 0, \"Trophy King Arcade: Already registered.\");\n        require(gameData[game_id].player_limit > 0, \"Trophy King Arcade: Game not found.\");\n        require(msg.value == (gameData[game_id].registration_fee), \"Trophy King Arcade: Must match registration fee.\");\n\n        (bool success, ) = market_maker.call{ value: msg.value }(\"\");\n        require(success, \"Trophy King Arcade: Unable to transfer.\");\n\n        _register(game_id, msg.sender, msg.value);\n    }\n\n    /**\n     * @dev Returns {active} for `token_address`.\n     */\n    function removePlayer(uint256 game_id, address player) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        gameData[game_id].seats[player] = 0;\n\n        emit RemovePlayer(player);\n    }\n\n    /**\n     * @dev Returns {active} for `token_address`.\n     */\n    function setArcadeFeePercentage(uint256 percentage) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        fee_percentage = percentage;\n    }\n\n    /**\n     * @dev Returns {active} for `token_address`.\n     */\n    function setMarketMaker(address incoming) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        market_maker = incoming;\n    }\n\n    /**\n     * @dev Returns {active} for `token_address`.\n     */\n    function setWinner(uint256 game_id, address winner) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (gameData[game_id].exchange == false) {\n            emit Fee(gameData[game_id].fee[winner]);\n\n            require(gameData[game_id].paid[winner] == 1, \"Trophy King Arcade: Not registered for this game\");\n\n            uint256 arcade_fee = (gameData[game_id].total_fee * fee_percentage) / base / base;\n            uint256 payout = gameData[game_id].total_fee - arcade_fee;\n            uint256 contract_balance = address(this).balance;\n\n            if (contract_balance < payout) {\n                payout = contract_balance;\n            }\n\n            (bool success, ) = winner.call{ value: payout }(\"\");\n            require(success, \"Trophy King Arcade: Unable to transfer.\");\n            \n            emit Payout(payout);\n        }\n\n        closeGame(game_id);\n    }\n}\n"
			},
			"@openzeppelin/contracts@4.6.0/utils/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
			},
			"@openzeppelin/contracts@4.6.0/access/AccessControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts@4.6.0/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts@4.6.0/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts@4.6.0/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts@4.6.0/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"@openzeppelin/contracts@4.6.0/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
			},
			"@openzeppelin/contracts@4.6.0/access/IAccessControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
			},
			"@openzeppelin/contracts@4.6.0/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts@4.6.0/access/AccessControl.sol": {
				"AccessControl": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.",
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ``` bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ``` function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it.\",\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":{\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://861c3abaa2b388a0228469080470d2254e8e91fd09aa0abda8b9ef3babf03ee5\",\"dweb:/ipfs/QmZFg88WPesuMo6GMtf3fi9NHQ5tENYLDZsFQSWgoq13TN\"]},\"@openzeppelin/contracts@4.6.0/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"@openzeppelin/contracts@4.6.0/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts@4.6.0/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts@4.6.0/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 24,
								"contract": "@openzeppelin/contracts@4.6.0/access/AccessControl.sol:AccessControl",
								"label": "_roles",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct AccessControl.RoleData)",
								"numberOfBytes": "32",
								"value": "t_struct(RoleData)19_storage"
							},
							"t_struct(RoleData)19_storage": {
								"encoding": "inplace",
								"label": "struct AccessControl.RoleData",
								"members": [
									{
										"astId": 16,
										"contract": "@openzeppelin/contracts@4.6.0/access/AccessControl.sol:AccessControl",
										"label": "members",
										"offset": 0,
										"slot": "0",
										"type": "t_mapping(t_address,t_bool)"
									},
									{
										"astId": 18,
										"contract": "@openzeppelin/contracts@4.6.0/access/AccessControl.sol:AccessControl",
										"label": "adminRole",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									}
								],
								"numberOfBytes": "64"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@4.6.0/access/IAccessControl.sol": {
				"IAccessControl": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "External interface of AccessControl declared to support ERC165 detection.",
						"events": {
							"RoleAdminChanged(bytes32,bytes32,bytes32)": {
								"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
							},
							"RoleGranted(bytes32,address,address)": {
								"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
							},
							"RoleRevoked(bytes32,address,address)": {
								"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
							}
						},
						"kind": "dev",
						"methods": {
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getRoleAdmin(bytes32)": "248a9ca3",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.6.0/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.6.0/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":1403:12626  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  mstore(0x40, 0x80)\n    /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":1978:2091  constructor(string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2044:2057  _name = name_ */\n  dup2\n  mload\n  tag_6\n  swap1\n    /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2044:2049  _name */\n  0x03\n  swap1\n    /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2044:2057  _name = name_ */\n  0x20\n  dup6\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2067:2084  _symbol = symbol_ */\n  dup1\n  mload\n  tag_8\n  swap1\n    /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2067:2074  _symbol */\n  0x04\n  swap1\n    /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2067:2084  _symbol = symbol_ */\n  0x20\n  dup5\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":1978:2091  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":1403:12626  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  jump(tag_21)\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_10\n  swap1\n  tag_11\n  jump\t// in\ntag_10:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_13\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_16)\ntag_13:\n  dup3\n  0x1f\n  lt\n  tag_14\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_16)\ntag_14:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_16\n  jumpi\n  swap2\n  dup3\n  add\ntag_15:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_16\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_15)\ntag_16:\n  pop\n  tag_17\n  swap3\n  swap2\n  pop\n  tag_18\n  jump\t// in\ntag_17:\n  pop\n  swap1\n  jump\t// out\ntag_18:\ntag_19:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_17\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_19)\n    /* \"#utility.yul\":14:923   */\ntag_22:\n    /* \"#utility.yul\":68:73   */\n  0x00\n    /* \"#utility.yul\":121:124   */\n  dup3\n    /* \"#utility.yul\":114:118   */\n  0x1f\n    /* \"#utility.yul\":106:112   */\n  dup4\n    /* \"#utility.yul\":102:119   */\n  add\n    /* \"#utility.yul\":98:125   */\n  slt\n    /* \"#utility.yul\":88:90   */\n  tag_24\n  jumpi\n    /* \"#utility.yul\":143:148   */\n  dup1\n    /* \"#utility.yul\":136:141   */\n  dup2\n    /* \"#utility.yul\":129:149   */\n  revert\n    /* \"#utility.yul\":88:90   */\ntag_24:\n    /* \"#utility.yul\":170:183   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":232:242   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":229:231   */\n  iszero\n  tag_26\n  jumpi\n    /* \"#utility.yul\":245:263   */\n  tag_26\n  tag_27\n  jump\t// in\ntag_26:\n    /* \"#utility.yul\":320:322   */\n  0x40\n    /* \"#utility.yul\":314:323   */\n  mload\n    /* \"#utility.yul\":288:290   */\n  0x1f\n    /* \"#utility.yul\":374:387   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":370:392   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":394:396   */\n  0x3f\n    /* \"#utility.yul\":366:397   */\n  add\n    /* \"#utility.yul\":362:402   */\n  and\n    /* \"#utility.yul\":350:403   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":418:436   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":438:460   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":415:461   */\n  or\n    /* \"#utility.yul\":412:414   */\n  iszero\n  tag_29\n  jumpi\n    /* \"#utility.yul\":464:482   */\n  tag_29\n  tag_27\n  jump\t// in\ntag_29:\n    /* \"#utility.yul\":504:514   */\n  dup2\n    /* \"#utility.yul\":500:502   */\n  0x40\n    /* \"#utility.yul\":493:515   */\n  mstore\n    /* \"#utility.yul\":539:541   */\n  dup4\n    /* \"#utility.yul\":531:537   */\n  dup2\n    /* \"#utility.yul\":524:542   */\n  mstore\n    /* \"#utility.yul\":561:565   */\n  0x20\n    /* \"#utility.yul\":551:565   */\n  swap3\n  pop\n    /* \"#utility.yul\":606:609   */\n  dup7\n    /* \"#utility.yul\":601:603   */\n  dup4\n    /* \"#utility.yul\":596:598   */\n  dup6\n    /* \"#utility.yul\":588:594   */\n  dup9\n    /* \"#utility.yul\":584:599   */\n  add\n    /* \"#utility.yul\":580:604   */\n  add\n    /* \"#utility.yul\":577:610   */\n  gt\n    /* \"#utility.yul\":574:576   */\n  iszero\n  tag_30\n  jumpi\n    /* \"#utility.yul\":627:632   */\n  dup5\n    /* \"#utility.yul\":620:625   */\n  dup6\n    /* \"#utility.yul\":613:633   */\n  revert\n    /* \"#utility.yul\":574:576   */\ntag_30:\n    /* \"#utility.yul\":653:658   */\n  dup5\n    /* \"#utility.yul\":644:658   */\n  swap2\n  pop\n    /* \"#utility.yul\":667:800   */\ntag_31:\n    /* \"#utility.yul\":681:683   */\n  dup4\n    /* \"#utility.yul\":678:679   */\n  dup3\n    /* \"#utility.yul\":675:684   */\n  lt\n    /* \"#utility.yul\":667:800   */\n  iszero\n  tag_33\n  jumpi\n    /* \"#utility.yul\":769:783   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":765:788   */\n  dup4\n  add\n    /* \"#utility.yul\":759:789   */\n  mload\n    /* \"#utility.yul\":738:752   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":734:757   */\n  dup5\n  add\n    /* \"#utility.yul\":727:790   */\n  mstore\n    /* \"#utility.yul\":692:702   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":667:800   */\n  jump(tag_31)\ntag_33:\n    /* \"#utility.yul\":818:820   */\n  dup4\n    /* \"#utility.yul\":815:816   */\n  dup3\n    /* \"#utility.yul\":812:821   */\n  gt\n    /* \"#utility.yul\":809:811   */\n  iszero\n  tag_34\n  jumpi\n    /* \"#utility.yul\":877:882   */\n  dup5\n    /* \"#utility.yul\":872:874   */\n  dup4\n    /* \"#utility.yul\":867:869   */\n  dup6\n    /* \"#utility.yul\":859:865   */\n  dup4\n    /* \"#utility.yul\":855:870   */\n  add\n    /* \"#utility.yul\":851:875   */\n  add\n    /* \"#utility.yul\":844:883   */\n  mstore\n    /* \"#utility.yul\":809:811   */\ntag_34:\n    /* \"#utility.yul\":911:917   */\n  swap7\n    /* \"#utility.yul\":78:923   */\n  swap6\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":928:1520   */\ntag_3:\n    /* \"#utility.yul\":1027:1033   */\n  0x00\n    /* \"#utility.yul\":1035:1041   */\n  dup1\n    /* \"#utility.yul\":1088:1090   */\n  0x40\n    /* \"#utility.yul\":1076:1085   */\n  dup4\n    /* \"#utility.yul\":1067:1074   */\n  dup6\n    /* \"#utility.yul\":1063:1086   */\n  sub\n    /* \"#utility.yul\":1059:1091   */\n  slt\n    /* \"#utility.yul\":1056:1058   */\n  iszero\n  tag_36\n  jumpi\n    /* \"#utility.yul\":1109:1115   */\n  dup2\n    /* \"#utility.yul\":1101:1107   */\n  dup3\n    /* \"#utility.yul\":1094:1116   */\n  revert\n    /* \"#utility.yul\":1056:1058   */\ntag_36:\n    /* \"#utility.yul\":1141:1157   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1206:1220   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1203:1205   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":1238:1244   */\n  dup4\n    /* \"#utility.yul\":1230:1236   */\n  dup5\n    /* \"#utility.yul\":1223:1245   */\n  revert\n    /* \"#utility.yul\":1203:1205   */\ntag_37:\n    /* \"#utility.yul\":1266:1327   */\n  tag_38\n    /* \"#utility.yul\":1319:1326   */\n  dup7\n    /* \"#utility.yul\":1310:1316   */\n  dup4\n    /* \"#utility.yul\":1299:1308   */\n  dup8\n    /* \"#utility.yul\":1295:1317   */\n  add\n    /* \"#utility.yul\":1266:1327   */\n  tag_22\n  jump\t// in\ntag_38:\n    /* \"#utility.yul\":1256:1327   */\n  swap4\n  pop\n    /* \"#utility.yul\":1373:1375   */\n  0x20\n    /* \"#utility.yul\":1362:1371   */\n  dup6\n    /* \"#utility.yul\":1358:1376   */\n  add\n    /* \"#utility.yul\":1352:1377   */\n  mload\n    /* \"#utility.yul\":1336:1377   */\n  swap2\n  pop\n    /* \"#utility.yul\":1402:1404   */\n  dup1\n    /* \"#utility.yul\":1392:1400   */\n  dup3\n    /* \"#utility.yul\":1389:1405   */\n  gt\n    /* \"#utility.yul\":1386:1388   */\n  iszero\n  tag_39\n  jumpi\n    /* \"#utility.yul\":1423:1429   */\n  dup3\n    /* \"#utility.yul\":1415:1421   */\n  dup4\n    /* \"#utility.yul\":1408:1430   */\n  revert\n    /* \"#utility.yul\":1386:1388   */\ntag_39:\n  pop\n    /* \"#utility.yul\":1451:1514   */\n  tag_40\n    /* \"#utility.yul\":1506:1513   */\n  dup6\n    /* \"#utility.yul\":1495:1503   */\n  dup3\n    /* \"#utility.yul\":1484:1493   */\n  dup7\n    /* \"#utility.yul\":1480:1504   */\n  add\n    /* \"#utility.yul\":1451:1514   */\n  tag_22\n  jump\t// in\ntag_40:\n    /* \"#utility.yul\":1441:1514   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":1046:1520   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1525:1905   */\ntag_11:\n    /* \"#utility.yul\":1604:1605   */\n  0x01\n    /* \"#utility.yul\":1600:1612   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":1647:1659   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1668:1670   */\n  tag_42\n  jumpi\n    /* \"#utility.yul\":1722:1726   */\n  0x7f\n    /* \"#utility.yul\":1714:1720   */\n  dup3\n    /* \"#utility.yul\":1710:1727   */\n  and\n    /* \"#utility.yul\":1700:1727   */\n  swap2\n  pop\n    /* \"#utility.yul\":1668:1670   */\ntag_42:\n    /* \"#utility.yul\":1775:1777   */\n  0x20\n    /* \"#utility.yul\":1767:1773   */\n  dup3\n    /* \"#utility.yul\":1764:1778   */\n  lt\n    /* \"#utility.yul\":1744:1762   */\n  dup2\n    /* \"#utility.yul\":1741:1779   */\n  eq\n    /* \"#utility.yul\":1738:1740   */\n  iszero\n  tag_43\n  jumpi\n    /* \"#utility.yul\":1821:1831   */\n  0x4e487b71\n    /* \"#utility.yul\":1816:1819   */\n  0xe0\n    /* \"#utility.yul\":1812:1832   */\n  shl\n    /* \"#utility.yul\":1809:1810   */\n  0x00\n    /* \"#utility.yul\":1802:1833   */\n  mstore\n    /* \"#utility.yul\":1856:1860   */\n  0x22\n    /* \"#utility.yul\":1853:1854   */\n  0x04\n    /* \"#utility.yul\":1846:1861   */\n  mstore\n    /* \"#utility.yul\":1884:1888   */\n  0x24\n    /* \"#utility.yul\":1881:1882   */\n  0x00\n    /* \"#utility.yul\":1874:1889   */\n  revert\n    /* \"#utility.yul\":1738:1740   */\ntag_43:\n  pop\n    /* \"#utility.yul\":1580:1905   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1910:2037   */\ntag_27:\n    /* \"#utility.yul\":1971:1981   */\n  0x4e487b71\n    /* \"#utility.yul\":1966:1969   */\n  0xe0\n    /* \"#utility.yul\":1962:1982   */\n  shl\n    /* \"#utility.yul\":1959:1960   */\n  0x00\n    /* \"#utility.yul\":1952:1983   */\n  mstore\n    /* \"#utility.yul\":2002:2006   */\n  0x41\n    /* \"#utility.yul\":1999:2000   */\n  0x04\n    /* \"#utility.yul\":1992:2007   */\n  mstore\n    /* \"#utility.yul\":2026:2030   */\n  0x24\n    /* \"#utility.yul\":2023:2024   */\n  0x00\n    /* \"#utility.yul\":2016:2031   */\n  revert\n    /* \"#utility.yul\":1942:2037   */\ntag_21:\n    /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":1403:12626  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":1403:12626  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2156:2254  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4433:4630  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":1445:1459   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1438:1460   */\n      iszero\n        /* \"#utility.yul\":1420:1461   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1408:1410   */\n      0x20\n        /* \"#utility.yul\":1393:1411   */\n      add\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4433:4630  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_17\n        /* \"#utility.yul\":1375:1467   */\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3244:3350  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3331:3343  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3244:3350  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":5015:5040   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":5003:5005   */\n      0x20\n        /* \"#utility.yul\":4988:5006   */\n      add\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3244:3350  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_17\n        /* \"#utility.yul\":4970:5046   */\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5192:5478  function transferFrom(... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3093:3184  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3175:3177  18 */\n      0x12\n        /* \"#utility.yul\":5193:5229   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5181:5183   */\n      0x20\n        /* \"#utility.yul\":5166:5184   */\n      add\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3093:3184  function decimals() public view virtual override returns (uint8) {... */\n      tag_17\n        /* \"#utility.yul\":5148:5235   */\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5873:6107  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_19\n      tag_39\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3408:3533  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3508:3526  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3482:3489  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3508:3526  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3408:3533  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2367:2469  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_15\n      tag_48\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6594:7021  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_19\n      tag_51\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3729:3918  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_19\n      tag_55\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3976:4125  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_25\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2156:2254  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2210:2223  string memory */\n      0x60\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2242:2247  _name */\n      0x03\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2235:2247  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2156:2254  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4433:4630  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4516:4520  bool */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4570:4602  _approve(owner, spender, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4586:4593  spender */\n      dup6\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4595:4601  amount */\n      dup6\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4570:4578  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4570:4602  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n      pop\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4619:4623  true */\n      0x01\n      swap4\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4433:4630  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5192:5478  function transferFrom(... */\n    tag_32:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5319:5323  bool */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5375:5413  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5391:5395  from */\n      dup6\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5406:5412  amount */\n      dup6\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5375:5390  _spendAllowance */\n      tag_79\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5375:5413  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5423:5450  _transfer(from, to, amount) */\n      tag_80\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5433:5437  from */\n      dup6\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5439:5441  to */\n      dup6\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5443:5449  amount */\n      dup6\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5423:5432  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5423:5450  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n      pop\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5467:5471  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5192:5478  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5873:6107  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":5961:5965  bool */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6015:6079  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_73\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6031:6038  spender */\n      dup6\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6068:6078  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6040:6065  allowance(owner, spender) */\n      tag_86\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      dup4\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6031:6038  spender */\n      dup4\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6040:6049  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6040:6065  allowance(owner, spender) */\n      jump\t// in\n    tag_86:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6040:6078  allowance(owner, spender) + addedValue */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6015:6023  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6015:6079  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2367:2469  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2423:2436  string memory */\n      0x60\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2455:2462  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":2448:2462  return _symbol */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6594:7021  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6687:6691  bool */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6687:6691  bool */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6768:6793  allowance(owner, spender) */\n      tag_98\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6785:6792  spender */\n      dup7\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6768:6777  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6768:6793  allowance(owner, spender) */\n      jump\t// in\n    tag_98:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6741:6793  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6831:6846  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6811:6827  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6811:6846  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6803:6888  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4665:4667   */\n      0x20\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6803:6888  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4647:4668   */\n      mstore\n        /* \"#utility.yul\":4704:4706   */\n      0x25\n        /* \"#utility.yul\":4684:4702   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4677:4707   */\n      mstore\n        /* \"#utility.yul\":4743:4777   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":4723:4741   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4716:4778   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":4794:4812   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4787:4822   */\n      mstore\n        /* \"#utility.yul\":4839:4858   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6803:6888  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6922:6982  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_80\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6931:6936  owner */\n      dup3\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6938:6945  spender */\n      dup7\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6966:6981  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6947:6963  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6947:6981  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6922:6930  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":6922:6982  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3729:3918  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3808:3812  bool */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3862:3890  _transfer(owner, to, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3879:3881  to */\n      dup6\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3883:3889  amount */\n      dup6\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3862:3871  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3862:3890  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3976:4125  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4065:4072  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4091:4102  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4091:4109  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":4091:4118  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":3976:4125  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10119:10489  function _approve(... */\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10250:10269  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10242:10310  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4260:4262   */\n      0x20\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10242:10310  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4242:4263   */\n      mstore\n        /* \"#utility.yul\":4299:4301   */\n      0x24\n        /* \"#utility.yul\":4279:4297   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":4272:4302   */\n      mstore\n        /* \"#utility.yul\":4338:4372   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":4318:4336   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4311:4373   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":4389:4407   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4382:4416   */\n      mstore\n        /* \"#utility.yul\":4433:4452   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10242:10310  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4232:4458   */\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10242:10310  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10328:10349  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10320:10388  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2686:2688   */\n      0x20\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10320:10388  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2668:2689   */\n      mstore\n        /* \"#utility.yul\":2725:2727   */\n      0x22\n        /* \"#utility.yul\":2705:2723   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2698:2728   */\n      mstore\n        /* \"#utility.yul\":2764:2798   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":2744:2762   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2737:2799   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":2815:2833   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2808:2840   */\n      mstore\n        /* \"#utility.yul\":2857:2876   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10320:10388  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":2658:2882   */\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10320:10388  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10399:10417  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10399:10410  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10399:10417  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10399:10426  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10399:10435  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10450:10482  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":5015:5040   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10450:10482  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":4988:5006   */\n      add\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10450:10482  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10119:10489  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10770:11211  function _spendAllowance(... */\n    tag_79:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10900:10924  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10927:10952  allowance(owner, spender) */\n      tag_117\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10937:10942  owner */\n      dup5\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10944:10951  spender */\n      dup5\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10927:10936  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10927:10952  allowance(owner, spender) */\n      jump\t// in\n    tag_117:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10900:10952  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10966:10982  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10966:11003  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10962:11205  if (currentAllowance != type(uint256).max) {... */\n      tag_122\n      jumpi\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":11047:11053  amount */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":11027:11043  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":11027:11053  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":11019:11087  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3089:3091   */\n      0x20\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":11019:11087  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3071:3092   */\n      mstore\n        /* \"#utility.yul\":3128:3130   */\n      0x1d\n        /* \"#utility.yul\":3108:3126   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3101:3131   */\n      mstore\n        /* \"#utility.yul\":3167:3198   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":3147:3165   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3140:3199   */\n      mstore\n        /* \"#utility.yul\":3216:3234   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":11019:11087  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_100\n        /* \"#utility.yul\":3061:3240   */\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":11019:11087  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_119:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":11129:11180  _approve(owner, spender, currentAllowance - amount) */\n      tag_122\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":11138:11143  owner */\n      dup5\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":11145:11152  spender */\n      dup5\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":11173:11179  amount */\n      dup5\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":11154:11170  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":11154:11179  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":11129:11137  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":11129:11180  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_122:\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":10770:11211  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7484:8135  function _transfer(... */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7610:7628  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7602:7670  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3854:3856   */\n      0x20\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7602:7670  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3836:3857   */\n      mstore\n        /* \"#utility.yul\":3893:3895   */\n      0x25\n        /* \"#utility.yul\":3873:3891   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3866:3896   */\n      mstore\n        /* \"#utility.yul\":3932:3966   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":3912:3930   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3905:3967   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":3983:4001   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3976:4011   */\n      mstore\n        /* \"#utility.yul\":4028:4047   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7602:7670  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3826:4053   */\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7602:7670  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_124:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7688:7704  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7680:7744  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2282:2284   */\n      0x20\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7680:7744  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2264:2285   */\n      mstore\n        /* \"#utility.yul\":2321:2323   */\n      0x23\n        /* \"#utility.yul\":2301:2319   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2294:2324   */\n      mstore\n        /* \"#utility.yul\":2360:2394   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":2340:2358   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2333:2395   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":2411:2429   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2404:2437   */\n      mstore\n        /* \"#utility.yul\":2454:2473   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7680:7744  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":2254:2479   */\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7680:7744  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_127:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7826:7841  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7804:7823  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7826:7841  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7859:7880  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7851:7923  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3447:3449   */\n      0x20\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7851:7923  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3429:3450   */\n      mstore\n        /* \"#utility.yul\":3486:3488   */\n      0x26\n        /* \"#utility.yul\":3466:3484   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3459:3489   */\n      mstore\n        /* \"#utility.yul\":3525:3559   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":3505:3523   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3498:3560   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":3576:3594   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3569:3605   */\n      mstore\n        /* \"#utility.yul\":3622:3641   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7851:7923  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_100\n        /* \"#utility.yul\":3419:3647   */\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7851:7923  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_132:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7957:7972  _balances[from] */\n      dup1\n      dup6\n      and\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7957:7966  _balances */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7957:7972  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7975:7995  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7957:7995  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":8015:8028  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":8015:8038  _balances[to] += amount */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7989:7995  amount */\n      dup5\n      swap3\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7957:7966  _balances */\n      swap1\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":8015:8038  _balances[to] += amount */\n      tag_135\n      swap1\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":7989:7995  amount */\n      dup5\n      swap1\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":8015:8038  _balances[to] += amount */\n      tag_88\n      jump\t// in\n    tag_135:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":8069:8071  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":8054:8080  Transfer(from, to, amount) */\n      and\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":8063:8067  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":8054:8080  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":8073:8079  amount */\n      dup5\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":8054:8080  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_136\n      swap2\n        /* \"#utility.yul\":5015:5040   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5003:5005   */\n      0x20\n        /* \"#utility.yul\":4988:5006   */\n      add\n      swap1\n        /* \"#utility.yul\":4970:5046   */\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":8054:8080  Transfer(from, to, amount) */\n    tag_136:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":8091:8128  _afterTokenTransfer(from, to, amount) */\n      tag_122\n        /* \"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":11795:11916  function _beforeTokenTransfer(... */\n      jump\n        /* \"#utility.yul\":14:187   */\n    tag_142:\n        /* \"#utility.yul\":82:102   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":131:162   */\n      dup2\n      and\n        /* \"#utility.yul\":121:163   */\n      dup2\n      eq\n        /* \"#utility.yul\":111:113   */\n      tag_144\n      jumpi\n        /* \"#utility.yul\":177:178   */\n      0x00\n        /* \"#utility.yul\":174:175   */\n      dup1\n        /* \"#utility.yul\":167:179   */\n      revert\n        /* \"#utility.yul\":111:113   */\n    tag_144:\n        /* \"#utility.yul\":63:187   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":192:388   */\n    tag_44:\n        /* \"#utility.yul\":251:257   */\n      0x00\n        /* \"#utility.yul\":304:306   */\n      0x20\n        /* \"#utility.yul\":292:301   */\n      dup3\n        /* \"#utility.yul\":283:290   */\n      dup5\n        /* \"#utility.yul\":279:302   */\n      sub\n        /* \"#utility.yul\":275:307   */\n      slt\n        /* \"#utility.yul\":272:274   */\n      iszero\n      tag_146\n      jumpi\n        /* \"#utility.yul\":325:331   */\n      dup1\n        /* \"#utility.yul\":317:323   */\n      dup2\n        /* \"#utility.yul\":310:332   */\n      revert\n        /* \"#utility.yul\":272:274   */\n    tag_146:\n        /* \"#utility.yul\":353:382   */\n      tag_147\n        /* \"#utility.yul\":372:381   */\n      dup3\n        /* \"#utility.yul\":353:382   */\n      tag_142\n      jump\t// in\n    tag_147:\n        /* \"#utility.yul\":343:382   */\n      swap4\n        /* \"#utility.yul\":262:388   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":393:663   */\n    tag_60:\n        /* \"#utility.yul\":461:467   */\n      0x00\n        /* \"#utility.yul\":469:475   */\n      dup1\n        /* \"#utility.yul\":522:524   */\n      0x40\n        /* \"#utility.yul\":510:519   */\n      dup4\n        /* \"#utility.yul\":501:508   */\n      dup6\n        /* \"#utility.yul\":497:520   */\n      sub\n        /* \"#utility.yul\":493:525   */\n      slt\n        /* \"#utility.yul\":490:492   */\n      iszero\n      tag_149\n      jumpi\n        /* \"#utility.yul\":543:549   */\n      dup1\n        /* \"#utility.yul\":535:541   */\n      dup2\n        /* \"#utility.yul\":528:550   */\n      revert\n        /* \"#utility.yul\":490:492   */\n    tag_149:\n        /* \"#utility.yul\":571:600   */\n      tag_150\n        /* \"#utility.yul\":590:599   */\n      dup4\n        /* \"#utility.yul\":571:600   */\n      tag_142\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":561:600   */\n      swap2\n      pop\n        /* \"#utility.yul\":619:657   */\n      tag_151\n        /* \"#utility.yul\":653:655   */\n      0x20\n        /* \"#utility.yul\":642:651   */\n      dup5\n        /* \"#utility.yul\":638:656   */\n      add\n        /* \"#utility.yul\":619:657   */\n      tag_142\n      jump\t// in\n    tag_151:\n        /* \"#utility.yul\":609:657   */\n      swap1\n      pop\n        /* \"#utility.yul\":480:663   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":668:1006   */\n    tag_31:\n        /* \"#utility.yul\":745:751   */\n      0x00\n        /* \"#utility.yul\":753:759   */\n      dup1\n        /* \"#utility.yul\":761:767   */\n      0x00\n        /* \"#utility.yul\":814:816   */\n      0x60\n        /* \"#utility.yul\":802:811   */\n      dup5\n        /* \"#utility.yul\":793:800   */\n      dup7\n        /* \"#utility.yul\":789:812   */\n      sub\n        /* \"#utility.yul\":785:817   */\n      slt\n        /* \"#utility.yul\":782:784   */\n      iszero\n      tag_153\n      jumpi\n        /* \"#utility.yul\":835:841   */\n      dup1\n        /* \"#utility.yul\":827:833   */\n      dup2\n        /* \"#utility.yul\":820:842   */\n      revert\n        /* \"#utility.yul\":782:784   */\n    tag_153:\n        /* \"#utility.yul\":863:892   */\n      tag_154\n        /* \"#utility.yul\":882:891   */\n      dup5\n        /* \"#utility.yul\":863:892   */\n      tag_142\n      jump\t// in\n    tag_154:\n        /* \"#utility.yul\":853:892   */\n      swap3\n      pop\n        /* \"#utility.yul\":911:949   */\n      tag_155\n        /* \"#utility.yul\":945:947   */\n      0x20\n        /* \"#utility.yul\":934:943   */\n      dup6\n        /* \"#utility.yul\":930:948   */\n      add\n        /* \"#utility.yul\":911:949   */\n      tag_142\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":901:949   */\n      swap2\n      pop\n        /* \"#utility.yul\":996:998   */\n      0x40\n        /* \"#utility.yul\":985:994   */\n      dup5\n        /* \"#utility.yul\":981:999   */\n      add\n        /* \"#utility.yul\":968:1000   */\n      calldataload\n        /* \"#utility.yul\":958:1000   */\n      swap1\n      pop\n        /* \"#utility.yul\":772:1006   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1011:1275   */\n    tag_21:\n        /* \"#utility.yul\":1079:1085   */\n      0x00\n        /* \"#utility.yul\":1087:1093   */\n      dup1\n        /* \"#utility.yul\":1140:1142   */\n      0x40\n        /* \"#utility.yul\":1128:1137   */\n      dup4\n        /* \"#utility.yul\":1119:1126   */\n      dup6\n        /* \"#utility.yul\":1115:1138   */\n      sub\n        /* \"#utility.yul\":1111:1143   */\n      slt\n        /* \"#utility.yul\":1108:1110   */\n      iszero\n      tag_157\n      jumpi\n        /* \"#utility.yul\":1161:1167   */\n      dup2\n        /* \"#utility.yul\":1153:1159   */\n      dup3\n        /* \"#utility.yul\":1146:1168   */\n      revert\n        /* \"#utility.yul\":1108:1110   */\n    tag_157:\n        /* \"#utility.yul\":1189:1218   */\n      tag_158\n        /* \"#utility.yul\":1208:1217   */\n      dup4\n        /* \"#utility.yul\":1189:1218   */\n      tag_142\n      jump\t// in\n    tag_158:\n        /* \"#utility.yul\":1179:1218   */\n      swap5\n        /* \"#utility.yul\":1265:1267   */\n      0x20\n        /* \"#utility.yul\":1250:1268   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1237:1269   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1098:1275   */\n      jump\t// out\n        /* \"#utility.yul\":1472:2075   */\n    tag_18:\n        /* \"#utility.yul\":1584:1588   */\n      0x00\n        /* \"#utility.yul\":1613:1615   */\n      0x20\n        /* \"#utility.yul\":1642:1644   */\n      dup1\n        /* \"#utility.yul\":1631:1640   */\n      dup4\n        /* \"#utility.yul\":1624:1645   */\n      mstore\n        /* \"#utility.yul\":1674:1680   */\n      dup4\n        /* \"#utility.yul\":1668:1681   */\n      mload\n        /* \"#utility.yul\":1717:1723   */\n      dup1\n        /* \"#utility.yul\":1712:1714   */\n      dup3\n        /* \"#utility.yul\":1701:1710   */\n      dup6\n        /* \"#utility.yul\":1697:1715   */\n      add\n        /* \"#utility.yul\":1690:1724   */\n      mstore\n        /* \"#utility.yul\":1742:1746   */\n      dup3\n        /* \"#utility.yul\":1755:1895   */\n    tag_161:\n        /* \"#utility.yul\":1769:1775   */\n      dup2\n        /* \"#utility.yul\":1766:1767   */\n      dup2\n        /* \"#utility.yul\":1763:1776   */\n      lt\n        /* \"#utility.yul\":1755:1895   */\n      iszero\n      tag_163\n      jumpi\n        /* \"#utility.yul\":1864:1878   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":1860:1883   */\n      dup4\n      add\n        /* \"#utility.yul\":1854:1884   */\n      mload\n        /* \"#utility.yul\":1830:1847   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":1849:1851   */\n      0x40\n        /* \"#utility.yul\":1826:1852   */\n      add\n        /* \"#utility.yul\":1819:1885   */\n      mstore\n        /* \"#utility.yul\":1784:1794   */\n      dup3\n      add\n        /* \"#utility.yul\":1755:1895   */\n      jump(tag_161)\n    tag_163:\n        /* \"#utility.yul\":1913:1919   */\n      dup2\n        /* \"#utility.yul\":1910:1911   */\n      dup2\n        /* \"#utility.yul\":1907:1920   */\n      gt\n        /* \"#utility.yul\":1904:1906   */\n      iszero\n      tag_164\n      jumpi\n        /* \"#utility.yul\":1983:1987   */\n      dup4\n        /* \"#utility.yul\":1978:1980   */\n      0x40\n        /* \"#utility.yul\":1969:1975   */\n      dup4\n        /* \"#utility.yul\":1958:1967   */\n      dup8\n        /* \"#utility.yul\":1954:1976   */\n      add\n        /* \"#utility.yul\":1950:1981   */\n      add\n        /* \"#utility.yul\":1943:1988   */\n      mstore\n        /* \"#utility.yul\":1904:1906   */\n    tag_164:\n      pop\n        /* \"#utility.yul\":2059:2061   */\n      0x1f\n        /* \"#utility.yul\":2038:2053   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":2034:2063   */\n      and\n        /* \"#utility.yul\":2019:2064   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":2066:2068   */\n      0x40\n        /* \"#utility.yul\":2015:2069   */\n      add\n      swap4\n        /* \"#utility.yul\":1593:2075   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5240:5469   */\n    tag_88:\n        /* \"#utility.yul\":5280:5283   */\n      0x00\n        /* \"#utility.yul\":5311:5312   */\n      dup3\n        /* \"#utility.yul\":5307:5313   */\n      not\n        /* \"#utility.yul\":5304:5305   */\n      dup3\n        /* \"#utility.yul\":5301:5314   */\n      gt\n        /* \"#utility.yul\":5298:5300   */\n      iszero\n      tag_175\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":5337:5370   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5393:5397   */\n      0x11\n        /* \"#utility.yul\":5390:5391   */\n      0x04\n        /* \"#utility.yul\":5383:5398   */\n      mstore\n        /* \"#utility.yul\":5423:5427   */\n      0x24\n        /* \"#utility.yul\":5344:5347   */\n      dup2\n        /* \"#utility.yul\":5411:5428   */\n      revert\n        /* \"#utility.yul\":5298:5300   */\n    tag_175:\n      pop\n        /* \"#utility.yul\":5454:5463   */\n      add\n      swap1\n        /* \"#utility.yul\":5288:5469   */\n      jump\t// out\n        /* \"#utility.yul\":5474:5854   */\n    tag_65:\n        /* \"#utility.yul\":5553:5554   */\n      0x01\n        /* \"#utility.yul\":5549:5561   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":5596:5608   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":5617:5619   */\n      tag_177\n      jumpi\n        /* \"#utility.yul\":5671:5675   */\n      0x7f\n        /* \"#utility.yul\":5663:5669   */\n      dup3\n        /* \"#utility.yul\":5659:5676   */\n      and\n        /* \"#utility.yul\":5649:5676   */\n      swap2\n      pop\n        /* \"#utility.yul\":5617:5619   */\n    tag_177:\n        /* \"#utility.yul\":5724:5726   */\n      0x20\n        /* \"#utility.yul\":5716:5722   */\n      dup3\n        /* \"#utility.yul\":5713:5727   */\n      lt\n        /* \"#utility.yul\":5693:5711   */\n      dup2\n        /* \"#utility.yul\":5690:5728   */\n      eq\n        /* \"#utility.yul\":5687:5689   */\n      iszero\n      tag_178\n      jumpi\n        /* \"#utility.yul\":5770:5780   */\n      0x4e487b71\n        /* \"#utility.yul\":5765:5768   */\n      0xe0\n        /* \"#utility.yul\":5761:5781   */\n      shl\n        /* \"#utility.yul\":5758:5759   */\n      0x00\n        /* \"#utility.yul\":5751:5782   */\n      mstore\n        /* \"#utility.yul\":5805:5809   */\n      0x22\n        /* \"#utility.yul\":5802:5803   */\n      0x04\n        /* \"#utility.yul\":5795:5810   */\n      mstore\n        /* \"#utility.yul\":5833:5837   */\n      0x24\n        /* \"#utility.yul\":5830:5831   */\n      0x00\n        /* \"#utility.yul\":5823:5838   */\n      revert\n        /* \"#utility.yul\":5687:5689   */\n    tag_178:\n      pop\n        /* \"#utility.yul\":5529:5854   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212205f6a94e47376f727def7609e2181b2148cfbd309ce972c6e63f14a42154e278964736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2039:11",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:11",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "78:845:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "127:24:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "136:5:11"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "143:5:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "129:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "129:20:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "129:20:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "106:6:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "114:4:11",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "102:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "102:17:11"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "121:3:11"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "98:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "98:27:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "91:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "91:35:11"
															},
															"nodeType": "YulIf",
															"src": "88:2:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "160:23:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "176:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "170:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "170:13:11"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "164:2:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "192:28:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "210:2:11",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "214:1:11",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "206:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "206:10:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "218:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "202:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "202:18:11"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "196:2:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "243:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "245:16:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "245:18:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "245:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "235:2:11"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "239:2:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "232:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:10:11"
															},
															"nodeType": "YulIf",
															"src": "229:2:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "274:17:11",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "288:2:11",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "284:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "284:7:11"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "278:2:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "300:23:11",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "314:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "314:9:11"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "304:6:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "332:71:11",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "354:6:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "378:2:11"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "382:4:11",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "374:3:11"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "374:13:11"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "389:2:11"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "370:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "370:22:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "394:2:11",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "366:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "366:31:11"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "399:2:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "362:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "362:40:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "350:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "350:53:11"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "336:10:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "462:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "464:16:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "464:18:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "464:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "421:10:11"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "433:2:11"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "418:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "418:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "441:10:11"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "453:6:11"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "438:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "438:22:11"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "415:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "415:46:11"
															},
															"nodeType": "YulIf",
															"src": "412:2:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "500:2:11",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "504:10:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "493:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "493:22:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "493:22:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "531:6:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "539:2:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "524:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "524:18:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "524:18:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "551:14:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "561:4:11",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "555:2:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "611:24:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "620:5:11"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "627:5:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "613:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "613:20:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "613:20:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "588:6:11"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "596:2:11"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "584:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "584:15:11"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "601:2:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "580:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "580:24:11"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "606:3:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "577:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "577:33:11"
															},
															"nodeType": "YulIf",
															"src": "574:2:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "644:14:11",
															"value": {
																"name": "array",
																"nodeType": "YulIdentifier",
																"src": "653:5:11"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "648:1:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "713:87:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "742:6:11"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "750:1:11"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "738:3:11"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "738:14:11"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "754:2:11"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "734:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "734:23:11"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "773:6:11"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "781:1:11"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "769:3:11"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "769:14:11"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "785:2:11"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "765:3:11"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "765:23:11"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "759:5:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "759:30:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "727:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "727:63:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "727:63:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "678:1:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "681:2:11"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "675:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "675:9:11"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "685:19:11",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "687:15:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "696:1:11"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "699:2:11"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "692:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "692:10:11"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "687:1:11"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "671:3:11",
																"statements": []
															},
															"src": "667:133:11"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "830:63:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "859:6:11"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "867:2:11"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "855:3:11"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "855:15:11"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "872:2:11"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "851:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "851:24:11"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "877:5:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "844:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "844:39:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "844:39:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "815:1:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "818:2:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "812:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "812:9:11"
															},
															"nodeType": "YulIf",
															"src": "809:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "902:15:11",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "911:6:11"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "902:5:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "52:6:11",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "60:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "68:5:11",
														"type": ""
													}
												],
												"src": "14:909:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1046:474:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1092:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1101:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1109:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1094:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1094:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1094:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1067:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1076:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1063:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1063:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1088:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1059:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1059:32:11"
															},
															"nodeType": "YulIf",
															"src": "1056:2:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1127:30:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1147:9:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1141:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1141:16:11"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1131:6:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1166:28:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1184:2:11",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1188:1:11",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1180:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1180:10:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1192:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1176:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1176:18:11"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1170:2:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1221:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1230:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1238:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1223:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1223:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1223:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1209:6:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1217:2:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1206:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1206:14:11"
															},
															"nodeType": "YulIf",
															"src": "1203:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1256:71:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1299:9:11"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1310:6:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1295:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1295:22:11"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1319:7:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1266:28:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1266:61:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1256:6:11"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1336:41:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1362:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1373:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1358:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1358:18:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1352:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1352:25:11"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1340:8:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1406:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1415:6:11"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1423:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1408:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1408:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1408:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1392:8:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1402:2:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1389:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1389:16:11"
															},
															"nodeType": "YulIf",
															"src": "1386:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1441:73:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1484:9:11"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1495:8:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1480:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1480:24:11"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1506:7:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1451:28:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1451:63:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1441:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1004:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1015:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1027:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1035:6:11",
														"type": ""
													}
												],
												"src": "928:592:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1580:325:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1590:22:11",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1604:1:11",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1607:4:11"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1600:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1600:12:11"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1590:6:11"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1621:38:11",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1651:4:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1657:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1647:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1647:12:11"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1625:18:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1698:31:11",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1700:27:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1714:6:11"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1722:4:11",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1710:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1710:17:11"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1700:6:11"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1678:18:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1671:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1671:26:11"
															},
															"nodeType": "YulIf",
															"src": "1668:2:11"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1788:111:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1809:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1816:3:11",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1821:10:11",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1812:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1812:20:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1802:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1802:31:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1802:31:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1853:1:11",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1856:4:11",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1846:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1846:15:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1846:15:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1881:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1884:4:11",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1874:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1874:15:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1874:15:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1744:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1767:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1775:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1764:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1764:14:11"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1741:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1741:38:11"
															},
															"nodeType": "YulIf",
															"src": "1738:2:11"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1560:4:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1569:6:11",
														"type": ""
													}
												],
												"src": "1525:380:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1942:95:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1959:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1966:3:11",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1971:10:11",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1962:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1962:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1952:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1952:31:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1952:31:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1999:1:11",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2002:4:11",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1992:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1992:15:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1992:15:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2023:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2026:4:11",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2016:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2016:15:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2016:15:11"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "1910:127:11"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(array, array) }\n        let i := array\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), array)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(value0, value0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(value1, value1) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}",
									"id": 11,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b5060405162000b0a38038062000b0a8339810160408190526200003491620001c1565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b5050506200027b565b828054620000769062000228565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200011f578081fd5b81516001600160401b03808211156200013c576200013c62000265565b604051601f8301601f19908116603f0116810190828211818310171562000167576200016762000265565b8160405283815260209250868385880101111562000183578485fd5b8491505b83821015620001a6578582018301518183018401529082019062000187565b83821115620001b757848385830101525b9695505050505050565b60008060408385031215620001d4578182fd5b82516001600160401b0380821115620001eb578384fd5b620001f9868387016200010e565b935060208501519150808211156200020f578283fd5b506200021e858286016200010e565b9150509250929050565b600181811c908216806200023d57607f821691505b602082108114156200025f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61087f806200028b6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c39190610797565b60405180910390f35b6100df6100da36600461076e565b610232565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610733565b61024a565b604051601281526020016100c3565b6100df61013136600461076e565b61026e565b6100f36101443660046106e0565b6001600160a01b031660009081526020819052604090205490565b6100b6610290565b6100df61017536600461076e565b61029f565b6100df61018836600461076e565b61031f565b6100f361019b366004610701565b61032d565b6060600380546101af9061080e565b80601f01602080910402602001604051908101604052809291908181526020018280546101db9061080e565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b91906107ea565b610358565b6060600480546101af9061080e565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260208190526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061066b9084906107ea565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106b791815260200190565b60405180910390a36104f0565b80356001600160a01b03811681146106db57600080fd5b919050565b6000602082840312156106f1578081fd5b6106fa826106c4565b9392505050565b60008060408385031215610713578081fd5b61071c836106c4565b915061072a602084016106c4565b90509250929050565b600080600060608486031215610747578081fd5b610750846106c4565b925061075e602085016106c4565b9150604084013590509250925092565b60008060408385031215610780578182fd5b610789836106c4565b946020939093013593505050565b6000602080835283518082850152825b818110156107c3578581018301518582016040015282016107a7565b818111156107d45783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561080957634e487b7160e01b81526011600452602481fd5b500190565b600181811c9082168061082257607f821691505b6020821081141561084357634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212205f6a94e47376f727def7609e2181b2148cfbd309ce972c6e63f14a42154e278964736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xB0A CODESIZE SUB DUP1 PUSH3 0xB0A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1C1 JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP POP POP PUSH3 0x27B JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x76 SWAP1 PUSH3 0x228 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xC8 JUMP JUMPDEST POP PUSH3 0xF3 SWAP3 SWAP2 POP PUSH3 0xF7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x11F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x13C JUMPI PUSH3 0x13C PUSH3 0x265 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x167 JUMPI PUSH3 0x167 PUSH3 0x265 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x183 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP5 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1A6 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x187 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1B7 JUMPI DUP5 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1D4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x1EB JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH3 0x1F9 DUP7 DUP4 DUP8 ADD PUSH3 0x10E JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x20F JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH3 0x21E DUP6 DUP3 DUP7 ADD PUSH3 0x10E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x23D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x25F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x87F DUP1 PUSH3 0x28B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x733 JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x701 JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x80E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x80E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x7EA JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x80E JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x66B SWAP1 DUP5 SWAP1 PUSH2 0x7EA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6B7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6FA DUP3 PUSH2 0x6C4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x713 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x71C DUP4 PUSH2 0x6C4 JUMP JUMPDEST SWAP2 POP PUSH2 0x72A PUSH1 0x20 DUP5 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x747 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x750 DUP5 PUSH2 0x6C4 JUMP JUMPDEST SWAP3 POP PUSH2 0x75E PUSH1 0x20 DUP6 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x780 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x789 DUP4 PUSH2 0x6C4 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7C3 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x7A7 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x7D4 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x809 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x822 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x843 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F PUSH11 0x94E47376F727DEF7609E21 DUP2 0xB2 EQ DUP13 0xFB 0xD3 MULMOD 0xCE SWAP8 0x2C PUSH15 0x63F14A42154E278964736F6C634300 ADDMOD DIV STOP CALLER ",
							"sourceMap": "1403:11223:2:-:0;;;1978:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2044:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2067:17:2;;;;:7;;:17;;;;;:::i;:::-;;1978:113;;1403:11223;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1403:11223:2;;;-1:-1:-1;1403:11223:2;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:909:11;68:5;121:3;114:4;106:6;102:17;98:27;88:2;;143:5;136;129:20;88:2;170:13;;-1:-1:-1;;;;;232:10:11;;;229:2;;;245:18;;:::i;:::-;320:2;314:9;288:2;374:13;;-1:-1:-1;;370:22:11;;;394:2;366:31;362:40;350:53;;;418:18;;;438:22;;;415:46;412:2;;;464:18;;:::i;:::-;504:10;500:2;493:22;539:2;531:6;524:18;561:4;551:14;;606:3;601:2;596;588:6;584:15;580:24;577:33;574:2;;;627:5;620;613:20;574:2;653:5;644:14;;667:133;681:2;678:1;675:9;667:133;;;769:14;;;765:23;;759:30;738:14;;;734:23;;727:63;692:10;;;;667:133;;;818:2;815:1;812:9;809:2;;;877:5;872:2;867;859:6;855:15;851:24;844:39;809:2;911:6;78:845;-1:-1:-1;;;;;;78:845:11:o;928:592::-;1027:6;1035;1088:2;1076:9;1067:7;1063:23;1059:32;1056:2;;;1109:6;1101;1094:22;1056:2;1141:16;;-1:-1:-1;;;;;1206:14:11;;;1203:2;;;1238:6;1230;1223:22;1203:2;1266:61;1319:7;1310:6;1299:9;1295:22;1266:61;:::i;:::-;1256:71;;1373:2;1362:9;1358:18;1352:25;1336:41;;1402:2;1392:8;1389:16;1386:2;;;1423:6;1415;1408:22;1386:2;;1451:63;1506:7;1495:8;1484:9;1480:24;1451:63;:::i;:::-;1441:73;;;1046:474;;;;;:::o;1525:380::-;1604:1;1600:12;;;;1647;;;1668:2;;1722:4;1714:6;1710:17;1700:27;;1668:2;1775;1767:6;1764:14;1744:18;1741:38;1738:2;;;1821:10;1816:3;1812:20;1809:1;1802:31;1856:4;1853:1;1846:15;1884:4;1881:1;1874:15;1738:2;;1580:325;;;:::o;1910:127::-;1971:10;1966:3;1962:20;1959:1;1952:31;2002:4;1999:1;1992:15;2026:4;2023:1;2016:15;1942:95;1403:11223:2;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5856:11",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:11",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "63:124:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "82:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "82:20:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "73:5:11"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "165:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "174:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "177:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "167:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "167:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "167:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "124:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "135:5:11"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "150:3:11",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "155:1:11",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "146:3:11"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "146:11:11"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "159:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "142:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "142:19:11"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "131:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "131:31:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "121:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "121:42:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "114:50:11"
															},
															"nodeType": "YulIf",
															"src": "111:2:11"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "42:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:11",
														"type": ""
													}
												],
												"src": "14:173:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "262:126:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "308:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "317:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "325:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "310:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "310:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "310:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "283:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "292:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "279:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "279:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "304:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "275:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "275:32:11"
															},
															"nodeType": "YulIf",
															"src": "272:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "343:39:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "372:9:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "353:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "353:29:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "343:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "228:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "239:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "251:6:11",
														"type": ""
													}
												],
												"src": "192:196:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "480:183:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "526:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "535:6:11"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "543:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "528:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "528:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "528:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "501:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "510:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "497:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "497:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "522:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "493:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "493:32:11"
															},
															"nodeType": "YulIf",
															"src": "490:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "561:39:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "590:9:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "571:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "571:29:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "561:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "609:48:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "642:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "653:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "638:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "638:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "619:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "619:38:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "609:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "438:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "449:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "461:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "469:6:11",
														"type": ""
													}
												],
												"src": "393:270:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "772:234:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "818:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "827:6:11"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "835:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "820:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "820:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "820:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "793:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "802:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "789:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "789:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "814:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "785:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "785:32:11"
															},
															"nodeType": "YulIf",
															"src": "782:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "853:39:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "882:9:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "863:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "863:29:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "853:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "901:48:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "934:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "945:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "930:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "930:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "911:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "911:38:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "901:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "958:42:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "985:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "996:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "981:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "981:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "968:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "968:32:11"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "958:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "722:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "733:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "745:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "753:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "761:6:11",
														"type": ""
													}
												],
												"src": "668:338:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1098:177:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1144:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1153:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1161:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1146:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1146:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1146:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1119:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1128:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1115:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1115:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1140:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1111:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1111:32:11"
															},
															"nodeType": "YulIf",
															"src": "1108:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1179:39:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1208:9:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1189:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1189:29:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1179:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1227:42:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1254:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1265:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1250:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1250:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1237:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1237:32:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1227:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1056:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1067:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1079:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1087:6:11",
														"type": ""
													}
												],
												"src": "1011:264:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1375:92:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1385:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1397:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1408:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1393:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1393:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1385:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1427:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1452:6:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1445:6:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1445:14:11"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1438:6:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1438:22:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1420:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1420:41:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1420:41:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1344:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1355:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1366:4:11",
														"type": ""
													}
												],
												"src": "1280:187:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1593:482:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1603:12:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1613:2:11",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1607:2:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1631:9:11"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1642:2:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1624:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1624:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1624:21:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1654:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1674:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1668:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1668:13:11"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1658:6:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1701:9:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1712:2:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1697:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1697:18:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1717:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1690:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1690:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1690:34:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1733:13:11",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "1742:4:11"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1737:1:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1805:90:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1834:9:11"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1845:1:11"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1830:3:11"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1830:17:11"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1849:2:11",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1826:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1826:26:11"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "1868:6:11"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "1876:1:11"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "1864:3:11"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1864:14:11"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "1880:2:11"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1860:3:11"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1860:23:11"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1854:5:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1854:30:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1819:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1819:66:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1819:66:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1766:1:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1769:6:11"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1763:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1763:13:11"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1777:19:11",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1779:15:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1788:1:11"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1791:2:11"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1784:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1784:10:11"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1779:1:11"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1759:3:11",
																"statements": []
															},
															"src": "1755:140:11"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1929:69:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1958:9:11"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "1969:6:11"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1954:3:11"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1954:22:11"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1978:2:11",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1950:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1950:31:11"
																				},
																				{
																					"name": "tail",
																					"nodeType": "YulIdentifier",
																					"src": "1983:4:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1943:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1943:45:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1943:45:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1910:1:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1913:6:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1907:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1907:13:11"
															},
															"nodeType": "YulIf",
															"src": "1904:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2007:62:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2023:9:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "2042:6:11"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2050:2:11",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "2038:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2038:15:11"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2059:2:11",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2055:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2055:7:11"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2034:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2034:29:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2019:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2019:45:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2066:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2015:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2015:54:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2007:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1562:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1573:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1584:4:11",
														"type": ""
													}
												],
												"src": "1472:603:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2254:225:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2271:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2282:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2264:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2264:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2264:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2305:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2316:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2301:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2301:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2321:2:11",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2294:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2294:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2294:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2344:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2355:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2340:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2340:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2360:34:11",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2333:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2333:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2333:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2415:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2426:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2411:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2411:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2431:5:11",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2404:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2404:33:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2404:33:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2446:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2458:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2469:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2454:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2454:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2446:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2231:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2245:4:11",
														"type": ""
													}
												],
												"src": "2080:399:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2658:224:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2675:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2686:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2668:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2668:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2668:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2709:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2720:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2705:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2705:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2725:2:11",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2698:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2698:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2698:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2748:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2759:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2744:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2744:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2764:34:11",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2737:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2737:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2737:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2819:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2830:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2815:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2815:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2835:4:11",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2808:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2808:32:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2808:32:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2849:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2861:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2872:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2857:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2857:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2849:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2635:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2649:4:11",
														"type": ""
													}
												],
												"src": "2484:398:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3061:179:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3078:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3089:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3071:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3071:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3071:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3112:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3123:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3108:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3108:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3128:2:11",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3101:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3101:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3101:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3151:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3162:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3147:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3147:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3167:31:11",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3140:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3140:59:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3140:59:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3208:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3220:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3231:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3216:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3216:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3208:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3038:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3052:4:11",
														"type": ""
													}
												],
												"src": "2887:353:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3419:228:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3436:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3447:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3429:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3429:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3429:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3470:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3481:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3466:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3466:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3486:2:11",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3459:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3459:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3459:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3509:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3520:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3505:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3505:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3525:34:11",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3498:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3498:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3498:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3580:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3591:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3576:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3576:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3596:8:11",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3569:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3569:36:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3569:36:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3614:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3626:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3637:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3622:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3622:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3614:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3396:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3410:4:11",
														"type": ""
													}
												],
												"src": "3245:402:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3826:227:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3843:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3854:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3836:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3836:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3836:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3877:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3888:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3873:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3873:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3893:2:11",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3866:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3866:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3866:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3916:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3927:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3912:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3912:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3932:34:11",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3905:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3905:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3905:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3987:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3998:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3983:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3983:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4003:7:11",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3976:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3976:35:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3976:35:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4020:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4032:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4043:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4028:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4028:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4020:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3803:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3817:4:11",
														"type": ""
													}
												],
												"src": "3652:401:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4232:226:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4249:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4260:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4242:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4242:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4242:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4283:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4294:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4279:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4279:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4299:2:11",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4272:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4272:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4272:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4322:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4333:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4318:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4318:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4338:34:11",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4311:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4311:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4311:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4393:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4404:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4389:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4389:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4409:6:11",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4382:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4382:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4382:34:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4425:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4437:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4448:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4433:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4433:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4425:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4209:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4223:4:11",
														"type": ""
													}
												],
												"src": "4058:400:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4637:227:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4654:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4665:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4647:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4647:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4647:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4688:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4699:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4684:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4684:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4704:2:11",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4677:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4677:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4677:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4727:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4738:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4723:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4723:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4743:34:11",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4716:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4716:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4716:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4798:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4809:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4794:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4794:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4814:7:11",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4787:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4787:35:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4787:35:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4831:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4843:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4854:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4839:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4839:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4831:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4614:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4628:4:11",
														"type": ""
													}
												],
												"src": "4463:401:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4970:76:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4980:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4992:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5003:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4988:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4988:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4980:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5022:9:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5033:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5015:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5015:25:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5015:25:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4939:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4950:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4961:4:11",
														"type": ""
													}
												],
												"src": "4869:177:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5148:87:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5158:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5170:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5181:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5166:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5166:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5158:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5200:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5215:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5223:4:11",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5211:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5211:17:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5193:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5193:36:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5193:36:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5117:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5128:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5139:4:11",
														"type": ""
													}
												],
												"src": "5051:184:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5288:181:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5323:115:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "sum",
																					"nodeType": "YulIdentifier",
																					"src": "5344:3:11"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5353:3:11",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5358:10:11",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5349:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5349:20:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5337:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5337:33:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5337:33:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5390:1:11",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5393:4:11",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5383:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5383:15:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5383:15:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "sum",
																					"nodeType": "YulIdentifier",
																					"src": "5418:3:11"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5423:4:11",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5411:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5411:17:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5411:17:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5304:1:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5311:1:11"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "5307:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5307:6:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5301:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5301:13:11"
															},
															"nodeType": "YulIf",
															"src": "5298:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5447:16:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5458:1:11"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5461:1:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5454:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5454:9:11"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "5447:3:11"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5271:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5274:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "5280:3:11",
														"type": ""
													}
												],
												"src": "5240:229:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5529:325:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5539:22:11",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5553:1:11",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5556:4:11"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5549:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5549:12:11"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "5539:6:11"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5570:38:11",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5600:4:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5606:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5596:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5596:12:11"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "5574:18:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5647:31:11",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5649:27:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "5663:6:11"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5671:4:11",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "5659:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5659:17:11"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5649:6:11"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5627:18:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5620:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5620:26:11"
															},
															"nodeType": "YulIf",
															"src": "5617:2:11"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5737:111:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5758:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5765:3:11",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5770:10:11",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5761:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5761:20:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5751:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5751:31:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5751:31:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5802:1:11",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5805:4:11",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5795:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5795:15:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5795:15:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5830:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5833:4:11",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5823:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5823:15:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5823:15:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5693:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5716:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5724:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5713:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5713:14:11"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "5690:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5690:38:11"
															},
															"nodeType": "YulIf",
															"src": "5687:2:11"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "5509:4:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5518:6:11",
														"type": ""
													}
												],
												"src": "5474:380:11"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(sum, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(sum, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 11,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c39190610797565b60405180910390f35b6100df6100da36600461076e565b610232565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610733565b61024a565b604051601281526020016100c3565b6100df61013136600461076e565b61026e565b6100f36101443660046106e0565b6001600160a01b031660009081526020819052604090205490565b6100b6610290565b6100df61017536600461076e565b61029f565b6100df61018836600461076e565b61031f565b6100f361019b366004610701565b61032d565b6060600380546101af9061080e565b80601f01602080910402602001604051908101604052809291908181526020018280546101db9061080e565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b91906107ea565b610358565b6060600480546101af9061080e565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260208190526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061066b9084906107ea565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106b791815260200190565b60405180910390a36104f0565b80356001600160a01b03811681146106db57600080fd5b919050565b6000602082840312156106f1578081fd5b6106fa826106c4565b9392505050565b60008060408385031215610713578081fd5b61071c836106c4565b915061072a602084016106c4565b90509250929050565b600080600060608486031215610747578081fd5b610750846106c4565b925061075e602085016106c4565b9150604084013590509250925092565b60008060408385031215610780578182fd5b610789836106c4565b946020939093013593505050565b6000602080835283518082850152825b818110156107c3578581018301518582016040015282016107a7565b818111156107d45783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561080957634e487b7160e01b81526011600452602481fd5b500190565b600181811c9082168061082257607f821691505b6020821081141561084357634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212205f6a94e47376f727def7609e2181b2148cfbd309ce972c6e63f14a42154e278964736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x733 JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x701 JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x80E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x80E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x7EA JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x80E JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x66B SWAP1 DUP5 SWAP1 PUSH2 0x7EA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6B7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6FA DUP3 PUSH2 0x6C4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x713 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x71C DUP4 PUSH2 0x6C4 JUMP JUMPDEST SWAP2 POP PUSH2 0x72A PUSH1 0x20 DUP5 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x747 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x750 DUP5 PUSH2 0x6C4 JUMP JUMPDEST SWAP3 POP PUSH2 0x75E PUSH1 0x20 DUP6 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x780 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x789 DUP4 PUSH2 0x6C4 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7C3 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x7A7 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x7D4 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x809 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x822 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x843 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F PUSH11 0x94E47376F727DEF7609E21 DUP2 0xB2 EQ DUP13 0xFB 0xD3 MULMOD 0xCE SWAP8 0x2C PUSH15 0x63F14A42154E278964736F6C634300 ADDMOD DIV STOP CALLER ",
							"sourceMap": "1403:11223:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4433:197;;;;;;:::i;:::-;;:::i;:::-;;;1445:14:11;;1438:22;1420:41;;1408:2;1393:18;4433:197:2;1375:92:11;3244:106:2;3331:12;;3244:106;;;5015:25:11;;;5003:2;4988:18;3244:106:2;4970:76:11;5192:286:2;;;;;;:::i;:::-;;:::i;3093:91::-;;;3175:2;5193:36:11;;5181:2;5166:18;3093:91:2;5148:87:11;5873:234:2;;;;;;:::i;:::-;;:::i;3408:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3508:18:2;3482:7;3508:18;;;;;;;;;;;;3408:125;2367:102;;;:::i;6594:427::-;;;;;;:::i;:::-;;:::i;3729:189::-;;;;;;:::i;:::-;;:::i;3976:149::-;;;;;;:::i;:::-;;:::i;2156:98::-;2210:13;2242:5;2235:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98;:::o;4433:197::-;4516:4;719:10:5;4570:32:2;719:10:5;4586:7:2;4595:6;4570:8;:32::i;:::-;-1:-1:-1;4619:4:2;;4433:197;-1:-1:-1;;;4433:197:2:o;5192:286::-;5319:4;719:10:5;5375:38:2;5391:4;719:10:5;5406:6:2;5375:15;:38::i;:::-;5423:27;5433:4;5439:2;5443:6;5423:9;:27::i;:::-;-1:-1:-1;5467:4:2;;5192:286;-1:-1:-1;;;;5192:286:2:o;5873:234::-;5961:4;719:10:5;6015:64:2;719:10:5;6031:7:2;6068:10;6040:25;719:10:5;6031:7:2;6040:9;:25::i;:::-;:38;;;;:::i;:::-;6015:8;:64::i;2367:102::-;2423:13;2455:7;2448:14;;;;;:::i;6594:427::-;6687:4;719:10:5;6687:4:2;6768:25;719:10:5;6785:7:2;6768:9;:25::i;:::-;6741:52;;6831:15;6811:16;:35;;6803:85;;;;-1:-1:-1;;;6803:85:2;;4665:2:11;6803:85:2;;;4647:21:11;4704:2;4684:18;;;4677:30;4743:34;4723:18;;;4716:62;-1:-1:-1;;;4794:18:11;;;4787:35;4839:19;;6803:85:2;;;;;;;;;6922:60;6931:5;6938:7;6966:15;6947:16;:34;6922:8;:60::i;3729:189::-;3808:4;719:10:5;3862:28:2;719:10:5;3879:2:2;3883:6;3862:9;:28::i;3976:149::-;-1:-1:-1;;;;;4091:18:2;;;4065:7;4091:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3976:149::o;10119:370::-;-1:-1:-1;;;;;10250:19:2;;10242:68;;;;-1:-1:-1;;;10242:68:2;;4260:2:11;10242:68:2;;;4242:21:11;4299:2;4279:18;;;4272:30;4338:34;4318:18;;;4311:62;-1:-1:-1;;;4389:18:11;;;4382:34;4433:19;;10242:68:2;4232:226:11;10242:68:2;-1:-1:-1;;;;;10328:21:2;;10320:68;;;;-1:-1:-1;;;10320:68:2;;2686:2:11;10320:68:2;;;2668:21:11;2725:2;2705:18;;;2698:30;2764:34;2744:18;;;2737:62;-1:-1:-1;;;2815:18:11;;;2808:32;2857:19;;10320:68:2;2658:224:11;10320:68:2;-1:-1:-1;;;;;10399:18:2;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10450:32;;5015:25:11;;;10450:32:2;;4988:18:11;10450:32:2;;;;;;;10119:370;;;:::o;10770:441::-;10900:24;10927:25;10937:5;10944:7;10927:9;:25::i;:::-;10900:52;;-1:-1:-1;;10966:16:2;:37;10962:243;;11047:6;11027:16;:26;;11019:68;;;;-1:-1:-1;;;11019:68:2;;3089:2:11;11019:68:2;;;3071:21:11;3128:2;3108:18;;;3101:30;3167:31;3147:18;;;3140:59;3216:18;;11019:68:2;3061:179:11;11019:68:2;11129:51;11138:5;11145:7;11173:6;11154:16;:25;11129:8;:51::i;:::-;10770:441;;;;:::o;7484:651::-;-1:-1:-1;;;;;7610:18:2;;7602:68;;;;-1:-1:-1;;;7602:68:2;;3854:2:11;7602:68:2;;;3836:21:11;3893:2;3873:18;;;3866:30;3932:34;3912:18;;;3905:62;-1:-1:-1;;;3983:18:11;;;3976:35;4028:19;;7602:68:2;3826:227:11;7602:68:2;-1:-1:-1;;;;;7688:16:2;;7680:64;;;;-1:-1:-1;;;7680:64:2;;2282:2:11;7680:64:2;;;2264:21:11;2321:2;2301:18;;;2294:30;2360:34;2340:18;;;2333:62;-1:-1:-1;;;2411:18:11;;;2404:33;2454:19;;7680:64:2;2254:225:11;7680:64:2;-1:-1:-1;;;;;7826:15:2;;7804:19;7826:15;;;;;;;;;;;7859:21;;;;7851:72;;;;-1:-1:-1;;;7851:72:2;;3447:2:11;7851:72:2;;;3429:21:11;3486:2;3466:18;;;3459:30;3525:34;3505:18;;;3498:62;-1:-1:-1;;;3576:18:11;;;3569:36;3622:19;;7851:72:2;3419:228:11;7851:72:2;-1:-1:-1;;;;;7957:15:2;;;:9;:15;;;;;;;;;;;7975:20;;;7957:38;;8015:13;;;;;;;;:23;;7989:6;;7957:9;8015:23;;7989:6;;8015:23;:::i;:::-;;;;;;;;8069:2;-1:-1:-1;;;;;8054:26:2;8063:4;-1:-1:-1;;;;;8054:26:2;;8073:6;8054:26;;;;5015:25:11;;5003:2;4988:18;;4970:76;8054:26:2;;;;;;;;8091:37;11795:121;14:173:11;82:20;;-1:-1:-1;;;;;131:31:11;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:196::-;251:6;304:2;292:9;283:7;279:23;275:32;272:2;;;325:6;317;310:22;272:2;353:29;372:9;353:29;:::i;:::-;343:39;262:126;-1:-1:-1;;;262:126:11:o;393:270::-;461:6;469;522:2;510:9;501:7;497:23;493:32;490:2;;;543:6;535;528:22;490:2;571:29;590:9;571:29;:::i;:::-;561:39;;619:38;653:2;642:9;638:18;619:38;:::i;:::-;609:48;;480:183;;;;;:::o;668:338::-;745:6;753;761;814:2;802:9;793:7;789:23;785:32;782:2;;;835:6;827;820:22;782:2;863:29;882:9;863:29;:::i;:::-;853:39;;911:38;945:2;934:9;930:18;911:38;:::i;:::-;901:48;;996:2;985:9;981:18;968:32;958:42;;772:234;;;;;:::o;1011:264::-;1079:6;1087;1140:2;1128:9;1119:7;1115:23;1111:32;1108:2;;;1161:6;1153;1146:22;1108:2;1189:29;1208:9;1189:29;:::i;:::-;1179:39;1265:2;1250:18;;;;1237:32;;-1:-1:-1;;;1098:177:11:o;1472:603::-;1584:4;1613:2;1642;1631:9;1624:21;1674:6;1668:13;1717:6;1712:2;1701:9;1697:18;1690:34;1742:4;1755:140;1769:6;1766:1;1763:13;1755:140;;;1864:14;;;1860:23;;1854:30;1830:17;;;1849:2;1826:26;1819:66;1784:10;;1755:140;;;1913:6;1910:1;1907:13;1904:2;;;1983:4;1978:2;1969:6;1958:9;1954:22;1950:31;1943:45;1904:2;-1:-1:-1;2059:2:11;2038:15;-1:-1:-1;;2034:29:11;2019:45;;;;2066:2;2015:54;;1593:482;-1:-1:-1;;;1593:482:11:o;5240:229::-;5280:3;5311:1;5307:6;5304:1;5301:13;5298:2;;;-1:-1:-1;;;5337:33:11;;5393:4;5390:1;5383:15;5423:4;5344:3;5411:17;5298:2;-1:-1:-1;5454:9:11;;5288:181::o;5474:380::-;5553:1;5549:12;;;;5596;;;5617:2;;5671:4;5663:6;5659:17;5649:27;;5617:2;5724;5716:6;5713:14;5693:18;5690:38;5687:2;;;5770:10;5765:3;5761:20;5758:1;5751:31;5805:4;5802:1;5795:15;5833:4;5830:1;5823:15;5687:2;;5529:325;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "435000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "22524",
								"balanceOf(address)": "1262",
								"decimals()": "266",
								"decreaseAllowance(address,uint256)": "23616",
								"increaseAllowance(address,uint256)": "23578",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "1026",
								"transfer(address,uint256)": "44470",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "CODESIZE",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "tag",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "6"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2044,
									"end": 2049,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 2044,
									"end": 2049,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "tag",
									"source": 2,
									"value": "6"
								},
								{
									"begin": 2044,
									"end": 2057,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2074,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 2067,
									"end": 2074,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "tag",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2067,
									"end": 2084,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1978,
									"end": 2091,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "21"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DIV",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "13"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 2,
									"value": "13"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "14"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "FF"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 2,
									"value": "14"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 2,
									"value": "15"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "15"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "18"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMP",
									"source": 2,
									"value": "[out]"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 2,
									"value": "18"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "tag",
									"source": 2,
									"value": "19"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "19"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 14,
									"end": 923,
									"name": "tag",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 14,
									"end": 923,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 68,
									"end": 73,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 121,
									"end": 124,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 114,
									"end": 118,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 106,
									"end": 112,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 102,
									"end": 119,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 98,
									"end": 125,
									"name": "SLT",
									"source": 11
								},
								{
									"begin": 88,
									"end": 90,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 88,
									"end": 90,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 143,
									"end": 148,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 136,
									"end": 141,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 129,
									"end": 149,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 88,
									"end": 90,
									"name": "tag",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 88,
									"end": 90,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 170,
									"end": 183,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 170,
									"end": 183,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 232,
									"end": 242,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 232,
									"end": 242,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 232,
									"end": 242,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 229,
									"end": 231,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 229,
									"end": 231,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "26"
								},
								{
									"begin": 229,
									"end": 231,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 245,
									"end": 263,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "26"
								},
								{
									"begin": 245,
									"end": 263,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "27"
								},
								{
									"begin": 245,
									"end": 263,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 245,
									"end": 263,
									"name": "tag",
									"source": 11,
									"value": "26"
								},
								{
									"begin": 245,
									"end": 263,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 320,
									"end": 322,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 314,
									"end": 323,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 288,
									"end": 290,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 374,
									"end": 387,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 374,
									"end": 387,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 370,
									"end": 392,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 370,
									"end": 392,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 370,
									"end": 392,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 394,
									"end": 396,
									"name": "PUSH",
									"source": 11,
									"value": "3F"
								},
								{
									"begin": 366,
									"end": 397,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 362,
									"end": 402,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 350,
									"end": 403,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 350,
									"end": 403,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 350,
									"end": 403,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 418,
									"end": 436,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 418,
									"end": 436,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 418,
									"end": 436,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 438,
									"end": 460,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 438,
									"end": 460,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 438,
									"end": 460,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 415,
									"end": 461,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 412,
									"end": 414,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 412,
									"end": 414,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "29"
								},
								{
									"begin": 412,
									"end": 414,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 464,
									"end": 482,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "29"
								},
								{
									"begin": 464,
									"end": 482,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "27"
								},
								{
									"begin": 464,
									"end": 482,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 464,
									"end": 482,
									"name": "tag",
									"source": 11,
									"value": "29"
								},
								{
									"begin": 464,
									"end": 482,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 504,
									"end": 514,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 500,
									"end": 502,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 493,
									"end": 515,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 539,
									"end": 541,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 531,
									"end": 537,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 524,
									"end": 542,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 561,
									"end": 565,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 551,
									"end": 565,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 551,
									"end": 565,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 606,
									"end": 609,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 601,
									"end": 603,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 596,
									"end": 598,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 588,
									"end": 594,
									"name": "DUP9",
									"source": 11
								},
								{
									"begin": 584,
									"end": 599,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 580,
									"end": 604,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 577,
									"end": 610,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 574,
									"end": 576,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 574,
									"end": 576,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "30"
								},
								{
									"begin": 574,
									"end": 576,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 627,
									"end": 632,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 620,
									"end": 625,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 613,
									"end": 633,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 574,
									"end": 576,
									"name": "tag",
									"source": 11,
									"value": "30"
								},
								{
									"begin": 574,
									"end": 576,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 653,
									"end": 658,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 644,
									"end": 658,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 644,
									"end": 658,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 667,
									"end": 800,
									"name": "tag",
									"source": 11,
									"value": "31"
								},
								{
									"begin": 667,
									"end": 800,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 681,
									"end": 683,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 678,
									"end": 679,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 675,
									"end": 684,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 667,
									"end": 800,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 667,
									"end": 800,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "33"
								},
								{
									"begin": 667,
									"end": 800,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 769,
									"end": 783,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 769,
									"end": 783,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 769,
									"end": 783,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 765,
									"end": 788,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 765,
									"end": 788,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 759,
									"end": 789,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 738,
									"end": 752,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 738,
									"end": 752,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 738,
									"end": 752,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 734,
									"end": 757,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 734,
									"end": 757,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 727,
									"end": 790,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 692,
									"end": 702,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 692,
									"end": 702,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 692,
									"end": 702,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 692,
									"end": 702,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 667,
									"end": 800,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "31"
								},
								{
									"begin": 667,
									"end": 800,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 667,
									"end": 800,
									"name": "tag",
									"source": 11,
									"value": "33"
								},
								{
									"begin": 667,
									"end": 800,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 818,
									"end": 820,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 815,
									"end": 816,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 812,
									"end": 821,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 809,
									"end": 811,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 809,
									"end": 811,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "34"
								},
								{
									"begin": 809,
									"end": 811,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 877,
									"end": 882,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 872,
									"end": 874,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 867,
									"end": 869,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 859,
									"end": 865,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 855,
									"end": 870,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 851,
									"end": 875,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 844,
									"end": 883,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 809,
									"end": 811,
									"name": "tag",
									"source": 11,
									"value": "34"
								},
								{
									"begin": 809,
									"end": 811,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 911,
									"end": 917,
									"name": "SWAP7",
									"source": 11
								},
								{
									"begin": 78,
									"end": 923,
									"name": "SWAP6",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 78,
									"end": 923,
									"name": "JUMP",
									"source": 11,
									"value": "[out]"
								},
								{
									"begin": 928,
									"end": 1520,
									"name": "tag",
									"source": 11,
									"value": "3"
								},
								{
									"begin": 928,
									"end": 1520,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1027,
									"end": 1033,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1035,
									"end": 1041,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1088,
									"end": 1090,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 1076,
									"end": 1085,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 1067,
									"end": 1074,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 1063,
									"end": 1086,
									"name": "SUB",
									"source": 11
								},
								{
									"begin": 1059,
									"end": 1091,
									"name": "SLT",
									"source": 11
								},
								{
									"begin": 1056,
									"end": 1058,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 1056,
									"end": 1058,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "36"
								},
								{
									"begin": 1056,
									"end": 1058,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1109,
									"end": 1115,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1101,
									"end": 1107,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1094,
									"end": 1116,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 1056,
									"end": 1058,
									"name": "tag",
									"source": 11,
									"value": "36"
								},
								{
									"begin": 1056,
									"end": 1058,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1141,
									"end": 1157,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1141,
									"end": 1157,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1206,
									"end": 1220,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1206,
									"end": 1220,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1206,
									"end": 1220,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 1203,
									"end": 1205,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 1203,
									"end": 1205,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "37"
								},
								{
									"begin": 1203,
									"end": 1205,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1238,
									"end": 1244,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 1230,
									"end": 1236,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 1223,
									"end": 1245,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 1203,
									"end": 1205,
									"name": "tag",
									"source": 11,
									"value": "37"
								},
								{
									"begin": 1203,
									"end": 1205,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1266,
									"end": 1327,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "38"
								},
								{
									"begin": 1319,
									"end": 1326,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 1310,
									"end": 1316,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 1299,
									"end": 1308,
									"name": "DUP8",
									"source": 11
								},
								{
									"begin": 1295,
									"end": 1317,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1266,
									"end": 1327,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 1266,
									"end": 1327,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 1266,
									"end": 1327,
									"name": "tag",
									"source": 11,
									"value": "38"
								},
								{
									"begin": 1266,
									"end": 1327,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1256,
									"end": 1327,
									"name": "SWAP4",
									"source": 11
								},
								{
									"begin": 1256,
									"end": 1327,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1373,
									"end": 1375,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 1362,
									"end": 1371,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 1358,
									"end": 1376,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1352,
									"end": 1377,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 1336,
									"end": 1377,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 1336,
									"end": 1377,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1402,
									"end": 1404,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1392,
									"end": 1400,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1389,
									"end": 1405,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "39"
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1423,
									"end": 1429,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1415,
									"end": 1421,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 1408,
									"end": 1430,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "tag",
									"source": 11,
									"value": "39"
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1386,
									"end": 1388,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1451,
									"end": 1514,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 1506,
									"end": 1513,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 1495,
									"end": 1503,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1484,
									"end": 1493,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 1480,
									"end": 1504,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1451,
									"end": 1514,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 1451,
									"end": 1514,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 1451,
									"end": 1514,
									"name": "tag",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 1451,
									"end": 1514,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1441,
									"end": 1514,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 1441,
									"end": 1514,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1441,
									"end": 1514,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1046,
									"end": 1520,
									"name": "JUMP",
									"source": 11,
									"value": "[out]"
								},
								{
									"begin": 1525,
									"end": 1905,
									"name": "tag",
									"source": 11,
									"value": "11"
								},
								{
									"begin": 1525,
									"end": 1905,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1604,
									"end": 1605,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 1600,
									"end": 1612,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1600,
									"end": 1612,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1600,
									"end": 1612,
									"name": "SHR",
									"source": 11
								},
								{
									"begin": 1600,
									"end": 1612,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1647,
									"end": 1659,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1647,
									"end": 1659,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 1647,
									"end": 1659,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1668,
									"end": 1670,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "42"
								},
								{
									"begin": 1668,
									"end": 1670,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1722,
									"end": 1726,
									"name": "PUSH",
									"source": 11,
									"value": "7F"
								},
								{
									"begin": 1714,
									"end": 1720,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1710,
									"end": 1727,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 1700,
									"end": 1727,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 1700,
									"end": 1727,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1668,
									"end": 1670,
									"name": "tag",
									"source": 11,
									"value": "42"
								},
								{
									"begin": 1668,
									"end": 1670,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1775,
									"end": 1777,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 1767,
									"end": 1773,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1764,
									"end": 1778,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 1744,
									"end": 1762,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1741,
									"end": 1779,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "43"
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1821,
									"end": 1831,
									"name": "PUSH",
									"source": 11,
									"value": "4E487B71"
								},
								{
									"begin": 1816,
									"end": 1819,
									"name": "PUSH",
									"source": 11,
									"value": "E0"
								},
								{
									"begin": 1812,
									"end": 1832,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 1809,
									"end": 1810,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1802,
									"end": 1833,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1856,
									"end": 1860,
									"name": "PUSH",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 1853,
									"end": 1854,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 1846,
									"end": 1861,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1884,
									"end": 1888,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 1881,
									"end": 1882,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1874,
									"end": 1889,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "tag",
									"source": 11,
									"value": "43"
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1738,
									"end": 1740,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1580,
									"end": 1905,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 1580,
									"end": 1905,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1580,
									"end": 1905,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1580,
									"end": 1905,
									"name": "JUMP",
									"source": 11,
									"value": "[out]"
								},
								{
									"begin": 1910,
									"end": 2037,
									"name": "tag",
									"source": 11,
									"value": "27"
								},
								{
									"begin": 1910,
									"end": 2037,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1971,
									"end": 1981,
									"name": "PUSH",
									"source": 11,
									"value": "4E487B71"
								},
								{
									"begin": 1966,
									"end": 1969,
									"name": "PUSH",
									"source": 11,
									"value": "E0"
								},
								{
									"begin": 1962,
									"end": 1982,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 1959,
									"end": 1960,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1952,
									"end": 1983,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 2002,
									"end": 2006,
									"name": "PUSH",
									"source": 11,
									"value": "41"
								},
								{
									"begin": 1999,
									"end": 2000,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 1992,
									"end": 2007,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 2026,
									"end": 2030,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 2023,
									"end": 2024,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 2016,
									"end": 2031,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 1942,
									"end": 2037,
									"name": "tag",
									"source": 11,
									"value": "21"
								},
								{
									"begin": 1942,
									"end": 2037,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1403,
									"end": 12626,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205f6a94e47376f727def7609e2181b2148cfbd309ce972c6e63f14a42154e278964736f6c63430008040033",
									".code": [
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "39509351"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "39509351"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "70A08231"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "95D89B41"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "A457C2D7"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "DD62ED3E"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "6FDDE03"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "18160DDD"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "23B872DD"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "313CE567"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1403,
											"end": 12626,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1445,
											"end": 1459,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1445,
											"end": 1459,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1438,
											"end": 1460,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1420,
											"end": 1461,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1420,
											"end": 1461,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1408,
											"end": 1410,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1393,
											"end": 1411,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1375,
											"end": 1467,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3331,
											"end": 3343,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 3331,
											"end": 3343,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5003,
											"end": 5005,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3244,
											"end": 3350,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 4970,
											"end": 5046,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3175,
											"end": 3177,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 5193,
											"end": 5229,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5193,
											"end": 5229,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5181,
											"end": 5183,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 5166,
											"end": 5184,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3093,
											"end": 3184,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 5148,
											"end": 5235,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3482,
											"end": 3489,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3508,
											"end": 3526,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3408,
											"end": 3533,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "tag",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2210,
											"end": 2223,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2242,
											"end": 2247,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2235,
											"end": 2247,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2156,
											"end": 2254,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4516,
											"end": 4520,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 4570,
											"end": 4602,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4586,
											"end": 4593,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4595,
											"end": 4601,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4570,
											"end": 4578,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 4570,
											"end": 4602,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4570,
											"end": 4602,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 4570,
											"end": 4602,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4619,
											"end": 4623,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4619,
											"end": 4623,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4433,
											"end": 4630,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5319,
											"end": 5323,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 5375,
											"end": 5413,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5391,
											"end": 5395,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5406,
											"end": 5412,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5375,
											"end": 5390,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 5375,
											"end": 5413,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5375,
											"end": 5413,
											"name": "tag",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5375,
											"end": 5413,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5423,
											"end": 5450,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5433,
											"end": 5437,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5439,
											"end": 5441,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5443,
											"end": 5449,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5423,
											"end": 5432,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 5423,
											"end": 5450,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5423,
											"end": 5450,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5423,
											"end": 5450,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5467,
											"end": 5471,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5467,
											"end": 5471,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5192,
											"end": 5478,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "tag",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 6107,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5961,
											"end": 5965,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 6015,
											"end": 6079,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6031,
											"end": 6038,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6068,
											"end": 6078,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6040,
											"end": 6065,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 6031,
											"end": 6038,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6040,
											"end": 6049,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 6040,
											"end": 6065,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6040,
											"end": 6065,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 6040,
											"end": 6065,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6040,
											"end": 6078,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 6040,
											"end": 6078,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6040,
											"end": 6078,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6040,
											"end": 6078,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 6040,
											"end": 6078,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6040,
											"end": 6078,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 6040,
											"end": 6078,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6015,
											"end": 6023,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 6015,
											"end": 6079,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 2367,
											"end": 2469,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2423,
											"end": 2436,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2448,
											"end": 2462,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "tag",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 6594,
											"end": 7021,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6687,
											"end": 6691,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 6687,
											"end": 6691,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6768,
											"end": 6793,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6785,
											"end": 6792,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 6768,
											"end": 6777,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 6768,
											"end": 6793,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6768,
											"end": 6793,
											"name": "tag",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 6768,
											"end": 6793,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6741,
											"end": 6793,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6741,
											"end": 6793,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6831,
											"end": 6846,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6811,
											"end": 6827,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6811,
											"end": 6846,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 6811,
											"end": 6846,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4665,
											"end": 4667,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4647,
											"end": 4668,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4704,
											"end": 4706,
											"name": "PUSH",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 4684,
											"end": 4702,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 4684,
											"end": 4702,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4684,
											"end": 4702,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4677,
											"end": 4707,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4743,
											"end": 4777,
											"name": "PUSH",
											"source": 11,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 4723,
											"end": 4741,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 4723,
											"end": 4741,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4723,
											"end": 4741,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4716,
											"end": 4778,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4787,
											"end": 4822,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4839,
											"end": 4858,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 4839,
											"end": 4858,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 6803,
											"end": 6888,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6922,
											"end": 6982,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 6931,
											"end": 6936,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6938,
											"end": 6945,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 6966,
											"end": 6981,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 6947,
											"end": 6963,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6947,
											"end": 6981,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6922,
											"end": 6930,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 6922,
											"end": 6982,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 3729,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3808,
											"end": 3812,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3862,
											"end": 3890,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3879,
											"end": 3881,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3883,
											"end": 3889,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3862,
											"end": 3871,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 3862,
											"end": 3890,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "tag",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4065,
											"end": 4072,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4102,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4091,
											"end": 4118,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3976,
											"end": 4125,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 10119,
											"end": 10489,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 10119,
											"end": 10489,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10250,
											"end": 10269,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10250,
											"end": 10269,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10242,
											"end": 10310,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 10242,
											"end": 10310,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10242,
											"end": 10310,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10242,
											"end": 10310,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10242,
											"end": 10310,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10242,
											"end": 10310,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4260,
											"end": 4262,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 10242,
											"end": 10310,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10242,
											"end": 10310,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10242,
											"end": 10310,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4242,
											"end": 4263,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4299,
											"end": 4301,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 4279,
											"end": 4297,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4279,
											"end": 4297,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4279,
											"end": 4297,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4272,
											"end": 4302,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4338,
											"end": 4372,
											"name": "PUSH",
											"source": 11,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 4318,
											"end": 4336,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 4318,
											"end": 4336,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4318,
											"end": 4336,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4311,
											"end": 4373,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4382,
											"end": 4416,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4433,
											"end": 4452,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 4433,
											"end": 4452,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10242,
											"end": 10310,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 4232,
											"end": 4458,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10242,
											"end": 10310,
											"name": "tag",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 10242,
											"end": 10310,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10328,
											"end": 10349,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10328,
											"end": 10349,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10320,
											"end": 10388,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 10320,
											"end": 10388,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10320,
											"end": 10388,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10320,
											"end": 10388,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10320,
											"end": 10388,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10320,
											"end": 10388,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2686,
											"end": 2688,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 10320,
											"end": 10388,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10320,
											"end": 10388,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10320,
											"end": 10388,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2668,
											"end": 2689,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2725,
											"end": 2727,
											"name": "PUSH",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 2705,
											"end": 2723,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 2705,
											"end": 2723,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2705,
											"end": 2723,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2698,
											"end": 2728,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2764,
											"end": 2798,
											"name": "PUSH",
											"source": 11,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2737,
											"end": 2799,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2815,
											"end": 2833,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 2815,
											"end": 2833,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2815,
											"end": 2833,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2808,
											"end": 2840,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2857,
											"end": 2876,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 2857,
											"end": 2876,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10320,
											"end": 10388,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2658,
											"end": 2882,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10320,
											"end": 10388,
											"name": "tag",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 10320,
											"end": 10388,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10399,
											"end": 10417,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10417,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10417,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10417,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10399,
											"end": 10417,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10417,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10417,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10410,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 10399,
											"end": 10417,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10399,
											"end": 10417,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10417,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10417,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10417,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10399,
											"end": 10417,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10417,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10417,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10426,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10426,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10426,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10426,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10426,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10426,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10426,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10426,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10426,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10426,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10426,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10426,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10426,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10435,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10435,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10399,
											"end": 10435,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 10450,
											"end": 10482,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10450,
											"end": 10482,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10450,
											"end": 10482,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10450,
											"end": 10482,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10450,
											"end": 10482,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10450,
											"end": 10482,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10450,
											"end": 10482,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10450,
											"end": 10482,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10450,
											"end": 10482,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10450,
											"end": 10482,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10450,
											"end": 10482,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 10119,
											"end": 10489,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10119,
											"end": 10489,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10119,
											"end": 10489,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10119,
											"end": 10489,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10900,
											"end": 10924,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10927,
											"end": 10952,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 10937,
											"end": 10942,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10944,
											"end": 10951,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10927,
											"end": 10936,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 10927,
											"end": 10952,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10927,
											"end": 10952,
											"name": "tag",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 10927,
											"end": 10952,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10900,
											"end": 10952,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10900,
											"end": 10952,
											"name": "POP",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10966,
											"end": 10982,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10966,
											"end": 11003,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 10962,
											"end": 11205,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 10962,
											"end": 11205,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11047,
											"end": 11053,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11027,
											"end": 11043,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11027,
											"end": 11053,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 11027,
											"end": 11053,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3089,
											"end": 3091,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3071,
											"end": 3092,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3128,
											"end": 3130,
											"name": "PUSH",
											"source": 11,
											"value": "1D"
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3101,
											"end": 3131,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3167,
											"end": 3198,
											"name": "PUSH",
											"source": 11,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 3147,
											"end": 3165,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 3147,
											"end": 3165,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3147,
											"end": 3165,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3140,
											"end": 3199,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3216,
											"end": 3234,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 3216,
											"end": 3234,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3061,
											"end": 3240,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "tag",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 11019,
											"end": 11087,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11180,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 11138,
											"end": 11143,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11145,
											"end": 11152,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11173,
											"end": 11179,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11154,
											"end": 11170,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11154,
											"end": 11179,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11129,
											"end": 11137,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 11129,
											"end": 11180,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11129,
											"end": 11180,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 11129,
											"end": 11180,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10770,
											"end": 11211,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 7484,
											"end": 8135,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 7484,
											"end": 8135,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7610,
											"end": 7628,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7610,
											"end": 7628,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7602,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 7602,
											"end": 7670,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7602,
											"end": 7670,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7602,
											"end": 7670,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7602,
											"end": 7670,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7602,
											"end": 7670,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3854,
											"end": 3856,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7602,
											"end": 7670,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7602,
											"end": 7670,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7602,
											"end": 7670,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3836,
											"end": 3857,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3893,
											"end": 3895,
											"name": "PUSH",
											"source": 11,
											"value": "25"
										},
										{
											"begin": 3873,
											"end": 3891,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 3873,
											"end": 3891,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3873,
											"end": 3891,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3866,
											"end": 3896,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3932,
											"end": 3966,
											"name": "PUSH",
											"source": 11,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 3912,
											"end": 3930,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 3912,
											"end": 3930,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3912,
											"end": 3930,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3905,
											"end": 3967,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3983,
											"end": 4001,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 3983,
											"end": 4001,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3983,
											"end": 4001,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3976,
											"end": 4011,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4028,
											"end": 4047,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 4028,
											"end": 4047,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7602,
											"end": 7670,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3826,
											"end": 4053,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7602,
											"end": 7670,
											"name": "tag",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 7602,
											"end": 7670,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7688,
											"end": 7704,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7688,
											"end": 7704,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7680,
											"end": 7744,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 7680,
											"end": 7744,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7680,
											"end": 7744,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7680,
											"end": 7744,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7680,
											"end": 7744,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7680,
											"end": 7744,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2282,
											"end": 2284,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7680,
											"end": 7744,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7680,
											"end": 7744,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7680,
											"end": 7744,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2264,
											"end": 2285,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2321,
											"end": 2323,
											"name": "PUSH",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2294,
											"end": 2324,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2360,
											"end": 2394,
											"name": "PUSH",
											"source": 11,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 2340,
											"end": 2358,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 2340,
											"end": 2358,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2340,
											"end": 2358,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2333,
											"end": 2395,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2404,
											"end": 2437,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2454,
											"end": 2473,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 2454,
											"end": 2473,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7680,
											"end": 7744,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2254,
											"end": 2479,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7680,
											"end": 7744,
											"name": "tag",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 7680,
											"end": 7744,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7826,
											"end": 7841,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7826,
											"end": 7841,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7804,
											"end": 7823,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7826,
											"end": 7841,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7826,
											"end": 7841,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7826,
											"end": 7841,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7826,
											"end": 7841,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7826,
											"end": 7841,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7826,
											"end": 7841,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7826,
											"end": 7841,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7826,
											"end": 7841,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7826,
											"end": 7841,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7826,
											"end": 7841,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7826,
											"end": 7841,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7859,
											"end": 7880,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7859,
											"end": 7880,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7859,
											"end": 7880,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 7859,
											"end": 7880,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7851,
											"end": 7923,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 7851,
											"end": 7923,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7851,
											"end": 7923,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7851,
											"end": 7923,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7851,
											"end": 7923,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7851,
											"end": 7923,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3447,
											"end": 3449,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7851,
											"end": 7923,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7851,
											"end": 7923,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7851,
											"end": 7923,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3429,
											"end": 3450,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3486,
											"end": 3488,
											"name": "PUSH",
											"source": 11,
											"value": "26"
										},
										{
											"begin": 3466,
											"end": 3484,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 3466,
											"end": 3484,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3466,
											"end": 3484,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3459,
											"end": 3489,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3525,
											"end": 3559,
											"name": "PUSH",
											"source": 11,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3498,
											"end": 3560,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3576,
											"end": 3594,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 3576,
											"end": 3594,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3576,
											"end": 3594,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3569,
											"end": 3605,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3622,
											"end": 3641,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 3622,
											"end": 3641,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7851,
											"end": 7923,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3419,
											"end": 3647,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7851,
											"end": 7923,
											"name": "tag",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 7851,
											"end": 7923,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7957,
											"end": 7972,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7957,
											"end": 7972,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7957,
											"end": 7972,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7957,
											"end": 7966,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7957,
											"end": 7972,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7957,
											"end": 7972,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7957,
											"end": 7972,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7957,
											"end": 7972,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7957,
											"end": 7972,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7957,
											"end": 7972,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7957,
											"end": 7972,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7957,
											"end": 7972,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7957,
											"end": 7972,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7957,
											"end": 7972,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7957,
											"end": 7972,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7975,
											"end": 7995,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7975,
											"end": 7995,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7975,
											"end": 7995,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7957,
											"end": 7995,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7957,
											"end": 7995,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8028,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8028,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8028,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8028,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8028,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8028,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8028,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8028,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8038,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8038,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7989,
											"end": 7995,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7989,
											"end": 7995,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7957,
											"end": 7966,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8038,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 8015,
											"end": 8038,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7989,
											"end": 7995,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7989,
											"end": 7995,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8038,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 8015,
											"end": 8038,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8015,
											"end": 8038,
											"name": "tag",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 8015,
											"end": 8038,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8038,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8038,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8038,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8038,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8038,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8038,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8015,
											"end": 8038,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8069,
											"end": 8071,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8054,
											"end": 8080,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8063,
											"end": 8067,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8054,
											"end": 8080,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8054,
											"end": 8080,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8073,
											"end": 8079,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8054,
											"end": 8080,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8054,
											"end": 8080,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8054,
											"end": 8080,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 8054,
											"end": 8080,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5003,
											"end": 5005,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4970,
											"end": 5046,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8054,
											"end": 8080,
											"name": "tag",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 8054,
											"end": 8080,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8054,
											"end": 8080,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8054,
											"end": 8080,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8054,
											"end": 8080,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8054,
											"end": 8080,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8054,
											"end": 8080,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8054,
											"end": 8080,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8054,
											"end": 8080,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 8091,
											"end": 8128,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 11795,
											"end": 11916,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 14,
											"end": 187,
											"name": "tag",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 82,
											"end": 102,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 82,
											"end": 102,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 131,
											"end": 162,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 131,
											"end": 162,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 121,
											"end": 163,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 121,
											"end": 163,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 111,
											"end": 113,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "144"
										},
										{
											"begin": 111,
											"end": 113,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 177,
											"end": 178,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 175,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 167,
											"end": 179,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 111,
											"end": 113,
											"name": "tag",
											"source": 11,
											"value": "144"
										},
										{
											"begin": 111,
											"end": 113,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 63,
											"end": 187,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 63,
											"end": 187,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 63,
											"end": 187,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 63,
											"end": 187,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 192,
											"end": 388,
											"name": "tag",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 192,
											"end": 388,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 251,
											"end": 257,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 304,
											"end": 306,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 292,
											"end": 301,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 283,
											"end": 290,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 279,
											"end": 302,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 275,
											"end": 307,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 272,
											"end": 274,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 272,
											"end": 274,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 272,
											"end": 274,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 325,
											"end": 331,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 317,
											"end": 323,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 310,
											"end": 332,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 272,
											"end": 274,
											"name": "tag",
											"source": 11,
											"value": "146"
										},
										{
											"begin": 272,
											"end": 274,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 353,
											"end": 382,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "147"
										},
										{
											"begin": 372,
											"end": 381,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 353,
											"end": 382,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 353,
											"end": 382,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 353,
											"end": 382,
											"name": "tag",
											"source": 11,
											"value": "147"
										},
										{
											"begin": 353,
											"end": 382,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 343,
											"end": 382,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 262,
											"end": 388,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 262,
											"end": 388,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 393,
											"end": 663,
											"name": "tag",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 393,
											"end": 663,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 461,
											"end": 467,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 469,
											"end": 475,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 522,
											"end": 524,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 510,
											"end": 519,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 501,
											"end": 508,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 497,
											"end": 520,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 493,
											"end": 525,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 490,
											"end": 492,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 490,
											"end": 492,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "149"
										},
										{
											"begin": 490,
											"end": 492,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 543,
											"end": 549,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 535,
											"end": 541,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 528,
											"end": 550,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 490,
											"end": 492,
											"name": "tag",
											"source": 11,
											"value": "149"
										},
										{
											"begin": 490,
											"end": 492,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 571,
											"end": 600,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "150"
										},
										{
											"begin": 590,
											"end": 599,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 571,
											"end": 600,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 571,
											"end": 600,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 571,
											"end": 600,
											"name": "tag",
											"source": 11,
											"value": "150"
										},
										{
											"begin": 571,
											"end": 600,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 561,
											"end": 600,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 561,
											"end": 600,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 619,
											"end": 657,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "151"
										},
										{
											"begin": 653,
											"end": 655,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 642,
											"end": 651,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 638,
											"end": 656,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 619,
											"end": 657,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 619,
											"end": 657,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 619,
											"end": 657,
											"name": "tag",
											"source": 11,
											"value": "151"
										},
										{
											"begin": 619,
											"end": 657,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 609,
											"end": 657,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 609,
											"end": 657,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 480,
											"end": 663,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 480,
											"end": 663,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 480,
											"end": 663,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 480,
											"end": 663,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 480,
											"end": 663,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 480,
											"end": 663,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 668,
											"end": 1006,
											"name": "tag",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 668,
											"end": 1006,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 745,
											"end": 751,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 753,
											"end": 759,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 761,
											"end": 767,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 814,
											"end": 816,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 802,
											"end": 811,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 793,
											"end": 800,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 789,
											"end": 812,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 785,
											"end": 817,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 782,
											"end": 784,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 782,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "153"
										},
										{
											"begin": 782,
											"end": 784,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 835,
											"end": 841,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 827,
											"end": 833,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 820,
											"end": 842,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 782,
											"end": 784,
											"name": "tag",
											"source": 11,
											"value": "153"
										},
										{
											"begin": 782,
											"end": 784,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 863,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "154"
										},
										{
											"begin": 882,
											"end": 891,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 863,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 863,
											"end": 892,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 863,
											"end": 892,
											"name": "tag",
											"source": 11,
											"value": "154"
										},
										{
											"begin": 863,
											"end": 892,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 853,
											"end": 892,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 853,
											"end": 892,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 911,
											"end": 949,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "155"
										},
										{
											"begin": 945,
											"end": 947,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 934,
											"end": 943,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 930,
											"end": 948,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 911,
											"end": 949,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 911,
											"end": 949,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 911,
											"end": 949,
											"name": "tag",
											"source": 11,
											"value": "155"
										},
										{
											"begin": 911,
											"end": 949,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 901,
											"end": 949,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 901,
											"end": 949,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 996,
											"end": 998,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 985,
											"end": 994,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 981,
											"end": 999,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 968,
											"end": 1000,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 958,
											"end": 1000,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 958,
											"end": 1000,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1011,
											"end": 1275,
											"name": "tag",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 1011,
											"end": 1275,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1079,
											"end": 1085,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1087,
											"end": 1093,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1140,
											"end": 1142,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1128,
											"end": 1137,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1119,
											"end": 1126,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1115,
											"end": 1138,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1111,
											"end": 1143,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "157"
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1161,
											"end": 1167,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1153,
											"end": 1159,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1146,
											"end": 1168,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "tag",
											"source": 11,
											"value": "157"
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "158"
										},
										{
											"begin": 1208,
											"end": 1217,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "142"
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "tag",
											"source": 11,
											"value": "158"
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1179,
											"end": 1218,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 1265,
											"end": 1267,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1237,
											"end": 1269,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1237,
											"end": 1269,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1098,
											"end": 1275,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1472,
											"end": 2075,
											"name": "tag",
											"source": 11,
											"value": "18"
										},
										{
											"begin": 1472,
											"end": 2075,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1584,
											"end": 1588,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1613,
											"end": 1615,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1642,
											"end": 1644,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1631,
											"end": 1640,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1624,
											"end": 1645,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1674,
											"end": 1680,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1668,
											"end": 1681,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1717,
											"end": 1723,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1712,
											"end": 1714,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1701,
											"end": 1710,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1697,
											"end": 1715,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1690,
											"end": 1724,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1742,
											"end": 1746,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "tag",
											"source": 11,
											"value": "161"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1769,
											"end": 1775,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1766,
											"end": 1767,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1763,
											"end": 1776,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "163"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1860,
											"end": 1883,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1860,
											"end": 1883,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1854,
											"end": 1884,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1830,
											"end": 1847,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1830,
											"end": 1847,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1830,
											"end": 1847,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1849,
											"end": 1851,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1826,
											"end": 1852,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1819,
											"end": 1885,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1784,
											"end": 1794,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1784,
											"end": 1794,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "161"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "tag",
											"source": 11,
											"value": "163"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1913,
											"end": 1919,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1910,
											"end": 1911,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1907,
											"end": 1920,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "164"
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1983,
											"end": 1987,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1978,
											"end": 1980,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1969,
											"end": 1975,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1958,
											"end": 1967,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 1954,
											"end": 1976,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1950,
											"end": 1981,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1943,
											"end": 1988,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "tag",
											"source": 11,
											"value": "164"
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2059,
											"end": 2061,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 2038,
											"end": 2053,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2034,
											"end": 2063,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2066,
											"end": 2068,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2015,
											"end": 2069,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2015,
											"end": 2069,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 1593,
											"end": 2075,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1593,
											"end": 2075,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 5240,
											"end": 5469,
											"name": "tag",
											"source": 11,
											"value": "88"
										},
										{
											"begin": 5240,
											"end": 5469,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5280,
											"end": 5283,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5311,
											"end": 5312,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5307,
											"end": 5313,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 5304,
											"end": 5305,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5301,
											"end": 5314,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 5298,
											"end": 5300,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5298,
											"end": 5300,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "175"
										},
										{
											"begin": 5298,
											"end": 5300,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5337,
											"end": 5370,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5337,
											"end": 5370,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5393,
											"end": 5397,
											"name": "PUSH",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 5390,
											"end": 5391,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 5383,
											"end": 5398,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5423,
											"end": 5427,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 5344,
											"end": 5347,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5411,
											"end": 5428,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 5298,
											"end": 5300,
											"name": "tag",
											"source": 11,
											"value": "175"
										},
										{
											"begin": 5298,
											"end": 5300,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5454,
											"end": 5463,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5454,
											"end": 5463,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5288,
											"end": 5469,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 5474,
											"end": 5854,
											"name": "tag",
											"source": 11,
											"value": "65"
										},
										{
											"begin": 5474,
											"end": 5854,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5553,
											"end": 5554,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 5549,
											"end": 5561,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5549,
											"end": 5561,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5549,
											"end": 5561,
											"name": "SHR",
											"source": 11
										},
										{
											"begin": 5549,
											"end": 5561,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5596,
											"end": 5608,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5596,
											"end": 5608,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5596,
											"end": 5608,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5617,
											"end": 5619,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "177"
										},
										{
											"begin": 5617,
											"end": 5619,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5671,
											"end": 5675,
											"name": "PUSH",
											"source": 11,
											"value": "7F"
										},
										{
											"begin": 5663,
											"end": 5669,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5659,
											"end": 5676,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5649,
											"end": 5676,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5649,
											"end": 5676,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5617,
											"end": 5619,
											"name": "tag",
											"source": 11,
											"value": "177"
										},
										{
											"begin": 5617,
											"end": 5619,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5724,
											"end": 5726,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 5716,
											"end": 5722,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5713,
											"end": 5727,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 5693,
											"end": 5711,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5690,
											"end": 5728,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "178"
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5770,
											"end": 5780,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B71"
										},
										{
											"begin": 5765,
											"end": 5768,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 5761,
											"end": 5781,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 5758,
											"end": 5759,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5751,
											"end": 5782,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5805,
											"end": 5809,
											"name": "PUSH",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 5802,
											"end": 5803,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 5795,
											"end": 5810,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5833,
											"end": 5837,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 5830,
											"end": 5831,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 5823,
											"end": 5838,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "tag",
											"source": 11,
											"value": "178"
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5529,
											"end": 5854,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5529,
											"end": 5854,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5529,
											"end": 5854,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 5529,
											"end": 5854,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12fd1efc9ad061ef675bd50fb0c8e3c6f2952a09f8df0e3c688b8d81b8918838\",\"dweb:/ipfs/QmawN6PjTwy91pU7ANjCSgbsLc8TDA6hwu9GsFFaNSuhb5\"]},\"@openzeppelin/contracts@4.6.0/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts@4.6.0/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts@4.6.0/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 408,
								"contract": "@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 414,
								"contract": "@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 416,
								"contract": "@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 418,
								"contract": "@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 420,
								"contract": "@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@4.6.0/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.6.0/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.6.0/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@4.6.0/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.6.0/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.6.0/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts@4.6.0/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@4.6.0/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.6.0/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.6.0/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@4.6.0/utils/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":146:2031  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":146:2031  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220d76846fbfa24e88355538deb8db6e2a7acdbe778fe697d1ab7eb8c0e87e019a164736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d76846fbfa24e88355538deb8db6e2a7acdbe778fe697d1ab7eb8c0e87e019a164736f6c63430008040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 PUSH9 0x46FBFA24E88355538D 0xEB DUP14 0xB6 0xE2 0xA7 0xAC 0xDB 0xE7 PUSH25 0xFE697D1AB7EB8C0E87E019A164736F6C634300080400330000 ",
							"sourceMap": "146:1885:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;146:1885:6;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d76846fbfa24e88355538deb8db6e2a7acdbe778fe697d1ab7eb8c0e87e019a164736f6c63430008040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 PUSH9 0x46FBFA24E88355538D 0xEB DUP14 0xB6 0xE2 0xA7 0xAC 0xDB 0xE7 PUSH25 0xFE697D1AB7EB8C0E87E019A164736F6C634300080400330000 ",
							"sourceMap": "146:1885:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d76846fbfa24e88355538deb8db6e2a7acdbe778fe697d1ab7eb8c0e87e019a164736f6c63430008040033",
									".code": [
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@4.6.0/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.6.0/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.6.0/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts@4.6.0/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@4.6.0/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.6.0/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.6.0/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@4.6.0/utils/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts@4.6.0/utils/math/SafeMath.sol\":482:6782  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts@4.6.0/utils/math/SafeMath.sol\":482:6782  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220224f02d81bc188c50f92df399659b2f93a4f60dc24e324b1289a3fe54034175864736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220224f02d81bc188c50f92df399659b2f93a4f60dc24e324b1289a3fe54034175864736f6c63430008040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 0x4F MUL 0xD8 SHL 0xC1 DUP9 0xC5 0xF SWAP3 0xDF CODECOPY SWAP7 MSIZE 0xB2 0xF9 GASPRICE 0x4F PUSH1 0xDC 0x24 0xE3 0x24 0xB1 0x28 SWAP11 EXTCODEHASH 0xE5 BLOCKHASH CALLVALUE OR PC PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
							"sourceMap": "482:6300:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;482:6300:9;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220224f02d81bc188c50f92df399659b2f93a4f60dc24e324b1289a3fe54034175864736f6c63430008040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 0x4F MUL 0xD8 SHL 0xC1 DUP9 0xC5 0xF SWAP3 0xDF CODECOPY SWAP7 MSIZE 0xB2 0xF9 GASPRICE 0x4F PUSH1 0xDC 0x24 0xE3 0x24 0xB1 0x28 SWAP11 EXTCODEHASH 0xE5 BLOCKHASH CALLVALUE OR PC PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
							"sourceMap": "482:6300:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220224f02d81bc188c50f92df399659b2f93a4f60dc24e324b1289a3fe54034175864736f6c63430008040033",
									".code": [
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@4.6.0/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.6.0/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Arcade.sol": {
				"Arcade": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"name": "CloseGame",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"name": "CreateGame",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"name": "DeleteGame",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "fee",
									"type": "uint256"
								}
							],
							"name": "Fee",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"name": "OpenGame",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "payout",
									"type": "uint256"
								}
							],
							"name": "Payout",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "player",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"name": "PlacePlayer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "player",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "Refund",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_player",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"name": "Register",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "player",
									"type": "address"
								}
							],
							"name": "RemovePlayer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "previousAdminRole",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "newAdminRole",
									"type": "bytes32"
								}
							],
							"name": "RoleAdminChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleGranted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "RoleRevoked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DEFAULT_ADMIN_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "TREASURER_ROLE",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "acceptedArcadeTokens",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "native_token",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "active",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "redemption_rate",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token_address",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "redemption_rate",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "_active",
									"type": "bool"
								}
							],
							"name": "addArcadeToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "game_id",
									"type": "uint256"
								}
							],
							"name": "closeGame",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "game_id",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "registration_fee",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "arcade_token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "player_limit",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "exchange",
									"type": "bool"
								}
							],
							"name": "createGame",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "game_id",
									"type": "uint256"
								}
							],
							"name": "deleteGame",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fee_percentage",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "gameData",
							"outputs": [
								{
									"internalType": "bool",
									"name": "exchange",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "player_count",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "player_limit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "registration_fee",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "status",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "arcade_token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "total_fee",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								}
							],
							"name": "getRoleAdmin",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token_address",
									"type": "address"
								}
							],
							"name": "getStablecoin",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "grantRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasRole",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token_address",
									"type": "address"
								}
							],
							"name": "isAccepted",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "market_maker",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "game_id",
									"type": "uint256"
								}
							],
							"name": "openGame",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "game_id",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "player",
									"type": "address"
								}
							],
							"name": "placePlayer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "reconcile",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "game_id",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "player",
									"type": "address"
								}
							],
							"name": "refund",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "game_id",
									"type": "uint256"
								}
							],
							"name": "register",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token_address",
									"type": "address"
								}
							],
							"name": "removeArcadeToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "game_id",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "player",
									"type": "address"
								}
							],
							"name": "removePlayer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "renounceRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "role",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "revokeRole",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "percentage",
									"type": "uint256"
								}
							],
							"name": "setArcadeFeePercentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "incoming",
									"type": "address"
								}
							],
							"name": "setMarketMaker",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "game_id",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "winner",
									"type": "address"
								}
							],
							"name": "setWinner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "game_id",
									"type": "uint256"
								}
							],
							"name": "swap",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"addArcadeToken(address,uint256,bool)": {
								"details": "Adds token to {acceptedArcadeTokens} Require `token_address` for proxy balance exchange.   `redemption_rate` is set and determines the rate that proxy balance is exchanged.   Set `active` to reflect status of exchange."
							},
							"closeGame(uint256)": {
								"details": "Returns {active} for `token_address`."
							},
							"createGame(uint256,uint256,address,uint256,bool)": {
								"details": "Returns {active} for `token_address`."
							},
							"deleteGame(uint256)": {
								"details": "Returns {active} for `token_address`."
							},
							"getRoleAdmin(bytes32)": {
								"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
							},
							"getStablecoin(address)": {
								"details": "Returns {Stablecoin} struct for `token_address`."
							},
							"grantRole(bytes32,address)": {
								"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"hasRole(bytes32,address)": {
								"details": "Returns `true` if `account` has been granted `role`."
							},
							"isAccepted(address)": {
								"details": "Returns {active} for `token_address`."
							},
							"openGame(uint256)": {
								"details": "Returns {active} for `token_address`."
							},
							"placePlayer(uint256,address)": {
								"details": "Returns {active} for `token_address`."
							},
							"reconcile()": {
								"details": "Returns {active} for `token_address`."
							},
							"refund(uint256,address)": {
								"details": "Returns {active} for `token_address`."
							},
							"register(uint256)": {
								"details": "Returns {active} for `token_address`."
							},
							"removeArcadeToken(address)": {
								"details": "Disable token for proxy balance exchange."
							},
							"removePlayer(uint256,address)": {
								"details": "Returns {active} for `token_address`."
							},
							"renounceRole(bytes32,address)": {
								"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
							},
							"revokeRole(bytes32,address)": {
								"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
							},
							"setArcadeFeePercentage(uint256)": {
								"details": "Returns {active} for `token_address`."
							},
							"setMarketMaker(address)": {
								"details": "Returns {active} for `token_address`."
							},
							"setWinner(uint256,address)": {
								"details": "Returns {active} for `token_address`."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"swap(uint256)": {
								"details": "Returns {active} for `token_address`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Arcade.sol\":263:9872  contract Arcade is AccessControl {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Arcade.sol\":1438:1440  18 */\n  0x12\n    /* \"contracts/Arcade.sol\":1412:1440  uint256 public decimals = 18 */\n  0x03\n  dup2\n  swap1\n  sstore\n    /* \"contracts/Arcade.sol\":1506:1529  10**(uint256(decimals)) */\n  tag_1\n  swap1\n    /* \"contracts/Arcade.sol\":1506:1508  10 */\n  0x0a\n    /* \"contracts/Arcade.sol\":1506:1529  10**(uint256(decimals)) */\n  tag_2\n  jump\t// in\ntag_1:\n    /* \"contracts/Arcade.sol\":1483:1529  uint256 private base = 10**(uint256(decimals)) */\n  0x05\n  sstore\n    /* \"contracts/Arcade.sol\":1597:1716  constructor() {... */\n  callvalue\n  dup1\n  iszero\n  tag_3\n  jumpi\n  0x00\n  dup1\n  revert\ntag_3:\n  pop\n    /* \"contracts/Arcade.sol\":1621:1626  owner */\n  0x07\n    /* \"contracts/Arcade.sol\":1621:1641  owner = _msgSender() */\n  dup1\n  sload\n    /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n  caller\n  not(sub(shl(0xa0, 0x01), 0x01))\n    /* \"contracts/Arcade.sol\":1621:1641  owner = _msgSender() */\n  swap2\n  dup3\n  and\n  dup2\n  or\n  swap1\n  swap3\n  sstore\n    /* \"contracts/Arcade.sol\":1668:1672  1e17 */\n  0x016345785d8a0000\n    /* \"contracts/Arcade.sol\":1651:1665  fee_percentage */\n  0x04\n    /* \"contracts/Arcade.sol\":1651:1672  fee_percentage = 1e17 */\n  sstore\n    /* \"contracts/Arcade.sol\":1682:1694  market_maker */\n  0x06\n    /* \"contracts/Arcade.sol\":1682:1709  market_maker = _msgSender() */\n  dup1\n  sload\n  swap1\n  swap2\n  and\n  swap1\n  swap2\n  or\n  swap1\n  sstore\n    /* \"contracts/Arcade.sol\":263:9872  contract Arcade is AccessControl {... */\n  jump(tag_11)\n    /* \"#utility.yul\":14:436   */\ntag_12:\n    /* \"#utility.yul\":103:104   */\n  0x01\n    /* \"#utility.yul\":146:151   */\n  dup2\n    /* \"#utility.yul\":103:104   */\n  dup2\n    /* \"#utility.yul\":160:430   */\ntag_14:\n    /* \"#utility.yul\":181:188   */\n  dup1\n    /* \"#utility.yul\":171:179   */\n  dup6\n    /* \"#utility.yul\":168:189   */\n  gt\n    /* \"#utility.yul\":160:430   */\n  iszero\n  tag_16\n  jumpi\n    /* \"#utility.yul\":240:244   */\n  dup2\n    /* \"#utility.yul\":236:237   */\n  0x00\n    /* \"#utility.yul\":232:238   */\n  not\n    /* \"#utility.yul\":228:245   */\n  div\n    /* \"#utility.yul\":222:226   */\n  dup3\n    /* \"#utility.yul\":219:246   */\n  gt\n    /* \"#utility.yul\":216:218   */\n  iszero\n  tag_18\n  jumpi\n    /* \"#utility.yul\":249:267   */\n  tag_18\n  tag_19\n  jump\t// in\ntag_18:\n    /* \"#utility.yul\":299:306   */\n  dup1\n    /* \"#utility.yul\":289:297   */\n  dup6\n    /* \"#utility.yul\":285:307   */\n  and\n    /* \"#utility.yul\":282:284   */\n  iszero\n  tag_20\n  jumpi\n    /* \"#utility.yul\":319:335   */\n  swap2\n  dup2\n  mul\n  swap2\n    /* \"#utility.yul\":282:284   */\ntag_20:\n    /* \"#utility.yul\":398:420   */\n  swap4\n  dup5\n  shr\n  swap4\n    /* \"#utility.yul\":358:373   */\n  swap1\n  dup1\n  mul\n  swap1\n    /* \"#utility.yul\":160:430   */\n  jump(tag_14)\ntag_16:\n    /* \"#utility.yul\":164:167   */\n  pop\n    /* \"#utility.yul\":78:436   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":441:572   */\ntag_2:\n    /* \"#utility.yul\":501:506   */\n  0x00\n    /* \"#utility.yul\":530:566   */\n  tag_22\n    /* \"#utility.yul\":557:565   */\n  dup4\n    /* \"#utility.yul\":551:555   */\n  dup4\n    /* \"#utility.yul\":530:566   */\n  tag_23\n  jump\t// in\ntag_22:\n    /* \"#utility.yul\":521:566   */\n  swap4\n    /* \"#utility.yul\":511:572   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":577:1383   */\ntag_23:\n    /* \"#utility.yul\":626:631   */\n  0x00\n    /* \"#utility.yul\":656:664   */\n  dup3\n    /* \"#utility.yul\":646:648   */\n  tag_25\n  jumpi\n  pop\n    /* \"#utility.yul\":697:698   */\n  0x01\n    /* \"#utility.yul\":711:716   */\n  jump(tag_24)\n    /* \"#utility.yul\":646:648   */\ntag_25:\n    /* \"#utility.yul\":745:749   */\n  dup2\n    /* \"#utility.yul\":735:737   */\n  tag_26\n  jumpi\n  pop\n    /* \"#utility.yul\":782:783   */\n  0x00\n    /* \"#utility.yul\":796:801   */\n  jump(tag_24)\n    /* \"#utility.yul\":735:737   */\ntag_26:\n    /* \"#utility.yul\":827:831   */\n  dup2\n    /* \"#utility.yul\":845:846   */\n  0x01\n    /* \"#utility.yul\":840:899   */\n  dup2\n  eq\n  tag_28\n  jumpi\n    /* \"#utility.yul\":913:914   */\n  0x02\n    /* \"#utility.yul\":908:1038   */\n  dup2\n  eq\n  tag_29\n  jumpi\n    /* \"#utility.yul\":820:1038   */\n  jump(tag_27)\n    /* \"#utility.yul\":840:899   */\ntag_28:\n    /* \"#utility.yul\":870:871   */\n  0x01\n    /* \"#utility.yul\":861:871   */\n  swap2\n  pop\n    /* \"#utility.yul\":884:889   */\n  pop\n  jump(tag_24)\n    /* \"#utility.yul\":908:1038   */\ntag_29:\n    /* \"#utility.yul\":945:948   */\n  0xff\n    /* \"#utility.yul\":935:943   */\n  dup5\n    /* \"#utility.yul\":932:949   */\n  gt\n    /* \"#utility.yul\":929:931   */\n  iszero\n  tag_31\n  jumpi\n    /* \"#utility.yul\":952:970   */\n  tag_31\n  tag_19\n  jump\t// in\ntag_31:\n  pop\n  pop\n    /* \"#utility.yul\":1008:1009   */\n  0x01\n    /* \"#utility.yul\":994:1010   */\n  dup3\n  shl\n    /* \"#utility.yul\":1023:1028   */\n  jump(tag_24)\n    /* \"#utility.yul\":820:1038   */\ntag_27:\n  pop\n    /* \"#utility.yul\":1122:1124   */\n  0x20\n    /* \"#utility.yul\":1112:1120   */\n  dup4\n    /* \"#utility.yul\":1109:1125   */\n  lt\n    /* \"#utility.yul\":1103:1106   */\n  0x0133\n    /* \"#utility.yul\":1097:1101   */\n  dup4\n    /* \"#utility.yul\":1094:1107   */\n  lt\n    /* \"#utility.yul\":1090:1126   */\n  and\n    /* \"#utility.yul\":1084:1086   */\n  0x4e\n    /* \"#utility.yul\":1074:1082   */\n  dup5\n    /* \"#utility.yul\":1071:1087   */\n  lt\n    /* \"#utility.yul\":1066:1068   */\n  0x0b\n    /* \"#utility.yul\":1060:1064   */\n  dup5\n    /* \"#utility.yul\":1057:1069   */\n  lt\n    /* \"#utility.yul\":1053:1088   */\n  and\n    /* \"#utility.yul\":1050:1127   */\n  or\n    /* \"#utility.yul\":1047:1049   */\n  iszero\n  tag_32\n  jumpi\n  pop\n    /* \"#utility.yul\":1159:1178   */\n  dup2\n  dup2\n  exp\n    /* \"#utility.yul\":1191:1196   */\n  jump(tag_24)\n    /* \"#utility.yul\":1047:1049   */\ntag_32:\n    /* \"#utility.yul\":1238:1272   */\n  tag_33\n    /* \"#utility.yul\":1263:1271   */\n  dup4\n    /* \"#utility.yul\":1257:1261   */\n  dup4\n    /* \"#utility.yul\":1238:1272   */\n  tag_12\n  jump\t// in\ntag_33:\n    /* \"#utility.yul\":1308:1314   */\n  dup1\n    /* \"#utility.yul\":1304:1305   */\n  0x00\n    /* \"#utility.yul\":1300:1306   */\n  not\n    /* \"#utility.yul\":1296:1315   */\n  div\n    /* \"#utility.yul\":1287:1294   */\n  dup3\n    /* \"#utility.yul\":1284:1316   */\n  gt\n    /* \"#utility.yul\":1281:1283   */\n  iszero\n  tag_35\n  jumpi\n    /* \"#utility.yul\":1319:1337   */\n  tag_35\n  tag_19\n  jump\t// in\ntag_35:\n    /* \"#utility.yul\":1357:1377   */\n  mul\n  swap1\n  pop\n    /* \"#utility.yul\":636:1383   */\ntag_24:\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1388:1515   */\ntag_19:\n    /* \"#utility.yul\":1449:1459   */\n  0x4e487b71\n    /* \"#utility.yul\":1444:1447   */\n  0xe0\n    /* \"#utility.yul\":1440:1460   */\n  shl\n    /* \"#utility.yul\":1437:1438   */\n  0x00\n    /* \"#utility.yul\":1430:1461   */\n  mstore\n    /* \"#utility.yul\":1480:1484   */\n  0x11\n    /* \"#utility.yul\":1477:1478   */\n  0x04\n    /* \"#utility.yul\":1470:1485   */\n  mstore\n    /* \"#utility.yul\":1504:1508   */\n  0x24\n    /* \"#utility.yul\":1501:1502   */\n  0x00\n    /* \"#utility.yul\":1494:1509   */\n  revert\n    /* \"#utility.yul\":1420:1515   */\ntag_11:\n    /* \"contracts/Arcade.sol\":263:9872  contract Arcade is AccessControl {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Arcade.sol\":263:9872  contract Arcade is AccessControl {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8da5cb5b\n      gt\n      tag_33\n      jumpi\n      dup1\n      0xc46ed45a\n      gt\n      tag_34\n      jumpi\n      dup1\n      0xf0a3a97c\n      gt\n      tag_35\n      jumpi\n      dup1\n      0xf0a3a97c\n      eq\n      tag_29\n      jumpi\n      dup1\n      0xf207564e\n      eq\n      tag_30\n      jumpi\n      dup1\n      0xf336ee3c\n      eq\n      tag_31\n      jumpi\n      dup1\n      0xf54c42d7\n      eq\n      tag_32\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_35:\n      dup1\n      0xc46ed45a\n      eq\n      tag_25\n      jumpi\n      dup1\n      0xccaf237f\n      eq\n      tag_26\n      jumpi\n      dup1\n      0xd547741f\n      eq\n      tag_27\n      jumpi\n      dup1\n      0xe6f091f9\n      eq\n      tag_28\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_34:\n      dup1\n      0x9c623683\n      gt\n      tag_36\n      jumpi\n      dup1\n      0x9c623683\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xa217fddf\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xb22c376d\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xb9888d89\n      eq\n      tag_24\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_36:\n      dup1\n      0x8da5cb5b\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x8f0d7e35\n      eq\n      tag_18\n      jumpi\n      dup1\n      0x91d14854\n      eq\n      tag_19\n      jumpi\n      dup1\n      0x94b918de\n      eq\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n      dup1\n      0x2d6ef310\n      gt\n      tag_37\n      jumpi\n      dup1\n      0x3e16518f\n      gt\n      tag_38\n      jumpi\n      dup1\n      0x3e16518f\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x4575624b\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x75ca7603\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x7ad226dc\n      eq\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_38:\n      dup1\n      0x2d6ef310\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x2f2ff15d\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x36568abe\n      eq\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_37:\n      dup1\n      0x248a55a1\n      gt\n      tag_39\n      jumpi\n      dup1\n      0x248a55a1\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x248a9ca3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x2ac5016f\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x2ba67100\n      eq\n      tag_8\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_39:\n      dup1\n      0xf5544f\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06602a48\n      eq\n      tag_4\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Arcade.sol\":4397:4546  function openGame(uint256 game_id) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_40\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_40:\n      pop\n      tag_41\n      tag_42\n      calldatasize\n      0x04\n      tag_64\n      jump\t// in\n    tag_42:\n      tag_44\n      jump\t// in\n    tag_41:\n      stop\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2606:2808  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_45\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_45:\n      pop\n      tag_46\n      tag_47\n      calldatasize\n      0x04\n      tag_48\n      jump\t// in\n    tag_47:\n      tag_49\n      jump\t// in\n    tag_46:\n      mload(0x40)\n        /* \"#utility.yul\":5223:5237   */\n      swap1\n      iszero\n        /* \"#utility.yul\":5216:5238   */\n      iszero\n        /* \"#utility.yul\":5198:5239   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5186:5188   */\n      0x20\n        /* \"#utility.yul\":5171:5189   */\n      add\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2606:2808  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_50:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Arcade.sol\":2191:2755  function addArcadeToken(address token_address, uint256 redemption_rate, bool _active) public onlyRole(TREASURER_ROLE) {... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_52\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_52:\n      pop\n      tag_41\n      tag_54\n      calldatasize\n      0x04\n      tag_55\n      jump\t// in\n    tag_54:\n      tag_56\n      jump\t// in\n        /* \"contracts/Arcade.sol\":4176:4325  function deleteGame(uint256 game_id) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_57\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_57:\n      pop\n      tag_41\n      tag_59\n      calldatasize\n      0x04\n      tag_64\n      jump\t// in\n    tag_59:\n      tag_60\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4391:4520  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_61\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_61:\n      pop\n      tag_62\n      tag_63\n      calldatasize\n      0x04\n      tag_64\n      jump\t// in\n    tag_63:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4465:4472  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4491:4503  _roles[role] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4491:4513  _roles[role].adminRole */\n      0x01\n      add\n      sload\n      swap1\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4391:4520  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {... */\n      jump\n    tag_62:\n      mload(0x40)\n        /* \"#utility.yul\":6307:6332   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":6295:6297   */\n      0x20\n        /* \"#utility.yul\":6280:6298   */\n      add\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4391:4520  function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {... */\n      tag_50\n        /* \"#utility.yul\":6262:6338   */\n      jump\n        /* \"contracts/Arcade.sol\":8610:8742  function setArcadeFeePercentage(uint256 percentage) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_68\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_68:\n      pop\n      tag_41\n      tag_70\n      calldatasize\n      0x04\n      tag_64\n      jump\t// in\n    tag_70:\n      tag_71\n      jump\t// in\n        /* \"contracts/Arcade.sol\":8359:8538  function removePlayer(uint256 game_id, address player) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_72\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_72:\n      pop\n      tag_41\n      tag_74\n      calldatasize\n      0x04\n      tag_84\n      jump\t// in\n    tag_74:\n      tag_76\n      jump\t// in\n        /* \"contracts/Arcade.sol\":3338:3489  function closeGame(uint256 game_id) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_77\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_77:\n      pop\n      tag_41\n      tag_79\n      calldatasize\n      0x04\n      tag_64\n      jump\t// in\n    tag_79:\n      tag_80\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4770:4915  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_81\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_81:\n      pop\n      tag_41\n      tag_83\n      calldatasize\n      0x04\n      tag_84\n      jump\t// in\n    tag_83:\n      tag_85\n      jump\t// in\n        /* \"contracts/Arcade.sol\":1412:1440  uint256 public decimals = 18 */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_86\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_86:\n      pop\n      tag_62\n      sload(0x03)\n      dup2\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5787:6001  function renounceRole(bytes32 role, address account) public virtual override {... */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_91\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_91:\n      pop\n      tag_41\n      tag_93\n      calldatasize\n      0x04\n      tag_84\n      jump\t// in\n    tag_93:\n      tag_94\n      jump\t// in\n        /* \"contracts/Arcade.sol\":2831:2980  function removeArcadeToken(address token_address) public onlyRole(TREASURER_ROLE) {... */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_95\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_95:\n      pop\n      tag_41\n      tag_97\n      calldatasize\n      0x04\n      tag_98\n      jump\t// in\n    tag_97:\n      tag_99\n      jump\t// in\n        /* \"contracts/Arcade.sol\":3063:3266  function getStablecoin(address token_address) public view returns (bool, uint256) {... */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_100\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_100:\n      pop\n      tag_101\n      tag_102\n      calldatasize\n      0x04\n      tag_98\n      jump\t// in\n    tag_102:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Arcade.sol\":3163:3198  acceptedArcadeTokens[token_address] */\n      and\n        /* \"contracts/Arcade.sol\":3130:3134  bool */\n      0x00\n        /* \"contracts/Arcade.sol\":3163:3198  acceptedArcadeTokens[token_address] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":3163:3183  acceptedArcadeTokens */\n      0x01\n        /* \"contracts/Arcade.sol\":3163:3198  acceptedArcadeTokens[token_address] */\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n        /* \"contracts/Arcade.sol\":3163:3205  acceptedArcadeTokens[token_address].active */\n      dup1\n      sload\n        /* \"contracts/Arcade.sol\":3207:3258  acceptedArcadeTokens[token_address].redemption_rate */\n      swap2\n      add\n      sload\n      shl(0xa0, 0x01)\n        /* \"contracts/Arcade.sol\":3163:3205  acceptedArcadeTokens[token_address].active */\n      swap1\n      swap2\n      div\n      0xff\n      and\n      swap2\n        /* \"contracts/Arcade.sol\":3063:3266  function getStablecoin(address token_address) public view returns (bool, uint256) {... */\n      jump\n    tag_101:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":5443:5457   */\n      swap3\n      iszero\n        /* \"#utility.yul\":5436:5458   */\n      iszero\n        /* \"#utility.yul\":5418:5459   */\n      dup4\n      mstore\n        /* \"#utility.yul\":5490:5492   */\n      0x20\n        /* \"#utility.yul\":5475:5493   */\n      dup4\n      add\n        /* \"#utility.yul\":5468:5502   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":5391:5409   */\n      add\n        /* \"contracts/Arcade.sol\":3063:3266  function getStablecoin(address token_address) public view returns (bool, uint256) {... */\n      tag_50\n        /* \"#utility.yul\":5373:5508   */\n      jump\n        /* \"contracts/Arcade.sol\":1536:1563  address public market_maker */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_106\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_106:\n      pop\n      sload(0x06)\n      tag_107\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_107:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3991:4023   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":3973:4024   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3961:3963   */\n      0x20\n        /* \"#utility.yul\":3946:3964   */\n      add\n        /* \"contracts/Arcade.sol\":1536:1563  address public market_maker */\n      tag_50\n        /* \"#utility.yul\":3928:4030   */\n      jump\n        /* \"contracts/Arcade.sol\":5332:6024  function refund(uint256 game_id, address player) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_111\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_111:\n      pop\n      tag_41\n      tag_113\n      calldatasize\n      0x04\n      tag_84\n      jump\t// in\n    tag_113:\n      tag_114\n      jump\t// in\n        /* \"contracts/Arcade.sol\":1570:1590  address public owner */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_115\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_115:\n      pop\n      sload(0x07)\n      tag_107\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"contracts/Arcade.sol\":4971:5260  function reconcile() public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_18:\n      callvalue\n      dup1\n      iszero\n      tag_119\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_119:\n      pop\n      tag_41\n      tag_121\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2895:3040  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_122\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_122:\n      pop\n      tag_46\n      tag_124\n      calldatasize\n      0x04\n      tag_84\n      jump\t// in\n    tag_124:\n      tag_125\n      jump\t// in\n        /* \"contracts/Arcade.sol\":7421:8287  function swap(uint256 game_id) public payable {... */\n    tag_20:\n      tag_41\n      tag_128\n      calldatasize\n      0x04\n      tag_64\n      jump\t// in\n    tag_128:\n      tag_129\n      jump\t// in\n        /* \"contracts/Arcade.sol\":9004:9870  function setWinner(uint256 game_id, address winner) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_21:\n      callvalue\n      dup1\n      iszero\n      tag_130\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_130:\n      pop\n      tag_41\n      tag_132\n      calldatasize\n      0x04\n      tag_84\n      jump\t// in\n    tag_132:\n      tag_133\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2027:2076  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00 */\n    tag_22:\n      callvalue\n      dup1\n      iszero\n      tag_134\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_134:\n      pop\n      tag_62\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2027:2076  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00 */\n      dup2\n      jump\n        /* \"contracts/Arcade.sol\":1295:1354  mapping(address => ArcadeToken) public acceptedArcadeTokens */\n    tag_23:\n      callvalue\n      dup1\n      iszero\n      tag_138\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_138:\n      pop\n      tag_139\n      tag_140\n      calldatasize\n      0x04\n      tag_98\n      jump\t// in\n    tag_140:\n      0x01\n      0x20\n      dup2\n      swap1\n      mstore\n      0x00\n      swap2\n      dup3\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n      dup1\n      sload\n      swap2\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      swap2\n      shl(0xa0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      swap1\n      dup4\n      jump\n    tag_139:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6572:6604   */\n      swap1\n      swap5\n      and\n        /* \"#utility.yul\":6554:6605   */\n      dup5\n      mstore\n        /* \"#utility.yul\":6648:6662   */\n      swap2\n      iszero\n        /* \"#utility.yul\":6641:6663   */\n      iszero\n        /* \"#utility.yul\":6636:6638   */\n      0x20\n        /* \"#utility.yul\":6621:6639   */\n      dup5\n      add\n        /* \"#utility.yul\":6614:6664   */\n      mstore\n        /* \"#utility.yul\":6680:6698   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6673:6707   */\n      mstore\n        /* \"#utility.yul\":6542:6544   */\n      0x60\n        /* \"#utility.yul\":6527:6545   */\n      add\n        /* \"contracts/Arcade.sol\":1295:1354  mapping(address => ArcadeToken) public acceptedArcadeTokens */\n      tag_50\n        /* \"#utility.yul\":6509:6713   */\n      jump\n        /* \"contracts/Arcade.sol\":4618:4899  function placePlayer(uint256 game_id, address player) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_24:\n      callvalue\n      dup1\n      iszero\n      tag_144\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_144:\n      pop\n      tag_41\n      tag_146\n      calldatasize\n      0x04\n      tag_84\n      jump\t// in\n    tag_146:\n      tag_147\n      jump\t// in\n        /* \"contracts/Arcade.sol\":1447:1476  uint256 public fee_percentage */\n    tag_25:\n      callvalue\n      dup1\n      iszero\n      tag_148\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_148:\n      pop\n      tag_62\n      sload(0x04)\n      dup2\n      jump\n        /* \"contracts/Arcade.sol\":1361:1405  mapping(uint256 => GameInfo) public gameData */\n    tag_26:\n      callvalue\n      dup1\n      iszero\n      tag_152\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_152:\n      pop\n      tag_153\n      tag_154\n      calldatasize\n      0x04\n      tag_64\n      jump\t// in\n    tag_154:\n      0x02\n      0x20\n      dup2\n      swap1\n      mstore\n      0x00\n      swap2\n      dup3\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      swap3\n      dup3\n      add\n      sload\n      0x03\n      dup4\n      add\n      sload\n      0x04\n      dup5\n      add\n      sload\n      0x05\n      dup6\n      add\n      sload\n      0x06\n      swap1\n      swap6\n      add\n      sload\n      0xff\n      swap1\n      swap5\n      and\n      swap6\n      swap5\n      swap3\n      swap4\n      swap2\n      swap3\n      swap1\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      swap1\n      dup8\n      jump\n    tag_153:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":5847:5861   */\n      swap8\n      iszero\n        /* \"#utility.yul\":5840:5862   */\n      iszero\n        /* \"#utility.yul\":5822:5863   */\n      dup9\n      mstore\n        /* \"#utility.yul\":5894:5896   */\n      0x20\n        /* \"#utility.yul\":5879:5897   */\n      dup9\n      add\n        /* \"#utility.yul\":5872:5906   */\n      swap7\n      swap1\n      swap7\n      mstore\n        /* \"#utility.yul\":5922:5940   */\n      swap5\n      dup7\n      add\n        /* \"#utility.yul\":5915:5949   */\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"#utility.yul\":5980:5982   */\n      0x60\n        /* \"#utility.yul\":5965:5983   */\n      dup6\n      add\n        /* \"#utility.yul\":5958:5992   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":6023:6026   */\n      0x80\n        /* \"#utility.yul\":6008:6027   */\n      dup5\n      add\n        /* \"#utility.yul\":6001:6036   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6073:6105   */\n      and\n        /* \"#utility.yul\":6093:6096   */\n      0xa0\n        /* \"#utility.yul\":6052:6071   */\n      dup4\n      add\n        /* \"#utility.yul\":6045:6106   */\n      mstore\n        /* \"#utility.yul\":6137:6140   */\n      0xc0\n        /* \"#utility.yul\":6122:6141   */\n      dup3\n      add\n        /* \"#utility.yul\":6115:6150   */\n      mstore\n        /* \"#utility.yul\":5809:5812   */\n      0xe0\n        /* \"#utility.yul\":5794:5813   */\n      add\n        /* \"contracts/Arcade.sol\":1361:1405  mapping(uint256 => GameInfo) public gameData */\n      tag_50\n        /* \"#utility.yul\":5776:6156   */\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5149:5296  function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_27:\n      callvalue\n      dup1\n      iszero\n      tag_158\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_158:\n      pop\n      tag_41\n      tag_160\n      calldatasize\n      0x04\n      tag_84\n      jump\t// in\n    tag_160:\n      tag_161\n      jump\t// in\n        /* \"contracts/Arcade.sol\":1788:1924  function isAccepted(address token_address) public view returns (bool) {... */\n    tag_28:\n      callvalue\n      dup1\n      iszero\n      tag_162\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_162:\n      pop\n      tag_46\n      tag_164\n      calldatasize\n      0x04\n      tag_98\n      jump\t// in\n    tag_164:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Arcade.sol\":1875:1910  acceptedArcadeTokens[token_address] */\n      and\n        /* \"contracts/Arcade.sol\":1852:1856  bool */\n      0x00\n        /* \"contracts/Arcade.sol\":1875:1910  acceptedArcadeTokens[token_address] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":1875:1895  acceptedArcadeTokens */\n      0x01\n        /* \"contracts/Arcade.sol\":1875:1910  acceptedArcadeTokens[token_address] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Arcade.sol\":1875:1917  acceptedArcadeTokens[token_address].active */\n      sload\n      shl(0xa0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      swap1\n        /* \"contracts/Arcade.sol\":1788:1924  function isAccepted(address token_address) public view returns (bool) {... */\n      jump\n        /* \"contracts/Arcade.sol\":745:813  bytes32 public constant TREASURER_ROLE = keccak256(\"TREASURER_ROLE\") */\n    tag_29:\n      callvalue\n      dup1\n      iszero\n      tag_167\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_167:\n      pop\n      tag_62\n        /* \"contracts/Arcade.sol\":786:813  keccak256(\"TREASURER_ROLE\") */\n      0x3496e2e73c4d42b75d702e60d9e48102720b8691234415963a5a857b86425d07\n        /* \"contracts/Arcade.sol\":745:813  bytes32 public constant TREASURER_ROLE = keccak256(\"TREASURER_ROLE\") */\n      dup2\n      jump\n        /* \"contracts/Arcade.sol\":6504:7349  function register(uint256 game_id) public {... */\n    tag_30:\n      callvalue\n      dup1\n      iszero\n      tag_171\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_171:\n      pop\n      tag_41\n      tag_173\n      calldatasize\n      0x04\n      tag_64\n      jump\t// in\n    tag_173:\n      tag_174\n      jump\t// in\n        /* \"contracts/Arcade.sol\":3561:4104  function createGame(uint256 game_id, uint256 registration_fee, address arcade_token, uint256 player_limit, bool exchange) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_31:\n      callvalue\n      dup1\n      iszero\n      tag_175\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_175:\n      pop\n      tag_41\n      tag_177\n      calldatasize\n      0x04\n      tag_178\n      jump\t// in\n    tag_177:\n      tag_179\n      jump\t// in\n        /* \"contracts/Arcade.sol\":8814:8932  function setMarketMaker(address incoming) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_32:\n      callvalue\n      dup1\n      iszero\n      tag_180\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_180:\n      pop\n      tag_41\n      tag_182\n      calldatasize\n      0x04\n      tag_98\n      jump\t// in\n    tag_182:\n      tag_183\n      jump\t// in\n        /* \"contracts/Arcade.sol\":4397:4546  function openGame(uint256 game_id) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_44:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_185\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_186\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_185:\n        /* \"contracts/Arcade.sol\":4478:4495  gameData[game_id] */\n      0x00\n      dup3\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":4478:4486  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":4478:4495  gameData[game_id] */\n      0x20\n      mstore\n      0x40\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/Arcade.sol\":4505:4506  1 */\n      0x01\n        /* \"contracts/Arcade.sol\":4478:4502  gameData[game_id].status */\n      0x04\n      swap1\n      swap2\n      add\n        /* \"contracts/Arcade.sol\":4478:4506  gameData[game_id].status = 1 */\n      sstore\n        /* \"contracts/Arcade.sol\":4522:4539  OpenGame(game_id) */\n      mload\n      0x651a9760985edc53055bf2462cb4437b9be3de87aa3eecf2c05782e8b58eba19\n      swap1\n      tag_188\n      swap1\n        /* \"contracts/Arcade.sol\":4487:4494  game_id */\n      dup5\n        /* \"#utility.yul\":6307:6332   */\n      dup2\n      mstore\n        /* \"#utility.yul\":6295:6297   */\n      0x20\n        /* \"#utility.yul\":6280:6298   */\n      add\n      swap1\n        /* \"#utility.yul\":6262:6338   */\n      jump\n        /* \"contracts/Arcade.sol\":4522:4539  OpenGame(game_id) */\n    tag_188:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/Arcade.sol\":4397:4546  function openGame(uint256 game_id) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2606:2808  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n    tag_49:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2691:2695  bool */\n      0x00\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2714:2761  interfaceId == type(IAccessControl).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x7965db0b)\n      eq\n      dup1\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2714:2801  interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId) */\n      tag_191\n      jumpi\n      pop\n      shl(0xe0, 0x01ffc9a7)\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts@4.6.0/utils/introspection/ERC165.sol\":937:977  interfaceId == type(IERC165).interfaceId */\n      dup4\n      and\n      eq\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2765:2801  super.supportsInterface(interfaceId) */\n    tag_191:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2707:2801  return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId) */\n      swap3\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2606:2808  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Arcade.sol\":2191:2755  function addArcadeToken(address token_address, uint256 redemption_rate, bool _active) public onlyRole(TREASURER_ROLE) {... */\n    tag_56:\n        /* \"contracts/Arcade.sol\":786:813  keccak256(\"TREASURER_ROLE\") */\n      0x3496e2e73c4d42b75d702e60d9e48102720b8691234415963a5a857b86425d07\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_194\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2516:2520  role */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_186\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_194:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Arcade.sol\":2319:2354  acceptedArcadeTokens[token_address] */\n      dup5\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":2319:2339  acceptedArcadeTokens */\n      0x01\n        /* \"contracts/Arcade.sol\":2319:2354  acceptedArcadeTokens[token_address] */\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n        /* \"contracts/Arcade.sol\":2319:2370  acceptedArcadeTokens[token_address].redemption_rate */\n      swap1\n      dup2\n      add\n        /* \"contracts/Arcade.sol\":2319:2388  acceptedArcadeTokens[token_address].redemption_rate = redemption_rate */\n      dup6\n      swap1\n      sstore\n        /* \"contracts/Arcade.sol\":2398:2450  acceptedArcadeTokens[token_address].active = _active */\n      dup1\n      sload\n      not(sub(shl(0xa8, 0x01), 0x01))\n        /* \"contracts/Arcade.sol\":2517:2588  acceptedArcadeTokens[token_address].native_token = IERC20(tokenAddress) */\n      and\n      shl(0xa0, 0x01)\n        /* \"contracts/Arcade.sol\":2398:2450  acceptedArcadeTokens[token_address].active = _active */\n      dup6\n      iszero\n      iszero\n      mul\n      not(sub(shl(0xa0, 0x01), 0x01))\n        /* \"contracts/Arcade.sol\":2517:2588  acceptedArcadeTokens[token_address].native_token = IERC20(tokenAddress) */\n      and\n      or\n      dup3\n      or\n      swap1\n      sstore\n        /* \"contracts/Arcade.sol\":2319:2354  acceptedArcadeTokens[token_address] */\n      dup5\n      swap1\n        /* \"contracts/Arcade.sol\":2598:2654  acceptedArcadeTokens[token_address].native_token.approve */\n      0x095ea7b3\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"contracts/Arcade.sol\":2598:2748  acceptedArcadeTokens[token_address].native_token.approve(_msgSender(), 115792089237316195423570985008687907853269984665640564039457584007913129639935) */\n      mload(0x40)\n      not(sub(shl(0xe0, 0x01), 0x01))\n      0xe0\n      dup5\n      swap1\n      shl\n      and\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4692:4724   */\n      swap1\n      swap2\n      and\n        /* \"contracts/Arcade.sol\":2598:2748  acceptedArcadeTokens[token_address].native_token.approve(_msgSender(), 115792089237316195423570985008687907853269984665640564039457584007913129639935) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4674:4725   */\n      mstore\n      not(0x00)\n        /* \"#utility.yul\":4741:4759   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4734:4768   */\n      mstore\n        /* \"#utility.yul\":4647:4665   */\n      0x44\n      add\n        /* \"contracts/Arcade.sol\":2598:2748  acceptedArcadeTokens[token_address].native_token.approve(_msgSender(), 115792089237316195423570985008687907853269984665640564039457584007913129639935) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_200\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_200:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_202\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_202:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_203\n      swap2\n      swap1\n      tag_204\n      jump\t// in\n    tag_203:\n      pop\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2531:2532  _ */\n      pop\n        /* \"contracts/Arcade.sol\":2191:2755  function addArcadeToken(address token_address, uint256 redemption_rate, bool _active) public onlyRole(TREASURER_ROLE) {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Arcade.sol\":4176:4325  function deleteGame(uint256 game_id) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_60:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_206\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_186\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_206:\n        /* \"contracts/Arcade.sol\":4266:4283  gameData[game_id] */\n      0x00\n      dup3\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":4266:4274  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":4266:4283  gameData[game_id] */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n        /* \"contracts/Arcade.sol\":4259:4283  delete gameData[game_id] */\n      dup1\n      sload\n      not(0xff)\n      and\n      dup2\n      sstore\n      0x01\n      dup2\n      add\n      dup6\n      swap1\n      sstore\n      swap3\n      dup4\n      add\n      dup5\n      swap1\n      sstore\n      0x03\n      dup4\n      add\n      dup5\n      swap1\n      sstore\n      0x04\n      dup4\n      add\n      dup5\n      swap1\n      sstore\n      0x05\n      dup4\n      add\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      swap1\n      sstore\n      0x06\n      swap1\n      swap3\n      add\n      swap3\n      swap1\n      swap3\n      sstore\n        /* \"contracts/Arcade.sol\":4299:4318  DeleteGame(game_id) */\n      mload\n        /* \"#utility.yul\":6307:6332   */\n      dup4\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":4299:4318  DeleteGame(game_id) */\n      0xd0b153e02e23f4f21d020465b4dac7b1114893d05db395ed2511f879c3ac90b4\n      swap2\n        /* \"#utility.yul\":6280:6298   */\n      add\n        /* \"contracts/Arcade.sol\":4299:4318  DeleteGame(game_id) */\n      tag_188\n        /* \"#utility.yul\":6262:6338   */\n      jump\n        /* \"contracts/Arcade.sol\":8610:8742  function setArcadeFeePercentage(uint256 percentage) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_71:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_211\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_186\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_211:\n      pop\n        /* \"contracts/Arcade.sol\":8708:8722  fee_percentage */\n      0x04\n        /* \"contracts/Arcade.sol\":8708:8735  fee_percentage = percentage */\n      sstore\n        /* \"contracts/Arcade.sol\":8610:8742  function setArcadeFeePercentage(uint256 percentage) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n      jump\t// out\n        /* \"contracts/Arcade.sol\":8359:8538  function removePlayer(uint256 game_id, address player) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_76:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_214\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_186\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_214:\n        /* \"contracts/Arcade.sol\":8494:8495  0 */\n      0x00\n        /* \"contracts/Arcade.sol\":8460:8477  gameData[game_id] */\n      dup4\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":8460:8468  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":8460:8477  gameData[game_id] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Arcade.sol\":8460:8491  gameData[game_id].seats[player] */\n      dup7\n      and\n      dup1\n      dup6\n      mstore\n        /* \"contracts/Arcade.sol\":8460:8483  gameData[game_id].seats */\n      0x09\n      swap1\n      swap2\n      add\n        /* \"contracts/Arcade.sol\":8460:8491  gameData[game_id].seats[player] */\n      dup4\n      mstore\n      dup2\n      dup5\n      keccak256\n        /* \"contracts/Arcade.sol\":8460:8495  gameData[game_id].seats[player] = 0 */\n      swap4\n      swap1\n      swap4\n      sstore\n        /* \"contracts/Arcade.sol\":8511:8531  RemovePlayer(player) */\n      mload\n        /* \"#utility.yul\":3973:4024   */\n      swap2\n      dup3\n      mstore\n        /* \"contracts/Arcade.sol\":8511:8531  RemovePlayer(player) */\n      0x34aeefd5030be05fe70eebc8866d82f935a308eb9f334cba88f5e3bea1a0cae8\n      swap2\n        /* \"#utility.yul\":3946:3964   */\n      add\n        /* \"contracts/Arcade.sol\":8511:8531  RemovePlayer(player) */\n    tag_216:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/Arcade.sol\":8359:8538  function removePlayer(uint256 game_id, address player) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Arcade.sol\":3338:3489  function closeGame(uint256 game_id) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_80:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_218\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_186\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_218:\n        /* \"contracts/Arcade.sol\":3447:3448  0 */\n      0x00\n        /* \"contracts/Arcade.sol\":3420:3437  gameData[game_id] */\n      dup3\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":3420:3428  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":3420:3437  gameData[game_id] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"contracts/Arcade.sol\":3420:3444  gameData[game_id].status */\n      0x04\n      add\n        /* \"contracts/Arcade.sol\":3420:3448  gameData[game_id].status = 0 */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"contracts/Arcade.sol\":3464:3482  CloseGame(game_id) */\n      mload\n      0x827e8bff9f46048f8351964d2c871d09e4f4231513cf2fcb786649c68732e24f\n      swap1\n      tag_188\n      swap1\n        /* \"contracts/Arcade.sol\":3429:3436  game_id */\n      dup5\n        /* \"#utility.yul\":6307:6332   */\n      dup2\n      mstore\n        /* \"#utility.yul\":6295:6297   */\n      0x20\n        /* \"#utility.yul\":6280:6298   */\n      add\n      swap1\n        /* \"#utility.yul\":6262:6338   */\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4770:4915  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_85:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4465:4472  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4491:4503  _roles[role] */\n      dup3\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4491:4513  _roles[role].adminRole */\n      0x01\n      add\n      sload\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_223\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2516:2520  role */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_186\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_223:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4883:4908  _grantRole(role, account) */\n      tag_225\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4894:4898  role */\n      dup4\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4900:4907  account */\n      dup4\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4883:4893  _grantRole */\n      tag_226\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4883:4908  _grantRole(role, account) */\n      jump\t// in\n    tag_225:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4770:4915  function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5787:6001  function renounceRole(bytes32 role, address account) public virtual override {... */\n    tag_94:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5882:5905  account == _msgSender() */\n      dup2\n      and\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5882:5905  account == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5874:5957  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n      tag_229\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12541:12543   */\n      0x20\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5874:5957  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12523:12544   */\n      mstore\n        /* \"#utility.yul\":12580:12582   */\n      0x2f\n        /* \"#utility.yul\":12560:12578   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12553:12583   */\n      mstore\n        /* \"#utility.yul\":12619:12653   */\n      0x416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365\n        /* \"#utility.yul\":12599:12617   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12592:12654   */\n      mstore\n      shl(0x89, 0x103937b632b9903337b91039b2b633)\n        /* \"#utility.yul\":12670:12688   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12663:12708   */\n      mstore\n        /* \"#utility.yul\":12725:12744   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5874:5957  require(account == _msgSender(), \"AccessControl: can only renounce roles for self\") */\n    tag_230:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_229:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5968:5994  _revokeRole(role, account) */\n      tag_232\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5980:5984  role */\n      dup3\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5986:5993  account */\n      dup3\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5968:5979  _revokeRole */\n      tag_233\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5968:5994  _revokeRole(role, account) */\n      jump\t// in\n    tag_232:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5787:6001  function renounceRole(bytes32 role, address account) public virtual override {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Arcade.sol\":2831:2980  function removeArcadeToken(address token_address) public onlyRole(TREASURER_ROLE) {... */\n    tag_99:\n        /* \"contracts/Arcade.sol\":786:813  keccak256(\"TREASURER_ROLE\") */\n      0x3496e2e73c4d42b75d702e60d9e48102720b8691234415963a5a857b86425d07\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_235\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2516:2520  role */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_186\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_235:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Arcade.sol\":2923:2958  acceptedArcadeTokens[token_address] */\n      and\n        /* \"contracts/Arcade.sol\":2968:2973  false */\n      0x00\n        /* \"contracts/Arcade.sol\":2923:2958  acceptedArcadeTokens[token_address] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":2923:2943  acceptedArcadeTokens */\n      0x01\n        /* \"contracts/Arcade.sol\":2923:2958  acceptedArcadeTokens[token_address] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Arcade.sol\":2923:2973  acceptedArcadeTokens[token_address].active = false */\n      dup1\n      sload\n      not(shl(0xa0, 0xff))\n      and\n      swap1\n      sstore\n        /* \"contracts/Arcade.sol\":2831:2980  function removeArcadeToken(address token_address) public onlyRole(TREASURER_ROLE) {... */\n      jump\t// out\n        /* \"contracts/Arcade.sol\":5332:6024  function refund(uint256 game_id, address player) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_114:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_239\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_186\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_239:\n        /* \"contracts/Arcade.sol\":5431:5448  gameData[game_id] */\n      0x00\n      dup4\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":5431:5439  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":5431:5448  gameData[game_id] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Arcade.sol\":5431:5457  gameData[game_id].exchange */\n      sload\n      0xff\n      and\n        /* \"contracts/Arcade.sol\":5427:6018  if (gameData[game_id].exchange == false) {... */\n      tag_225\n      jumpi\n        /* \"contracts/Arcade.sol\":5490:5507  gameData[game_id] */\n      0x00\n      dup4\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":5490:5498  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":5490:5507  gameData[game_id] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Arcade.sol\":5490:5520  gameData[game_id].paid[player] */\n      dup7\n      and\n      dup5\n      mstore\n        /* \"contracts/Arcade.sol\":5490:5512  gameData[game_id].paid */\n      0x08\n      add\n        /* \"contracts/Arcade.sol\":5490:5520  gameData[game_id].paid[player] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Arcade.sol\":5524:5525  1 */\n      0x01\n        /* \"contracts/Arcade.sol\":5490:5525  gameData[game_id].paid[player] == 1 */\n      eq\n        /* \"contracts/Arcade.sol\":5482:5579  require(gameData[game_id].paid[player] == 1, \"Trophy King Arcade: Not registered for this game.\") */\n      tag_242\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11720:11722   */\n      0x20\n        /* \"contracts/Arcade.sol\":5482:5579  require(gameData[game_id].paid[player] == 1, \"Trophy King Arcade: Not registered for this game.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11702:11723   */\n      mstore\n        /* \"#utility.yul\":11759:11761   */\n      0x31\n        /* \"#utility.yul\":11739:11757   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11732:11762   */\n      mstore\n        /* \"#utility.yul\":11798:11832   */\n      0x54726f706879204b696e67204172636164653a204e6f74207265676973746572\n        /* \"#utility.yul\":11778:11796   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11771:11833   */\n      mstore\n      shl(0x79, 0x32b2103337b9103a3434b99033b0b6b297)\n        /* \"#utility.yul\":11849:11867   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11842:11889   */\n      mstore\n        /* \"#utility.yul\":11906:11925   */\n      0x84\n      add\n        /* \"contracts/Arcade.sol\":5482:5579  require(gameData[game_id].paid[player] == 1, \"Trophy King Arcade: Not registered for this game.\") */\n      tag_230\n        /* \"#utility.yul\":11692:11931   */\n      jump\n        /* \"contracts/Arcade.sol\":5482:5579  require(gameData[game_id].paid[player] == 1, \"Trophy King Arcade: Not registered for this game.\") */\n    tag_242:\n        /* \"contracts/Arcade.sol\":5594:5613  GameInfo storage gi */\n      0x00\n        /* \"contracts/Arcade.sol\":5616:5633  gameData[game_id] */\n      dup4\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":5616:5624  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":5616:5633  gameData[game_id] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Arcade.sol\":5678:5693  gi.arcade_token */\n      0x05\n      dup2\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n        /* \"contracts/Arcade.sol\":5656:5695  acceptedArcadeTokens[(gi.arcade_token)] */\n      dup6\n      mstore\n        /* \"contracts/Arcade.sol\":5656:5676  acceptedArcadeTokens */\n      0x01\n        /* \"contracts/Arcade.sol\":5656:5695  acceptedArcadeTokens[(gi.arcade_token)] */\n      swap1\n      swap4\n      mstore\n      swap3\n      keccak256\n        /* \"contracts/Arcade.sol\":5656:5708  acceptedArcadeTokens[(gi.arcade_token)].native_token */\n      sload\n      and\n        /* \"contracts/Arcade.sol\":5656:5717  acceptedArcadeTokens[(gi.arcade_token)].native_token.transfer */\n      0xa9059cbb\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"contracts/Arcade.sol\":5732:5751  gi.registration_fee */\n      0x03\n      dup5\n      add\n      sload\n        /* \"contracts/Arcade.sol\":5656:5752  acceptedArcadeTokens[(gi.arcade_token)].native_token.transfer(_msgSender(), gi.registration_fee) */\n      mload(0x40)\n      not(sub(shl(0xe0, 0x01), 0x01))\n      0xe0\n      dup6\n      swap1\n      shl\n      and\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4692:4724   */\n      swap1\n      swap3\n      and\n        /* \"contracts/Arcade.sol\":5656:5752  acceptedArcadeTokens[(gi.arcade_token)].native_token.transfer(_msgSender(), gi.registration_fee) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":4674:4725   */\n      mstore\n        /* \"#utility.yul\":4741:4759   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4734:4768   */\n      mstore\n        /* \"#utility.yul\":4647:4665   */\n      0x44\n      add\n        /* \"contracts/Arcade.sol\":5656:5752  acceptedArcadeTokens[(gi.arcade_token)].native_token.transfer(_msgSender(), gi.registration_fee) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_248\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_248:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_250\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_250:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_251\n      swap2\n      swap1\n      tag_204\n      jump\t// in\n    tag_251:\n        /* \"contracts/Arcade.sol\":5648:5791  require(acceptedArcadeTokens[(gi.arcade_token)].native_token.transfer(_msgSender(), gi.registration_fee), \"Trophy King Arcade: Refund failed.\") */\n      tag_252\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12138:12140   */\n      0x20\n        /* \"contracts/Arcade.sol\":5648:5791  require(acceptedArcadeTokens[(gi.arcade_token)].native_token.transfer(_msgSender(), gi.registration_fee), \"Trophy King Arcade: Refund failed.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12120:12141   */\n      mstore\n        /* \"#utility.yul\":12177:12179   */\n      0x22\n        /* \"#utility.yul\":12157:12175   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":12150:12180   */\n      mstore\n        /* \"#utility.yul\":12216:12250   */\n      0x54726f706879204b696e67204172636164653a20526566756e64206661696c65\n        /* \"#utility.yul\":12196:12214   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12189:12251   */\n      mstore\n      shl(0xf1, 0x3217)\n        /* \"#utility.yul\":12267:12285   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12260:12292   */\n      mstore\n        /* \"#utility.yul\":12309:12328   */\n      0x84\n      add\n        /* \"contracts/Arcade.sol\":5648:5791  require(acceptedArcadeTokens[(gi.arcade_token)].native_token.transfer(_msgSender(), gi.registration_fee), \"Trophy King Arcade: Refund failed.\") */\n      tag_230\n        /* \"#utility.yul\":12110:12334   */\n      jump\n        /* \"contracts/Arcade.sol\":5648:5791  require(acceptedArcadeTokens[(gi.arcade_token)].native_token.transfer(_msgSender(), gi.registration_fee), \"Trophy King Arcade: Refund failed.\") */\n    tag_252:\n        /* \"contracts/Arcade.sol\":5835:5854  gi.registration_fee */\n      0x03\n      dup2\n      add\n      sload\n        /* \"contracts/Arcade.sol\":5811:5855  Refund(game_id, player, gi.registration_fee) */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":13139:13164   */\n      dup7\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":13200:13232   */\n      dup7\n      and\n        /* \"#utility.yul\":13195:13197   */\n      0x20\n        /* \"#utility.yul\":13180:13198   */\n      dup3\n      add\n        /* \"#utility.yul\":13173:13233   */\n      mstore\n        /* \"#utility.yul\":13249:13267   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":13242:13276   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"contracts/Arcade.sol\":5811:5855  Refund(game_id, player, gi.registration_fee) */\n      mload\n      0x21e12a7cad0da5928167e1084ea4d5fdf8d9af66657a2543a9ac76a0ca081477\n      swap2\n      dup2\n      swap1\n      sub\n        /* \"#utility.yul\":13127:13129   */\n      0x60\n        /* \"contracts/Arcade.sol\":5811:5855  Refund(game_id, player, gi.registration_fee) */\n      add\n      swap1\n      log1\n        /* \"contracts/Arcade.sol\":5887:5889  gi */\n      dup1\n        /* \"contracts/Arcade.sol\":5887:5906  gi.registration_fee */\n      0x03\n      add\n      sload\n        /* \"contracts/Arcade.sol\":5870:5872  gi */\n      dup2\n        /* \"contracts/Arcade.sol\":5870:5882  gi.total_fee */\n      0x06\n      add\n      0x00\n        /* \"contracts/Arcade.sol\":5870:5907  gi.total_fee -= (gi.registration_fee) */\n      dup3\n      dup3\n      sload\n      tag_257\n      swap2\n      swap1\n      tag_258\n      jump\t// in\n    tag_257:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Arcade.sol\":5922:5936  gi.fee[player] */\n      dup4\n      and\n        /* \"contracts/Arcade.sol\":5939:5940  0 */\n      0x00\n        /* \"contracts/Arcade.sol\":5922:5936  gi.fee[player] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":5922:5928  gi.fee */\n      0x07\n      dup3\n      add\n        /* \"contracts/Arcade.sol\":5922:5936  gi.fee[player] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Arcade.sol\":5922:5940  gi.fee[player] = 0 */\n      dup4\n      swap1\n      sstore\n        /* \"contracts/Arcade.sol\":5954:5961  gi.paid */\n      0x08\n      dup5\n      add\n        /* \"contracts/Arcade.sol\":5954:5969  gi.paid[player] */\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n        /* \"contracts/Arcade.sol\":5954:5973  gi.paid[player] = 0 */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/Arcade.sol\":6006:6007  1 */\n      0x01\n        /* \"contracts/Arcade.sol\":5987:6002  gi.player_count */\n      dup1\n      dup4\n      add\n        /* \"contracts/Arcade.sol\":5987:6007  gi.player_count -= 1 */\n      dup1\n      sload\n        /* \"contracts/Arcade.sol\":6006:6007  1 */\n      swap2\n      swap3\n        /* \"contracts/Arcade.sol\":5987:6002  gi.player_count */\n      swap1\n      swap2\n        /* \"contracts/Arcade.sol\":5987:6007  gi.player_count -= 1 */\n      tag_259\n      swap1\n        /* \"contracts/Arcade.sol\":6006:6007  1 */\n      dup5\n      swap1\n        /* \"contracts/Arcade.sol\":5987:6007  gi.player_count -= 1 */\n      tag_258\n      jump\t// in\n    tag_259:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      pop\n        /* \"contracts/Arcade.sol\":5332:6024  function refund(uint256 game_id, address player) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Arcade.sol\":4971:5260  function reconcile() public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_121:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_261\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_186\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_261:\n        /* \"contracts/Arcade.sol\":5056:5077  address(this).balance */\n      selfbalance\n        /* \"contracts/Arcade.sol\":5092:5103  balance > 0 */\n      dup1\n      iszero\n        /* \"contracts/Arcade.sol\":5088:5254  if (balance > 0) {... */\n      tag_232\n      jumpi\n        /* \"contracts/Arcade.sol\":5138:5143  owner */\n      sload(0x07)\n        /* \"contracts/Arcade.sol\":5138:5170  owner.call{ value: balance }(\"\") */\n      mload(0x40)\n        /* \"contracts/Arcade.sol\":5120:5132  bool success */\n      0x00\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Arcade.sol\":5138:5143  owner */\n      and\n      swap1\n        /* \"contracts/Arcade.sol\":5157:5164  balance */\n      dup4\n      swap1\n        /* \"contracts/Arcade.sol\":5120:5132  bool success */\n      dup4\n        /* \"contracts/Arcade.sol\":5138:5170  owner.call{ value: balance }(\"\") */\n      dup2\n        /* \"contracts/Arcade.sol\":5120:5132  bool success */\n      dup2\n        /* \"contracts/Arcade.sol\":5138:5170  owner.call{ value: balance }(\"\") */\n      dup2\n        /* \"contracts/Arcade.sol\":5157:5164  balance */\n      dup6\n        /* \"contracts/Arcade.sol\":5138:5143  owner */\n      dup8\n        /* \"contracts/Arcade.sol\":5138:5170  owner.call{ value: balance }(\"\") */\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_268\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_267)\n    tag_268:\n      0x60\n      swap2\n      pop\n    tag_267:\n      pop\n        /* \"contracts/Arcade.sol\":5119:5170  (bool success, ) = owner.call{ value: balance }(\"\") */\n      pop\n      swap1\n      pop\n        /* \"contracts/Arcade.sol\":5192:5199  success */\n      dup1\n        /* \"contracts/Arcade.sol\":5184:5243  require(success, \"Trophy King Arcade: Unable to transfer.\") */\n      tag_225\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_230\n      swap1\n      tag_271\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2895:3040  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n    tag_125:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2981:2985  bool */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3004:3016  _roles[role] */\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3004:3033  _roles[role].members[account] */\n      swap4\n      swap1\n      swap4\n      and\n      dup5\n      mstore\n      swap2\n      swap1\n      mstore\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2895:3040  function hasRole(bytes32 role, address account) public view virtual override returns (bool) {... */\n      jump\t// out\n        /* \"contracts/Arcade.sol\":7421:8287  function swap(uint256 game_id) public payable {... */\n    tag_129:\n        /* \"contracts/Arcade.sol\":7485:7502  gameData[game_id] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":7485:7493  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":7485:7502  gameData[game_id] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Arcade.sol\":7509:7519  msg.sender */\n      caller\n        /* \"contracts/Arcade.sol\":7485:7520  gameData[game_id].seats[msg.sender] */\n      dup5\n      mstore\n        /* \"contracts/Arcade.sol\":7485:7508  gameData[game_id].seats */\n      0x09\n      add\n        /* \"contracts/Arcade.sol\":7485:7520  gameData[game_id].seats[msg.sender] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Arcade.sol\":7524:7525  1 */\n      0x01\n        /* \"contracts/Arcade.sol\":7485:7525  gameData[game_id].seats[msg.sender] == 1 */\n      eq\n        /* \"contracts/Arcade.sol\":7477:7563  require(gameData[game_id].seats[msg.sender] == 1, \"Trophy King Arcade: Unauthorized.\") */\n      tag_274\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_230\n      swap1\n      tag_276\n      jump\t// in\n    tag_274:\n        /* \"contracts/Arcade.sol\":7581:7598  gameData[game_id] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":7581:7589  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":7581:7598  gameData[game_id] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Arcade.sol\":7581:7605  gameData[game_id].status */\n      0x04\n      add\n      sload\n        /* \"contracts/Arcade.sol\":7609:7610  1 */\n      0x01\n        /* \"contracts/Arcade.sol\":7581:7610  gameData[game_id].status == 1 */\n      eq\n        /* \"contracts/Arcade.sol\":7573:7647  require(gameData[game_id].status == 1, \"Trophy King Arcade: Game closed.\") */\n      tag_277\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7669:7671   */\n      0x20\n        /* \"contracts/Arcade.sol\":7573:7647  require(gameData[game_id].status == 1, \"Trophy King Arcade: Game closed.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7651:7672   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":7688:7706   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7681:7711   */\n      mstore\n        /* \"#utility.yul\":7747:7781   */\n      0x54726f706879204b696e67204172636164653a2047616d6520636c6f7365642e\n        /* \"#utility.yul\":7727:7745   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7720:7782   */\n      mstore\n        /* \"#utility.yul\":7799:7817   */\n      0x64\n      add\n        /* \"contracts/Arcade.sol\":7573:7647  require(gameData[game_id].status == 1, \"Trophy King Arcade: Game closed.\") */\n      tag_230\n        /* \"#utility.yul\":7641:7823   */\n      jump\n        /* \"contracts/Arcade.sol\":7573:7647  require(gameData[game_id].status == 1, \"Trophy King Arcade: Game closed.\") */\n    tag_277:\n        /* \"contracts/Arcade.sol\":7698:7715  gameData[game_id] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":7698:7706  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":7698:7715  gameData[game_id] */\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n        /* \"contracts/Arcade.sol\":7698:7728  gameData[game_id].player_count */\n      0x01\n      dup2\n      add\n      sload\n        /* \"contracts/Arcade.sol\":7665:7695  gameData[game_id].player_limit */\n      swap2\n      add\n      sload\n        /* \"contracts/Arcade.sol\":7665:7728  gameData[game_id].player_limit > gameData[game_id].player_count */\n      gt\n        /* \"contracts/Arcade.sol\":7657:7775  require(gameData[game_id].player_limit > gameData[game_id].player_count, \"Trophy King Arcade: Game full.  Try again.\") */\n      tag_280\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_230\n      swap1\n      tag_282\n      jump\t// in\n    tag_280:\n        /* \"contracts/Arcade.sol\":7793:7810  gameData[game_id] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":7793:7801  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":7793:7810  gameData[game_id] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Arcade.sol\":7816:7826  msg.sender */\n      caller\n        /* \"contracts/Arcade.sol\":7793:7827  gameData[game_id].paid[msg.sender] */\n      dup5\n      mstore\n        /* \"contracts/Arcade.sol\":7793:7815  gameData[game_id].paid */\n      0x08\n      add\n        /* \"contracts/Arcade.sol\":7793:7827  gameData[game_id].paid[msg.sender] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Arcade.sol\":7793:7832  gameData[game_id].paid[msg.sender] == 0 */\n      iszero\n        /* \"contracts/Arcade.sol\":7785:7876  require(gameData[game_id].paid[msg.sender] == 0, \"Trophy King Arcade: Already registered.\") */\n      tag_283\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_230\n      swap1\n      tag_285\n      jump\t// in\n    tag_283:\n        /* \"contracts/Arcade.sol\":7927:7928  0 */\n      0x00\n        /* \"contracts/Arcade.sol\":7894:7911  gameData[game_id] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":7894:7902  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":7894:7911  gameData[game_id] */\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n        /* \"contracts/Arcade.sol\":7894:7924  gameData[game_id].player_limit */\n      add\n      sload\n        /* \"contracts/Arcade.sol\":7886:7968  require(gameData[game_id].player_limit > 0, \"Trophy King Arcade: Game not found.\") */\n      tag_286\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_230\n      swap1\n      tag_288\n      jump\t// in\n    tag_286:\n        /* \"contracts/Arcade.sol\":8000:8017  gameData[game_id] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":8000:8008  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":8000:8017  gameData[game_id] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Arcade.sol\":8000:8034  gameData[game_id].registration_fee */\n      0x03\n      add\n      sload\n        /* \"contracts/Arcade.sol\":7986:7995  msg.value */\n      callvalue\n        /* \"contracts/Arcade.sol\":7986:8035  msg.value == (gameData[game_id].registration_fee) */\n      eq\n        /* \"contracts/Arcade.sol\":7978:8088  require(msg.value == (gameData[game_id].registration_fee), \"Trophy King Arcade: Must match registration fee.\") */\n      tag_289\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10086:10088   */\n      0x20\n        /* \"contracts/Arcade.sol\":7978:8088  require(msg.value == (gameData[game_id].registration_fee), \"Trophy King Arcade: Must match registration fee.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10068:10089   */\n      mstore\n        /* \"#utility.yul\":10125:10127   */\n      0x30\n        /* \"#utility.yul\":10105:10123   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10098:10128   */\n      mstore\n        /* \"#utility.yul\":10164:10198   */\n      0x54726f706879204b696e67204172636164653a204d757374206d617463682072\n        /* \"#utility.yul\":10144:10162   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10137:10199   */\n      mstore\n      shl(0x81, 0x32b3b4b9ba3930ba34b7b7103332b297)\n        /* \"#utility.yul\":10215:10233   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10208:10254   */\n      mstore\n        /* \"#utility.yul\":10271:10290   */\n      0x84\n      add\n        /* \"contracts/Arcade.sol\":7978:8088  require(msg.value == (gameData[game_id].registration_fee), \"Trophy King Arcade: Must match registration fee.\") */\n      tag_230\n        /* \"#utility.yul\":10058:10296   */\n      jump\n        /* \"contracts/Arcade.sol\":7978:8088  require(msg.value == (gameData[game_id].registration_fee), \"Trophy King Arcade: Must match registration fee.\") */\n    tag_289:\n        /* \"contracts/Arcade.sol\":8118:8130  market_maker */\n      sload(0x06)\n        /* \"contracts/Arcade.sol\":8118:8159  market_maker.call{ value: msg.value }(\"\") */\n      mload(0x40)\n        /* \"contracts/Arcade.sol\":8100:8112  bool success */\n      0x00\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Arcade.sol\":8118:8130  market_maker */\n      and\n      swap1\n        /* \"contracts/Arcade.sol\":8144:8153  msg.value */\n      callvalue\n      swap1\n        /* \"contracts/Arcade.sol\":8100:8112  bool success */\n      dup4\n        /* \"contracts/Arcade.sol\":8118:8159  market_maker.call{ value: msg.value }(\"\") */\n      dup2\n        /* \"contracts/Arcade.sol\":8100:8112  bool success */\n      dup2\n        /* \"contracts/Arcade.sol\":8118:8159  market_maker.call{ value: msg.value }(\"\") */\n      dup2\n        /* \"contracts/Arcade.sol\":8144:8153  msg.value */\n      dup6\n        /* \"contracts/Arcade.sol\":8118:8130  market_maker */\n      dup8\n        /* \"contracts/Arcade.sol\":8118:8159  market_maker.call{ value: msg.value }(\"\") */\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_295\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_294)\n    tag_295:\n      0x60\n      swap2\n      pop\n    tag_294:\n      pop\n        /* \"contracts/Arcade.sol\":8099:8159  (bool success, ) = market_maker.call{ value: msg.value }(\"\") */\n      pop\n      swap1\n      pop\n        /* \"contracts/Arcade.sol\":8177:8184  success */\n      dup1\n        /* \"contracts/Arcade.sol\":8169:8228  require(success, \"Trophy King Arcade: Unable to transfer.\") */\n      tag_296\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_230\n      swap1\n      tag_271\n      jump\t// in\n    tag_296:\n        /* \"contracts/Arcade.sol\":8239:8280  _register(game_id, msg.sender, msg.value) */\n      tag_232\n        /* \"contracts/Arcade.sol\":8249:8256  game_id */\n      dup3\n        /* \"contracts/Arcade.sol\":8258:8268  msg.sender */\n      caller\n        /* \"contracts/Arcade.sol\":8270:8279  msg.value */\n      callvalue\n        /* \"contracts/Arcade.sol\":8239:8248  _register */\n      tag_299\n        /* \"contracts/Arcade.sol\":8239:8280  _register(game_id, msg.sender, msg.value) */\n      jump\t// in\n        /* \"contracts/Arcade.sol\":9004:9870  function setWinner(uint256 game_id, address winner) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_133:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_301\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_186\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_301:\n        /* \"contracts/Arcade.sol\":9106:9123  gameData[game_id] */\n      0x00\n      dup4\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":9106:9114  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":9106:9123  gameData[game_id] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Arcade.sol\":9106:9132  gameData[game_id].exchange */\n      sload\n      0xff\n      and\n        /* \"contracts/Arcade.sol\":9102:9835  if (gameData[game_id].exchange == false) {... */\n      tag_303\n      jumpi\n        /* \"contracts/Arcade.sol\":9166:9183  gameData[game_id] */\n      0x00\n      dup4\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":9166:9174  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":9166:9183  gameData[game_id] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Arcade.sol\":9166:9195  gameData[game_id].fee[winner] */\n      dup7\n      and\n      dup5\n      mstore\n        /* \"contracts/Arcade.sol\":9166:9187  gameData[game_id].fee */\n      0x07\n      add\n        /* \"contracts/Arcade.sol\":9166:9195  gameData[game_id].fee[winner] */\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Arcade.sol\":9162:9196  Fee(gameData[game_id].fee[winner]) */\n      swap2\n      mload\n        /* \"#utility.yul\":6307:6332   */\n      swap2\n      dup3\n      mstore\n        /* \"contracts/Arcade.sol\":9162:9196  Fee(gameData[game_id].fee[winner]) */\n      0x557809284da7314475b1582804ae28e5f1349efc1fe970ea25d50fce75eb4f43\n      swap2\n        /* \"#utility.yul\":6280:6298   */\n      add\n        /* \"contracts/Arcade.sol\":9162:9196  Fee(gameData[game_id].fee[winner]) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/Arcade.sol\":9219:9236  gameData[game_id] */\n      0x00\n      dup4\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":9219:9227  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":9219:9236  gameData[game_id] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Arcade.sol\":9219:9249  gameData[game_id].paid[winner] */\n      dup7\n      and\n      dup5\n      mstore\n        /* \"contracts/Arcade.sol\":9219:9241  gameData[game_id].paid */\n      0x08\n      add\n        /* \"contracts/Arcade.sol\":9219:9249  gameData[game_id].paid[winner] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Arcade.sol\":9253:9254  1 */\n      0x01\n        /* \"contracts/Arcade.sol\":9219:9254  gameData[game_id].paid[winner] == 1 */\n      eq\n        /* \"contracts/Arcade.sol\":9211:9307  require(gameData[game_id].paid[winner] == 1, \"Trophy King Arcade: Not registered for this game\") */\n      tag_305\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9261:9263   */\n      0x20\n        /* \"contracts/Arcade.sol\":9211:9307  require(gameData[game_id].paid[winner] == 1, \"Trophy King Arcade: Not registered for this game\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9243:9264   */\n      mstore\n        /* \"#utility.yul\":9300:9302   */\n      0x30\n        /* \"#utility.yul\":9280:9298   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9273:9303   */\n      mstore\n        /* \"#utility.yul\":9339:9373   */\n      0x54726f706879204b696e67204172636164653a204e6f74207265676973746572\n        /* \"#utility.yul\":9319:9337   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9312:9374   */\n      mstore\n      shl(0x80, 0x656420666f7220746869732067616d65)\n        /* \"#utility.yul\":9390:9408   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9383:9429   */\n      mstore\n        /* \"#utility.yul\":9446:9465   */\n      0x84\n      add\n        /* \"contracts/Arcade.sol\":9211:9307  require(gameData[game_id].paid[winner] == 1, \"Trophy King Arcade: Not registered for this game\") */\n      tag_230\n        /* \"#utility.yul\":9233:9471   */\n      jump\n        /* \"contracts/Arcade.sol\":9211:9307  require(gameData[game_id].paid[winner] == 1, \"Trophy King Arcade: Not registered for this game\") */\n    tag_305:\n        /* \"contracts/Arcade.sol\":9399:9403  base */\n      sload(0x05)\n        /* \"contracts/Arcade.sol\":9374:9388  fee_percentage */\n      sload(0x04)\n        /* \"contracts/Arcade.sol\":9322:9340  uint256 arcade_fee */\n      0x00\n        /* \"contracts/Arcade.sol\":9344:9361  gameData[game_id] */\n      dup6\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":9344:9352  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":9344:9361  gameData[game_id] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Arcade.sol\":9344:9371  gameData[game_id].total_fee */\n      0x06\n      add\n      sload\n        /* \"contracts/Arcade.sol\":9322:9340  uint256 arcade_fee */\n      swap1\n      swap3\n        /* \"contracts/Arcade.sol\":9399:9403  base */\n      swap2\n      dup3\n      swap2\n        /* \"contracts/Arcade.sol\":9344:9388  gameData[game_id].total_fee * fee_percentage */\n      tag_308\n      swap2\n        /* \"contracts/Arcade.sol\":9374:9388  fee_percentage */\n      swap1\n        /* \"contracts/Arcade.sol\":9344:9388  gameData[game_id].total_fee * fee_percentage */\n      tag_309\n      jump\t// in\n    tag_308:\n        /* \"contracts/Arcade.sol\":9343:9396  (gameData[game_id].total_fee * fee_percentage) / base */\n      tag_310\n      swap2\n      swap1\n      tag_311\n      jump\t// in\n    tag_310:\n        /* \"contracts/Arcade.sol\":9343:9403  (gameData[game_id].total_fee * fee_percentage) / base / base */\n      tag_312\n      swap2\n      swap1\n      tag_311\n      jump\t// in\n    tag_312:\n        /* \"contracts/Arcade.sol\":9417:9431  uint256 payout */\n      0x00\n        /* \"contracts/Arcade.sol\":9434:9451  gameData[game_id] */\n      dup6\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":9434:9442  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":9434:9451  gameData[game_id] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Arcade.sol\":9434:9461  gameData[game_id].total_fee */\n      0x06\n      add\n      sload\n        /* \"contracts/Arcade.sol\":9322:9403  uint256 arcade_fee = (gameData[game_id].total_fee * fee_percentage) / base / base */\n      swap2\n      swap3\n      pop\n        /* \"contracts/Arcade.sol\":9417:9431  uint256 payout */\n      swap1\n        /* \"contracts/Arcade.sol\":9434:9474  gameData[game_id].total_fee - arcade_fee */\n      tag_313\n      swap1\n        /* \"contracts/Arcade.sol\":9322:9403  uint256 arcade_fee = (gameData[game_id].total_fee * fee_percentage) / base / base */\n      dup4\n      swap1\n        /* \"contracts/Arcade.sol\":9434:9474  gameData[game_id].total_fee - arcade_fee */\n      tag_258\n      jump\t// in\n    tag_313:\n        /* \"contracts/Arcade.sol\":9417:9474  uint256 payout = gameData[game_id].total_fee - arcade_fee */\n      swap1\n      pop\n        /* \"contracts/Arcade.sol\":9515:9536  address(this).balance */\n      selfbalance\n        /* \"contracts/Arcade.sol\":9555:9580  contract_balance < payout */\n      dup2\n      dup2\n      lt\n        /* \"contracts/Arcade.sol\":9551:9640  if (contract_balance < payout) {... */\n      iszero\n      tag_314\n      jumpi\n        /* \"contracts/Arcade.sol\":9609:9625  contract_balance */\n      dup1\n        /* \"contracts/Arcade.sol\":9600:9625  payout = contract_balance */\n      swap2\n      pop\n        /* \"contracts/Arcade.sol\":9551:9640  if (contract_balance < payout) {... */\n    tag_314:\n        /* \"contracts/Arcade.sol\":9655:9667  bool success */\n      0x00\n        /* \"contracts/Arcade.sol\":9673:9679  winner */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Arcade.sol\":9673:9684  winner.call */\n      and\n        /* \"contracts/Arcade.sol\":9693:9699  payout */\n      dup4\n        /* \"contracts/Arcade.sol\":9673:9705  winner.call{ value: payout }(\"\") */\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_318\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_317)\n    tag_318:\n      0x60\n      swap2\n      pop\n    tag_317:\n      pop\n        /* \"contracts/Arcade.sol\":9654:9705  (bool success, ) = winner.call{ value: payout }(\"\") */\n      pop\n      swap1\n      pop\n        /* \"contracts/Arcade.sol\":9727:9734  success */\n      dup1\n        /* \"contracts/Arcade.sol\":9719:9778  require(success, \"Trophy King Arcade: Unable to transfer.\") */\n      tag_319\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_230\n      swap1\n      tag_271\n      jump\t// in\n    tag_319:\n        /* \"contracts/Arcade.sol\":9810:9824  Payout(payout) */\n      mload(0x40)\n        /* \"#utility.yul\":6307:6332   */\n      dup4\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":9810:9824  Payout(payout) */\n      0x22427047e1a674a9aff59700a2c8d00ea96e017ddf9236690bdedf1f21f28d9d\n      swap1\n        /* \"#utility.yul\":6295:6297   */\n      0x20\n        /* \"#utility.yul\":6280:6298   */\n      add\n        /* \"contracts/Arcade.sol\":9810:9824  Payout(payout) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/Arcade.sol\":9102:9835  if (gameData[game_id].exchange == false) {... */\n      pop\n      pop\n      pop\n      pop\n    tag_303:\n        /* \"contracts/Arcade.sol\":9845:9863  closeGame(game_id) */\n      tag_225\n        /* \"contracts/Arcade.sol\":9855:9862  game_id */\n      dup4\n        /* \"contracts/Arcade.sol\":9845:9854  closeGame */\n      tag_80\n        /* \"contracts/Arcade.sol\":9845:9863  closeGame(game_id) */\n      jump\t// in\n        /* \"contracts/Arcade.sol\":4618:4899  function placePlayer(uint256 game_id, address player) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_147:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_324\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_186\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_324:\n        /* \"contracts/Arcade.sol\":4726:4743  gameData[game_id] */\n      0x00\n      dup4\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":4726:4734  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":4726:4743  gameData[game_id] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Arcade.sol\":4726:4757  gameData[game_id].seats[player] */\n      dup7\n      and\n      dup5\n      mstore\n        /* \"contracts/Arcade.sol\":4726:4749  gameData[game_id].seats */\n      0x09\n      add\n        /* \"contracts/Arcade.sol\":4726:4757  gameData[game_id].seats[player] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Arcade.sol\":4761:4762  1 */\n      0x01\n        /* \"contracts/Arcade.sol\":4726:4762  gameData[game_id].seats[player] != 1 */\n      eq\n      iszero\n        /* \"contracts/Arcade.sol\":4718:4802  require(gameData[game_id].seats[player] != 1, \"Trophy King Arcade: Already seated.\") */\n      tag_326\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8857:8859   */\n      0x20\n        /* \"contracts/Arcade.sol\":4718:4802  require(gameData[game_id].seats[player] != 1, \"Trophy King Arcade: Already seated.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8839:8860   */\n      mstore\n        /* \"#utility.yul\":8896:8898   */\n      0x23\n        /* \"#utility.yul\":8876:8894   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8869:8899   */\n      mstore\n        /* \"#utility.yul\":8935:8969   */\n      0x54726f706879204b696e67204172636164653a20416c72656164792073656174\n        /* \"#utility.yul\":8915:8933   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8908:8970   */\n      mstore\n      shl(0xe9, 0x32b217)\n        /* \"#utility.yul\":8986:9004   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8979:9012   */\n      mstore\n        /* \"#utility.yul\":9029:9048   */\n      0x84\n      add\n        /* \"contracts/Arcade.sol\":4718:4802  require(gameData[game_id].seats[player] != 1, \"Trophy King Arcade: Already seated.\") */\n      tag_230\n        /* \"#utility.yul\":8829:9054   */\n      jump\n        /* \"contracts/Arcade.sol\":4718:4802  require(gameData[game_id].seats[player] != 1, \"Trophy King Arcade: Already seated.\") */\n    tag_326:\n        /* \"contracts/Arcade.sol\":4813:4830  gameData[game_id] */\n      0x00\n      dup4\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":4813:4821  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":4813:4830  gameData[game_id] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Arcade.sol\":4813:4844  gameData[game_id].seats[player] */\n      dup7\n      and\n      dup1\n      dup6\n      mstore\n        /* \"contracts/Arcade.sol\":4813:4836  gameData[game_id].seats */\n      0x09\n      swap1\n      swap2\n      add\n        /* \"contracts/Arcade.sol\":4813:4844  gameData[game_id].seats[player] */\n      dup4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/Arcade.sol\":4847:4848  1 */\n      0x01\n        /* \"contracts/Arcade.sol\":4813:4848  gameData[game_id].seats[player] = 1 */\n      swap1\n      sstore\n        /* \"contracts/Arcade.sol\":4864:4892  PlacePlayer(player, game_id) */\n      dup1\n      mload\n        /* \"#utility.yul\":4674:4725   */\n      swap3\n      dup4\n      mstore\n        /* \"#utility.yul\":4741:4759   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4734:4768   */\n      dup6\n      swap1\n      mstore\n        /* \"contracts/Arcade.sol\":4864:4892  PlacePlayer(player, game_id) */\n      0x9f2deefff0a36949d580cdd4ba9959b4a94786e786bad5650001b58b625fbbb1\n      swap2\n        /* \"#utility.yul\":4647:4665   */\n      add\n        /* \"contracts/Arcade.sol\":4864:4892  PlacePlayer(player, game_id) */\n      tag_216\n        /* \"#utility.yul\":4629:4774   */\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5149:5296  function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {... */\n    tag_161:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4465:4472  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4491:4503  _roles[role] */\n      dup3\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4491:4513  _roles[role].adminRole */\n      0x01\n      add\n      sload\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_332\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2516:2520  role */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_186\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_332:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5263:5289  _revokeRole(role, account) */\n      tag_225\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5275:5279  role */\n      dup4\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5281:5288  account */\n      dup4\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5263:5274  _revokeRole */\n      tag_233\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":5263:5289  _revokeRole(role, account) */\n      jump\t// in\n        /* \"contracts/Arcade.sol\":6504:7349  function register(uint256 game_id) public {... */\n    tag_174:\n        /* \"contracts/Arcade.sol\":6564:6581  gameData[game_id] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":6564:6572  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":6564:6581  gameData[game_id] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Arcade.sol\":6588:6598  msg.sender */\n      caller\n        /* \"contracts/Arcade.sol\":6564:6599  gameData[game_id].seats[msg.sender] */\n      dup5\n      mstore\n        /* \"contracts/Arcade.sol\":6564:6587  gameData[game_id].seats */\n      0x09\n      add\n        /* \"contracts/Arcade.sol\":6564:6599  gameData[game_id].seats[msg.sender] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Arcade.sol\":6603:6604  1 */\n      0x01\n        /* \"contracts/Arcade.sol\":6564:6604  gameData[game_id].seats[msg.sender] == 1 */\n      eq\n        /* \"contracts/Arcade.sol\":6556:6642  require(gameData[game_id].seats[msg.sender] == 1, \"Trophy King Arcade: Unauthorized.\") */\n      tag_337\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_230\n      swap1\n      tag_276\n      jump\t// in\n    tag_337:\n        /* \"contracts/Arcade.sol\":6660:6677  gameData[game_id] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":6660:6668  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":6660:6677  gameData[game_id] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Arcade.sol\":6660:6684  gameData[game_id].status */\n      0x04\n      add\n      sload\n        /* \"contracts/Arcade.sol\":6688:6689  1 */\n      0x01\n        /* \"contracts/Arcade.sol\":6660:6689  gameData[game_id].status == 1 */\n      eq\n        /* \"contracts/Arcade.sol\":6652:6726  require(gameData[game_id].status == 1, \"Trophy King Arcade: Game closed.\") */\n      tag_339\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7669:7671   */\n      0x20\n        /* \"contracts/Arcade.sol\":6652:6726  require(gameData[game_id].status == 1, \"Trophy King Arcade: Game closed.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7651:7672   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":7688:7706   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7681:7711   */\n      mstore\n        /* \"#utility.yul\":7747:7781   */\n      0x54726f706879204b696e67204172636164653a2047616d6520636c6f7365642e\n        /* \"#utility.yul\":7727:7745   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7720:7782   */\n      mstore\n        /* \"#utility.yul\":7799:7817   */\n      0x64\n      add\n        /* \"contracts/Arcade.sol\":6652:6726  require(gameData[game_id].status == 1, \"Trophy King Arcade: Game closed.\") */\n      tag_230\n        /* \"#utility.yul\":7641:7823   */\n      jump\n        /* \"contracts/Arcade.sol\":6652:6726  require(gameData[game_id].status == 1, \"Trophy King Arcade: Game closed.\") */\n    tag_339:\n        /* \"contracts/Arcade.sol\":6777:6794  gameData[game_id] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":6777:6785  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":6777:6794  gameData[game_id] */\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n        /* \"contracts/Arcade.sol\":6777:6807  gameData[game_id].player_count */\n      0x01\n      dup2\n      add\n      sload\n        /* \"contracts/Arcade.sol\":6744:6774  gameData[game_id].player_limit */\n      swap2\n      add\n      sload\n        /* \"contracts/Arcade.sol\":6744:6807  gameData[game_id].player_limit > gameData[game_id].player_count */\n      gt\n        /* \"contracts/Arcade.sol\":6736:6854  require(gameData[game_id].player_limit > gameData[game_id].player_count, \"Trophy King Arcade: Game full.  Try again.\") */\n      tag_341\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_230\n      swap1\n      tag_282\n      jump\t// in\n    tag_341:\n        /* \"contracts/Arcade.sol\":6872:6889  gameData[game_id] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":6872:6880  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":6872:6889  gameData[game_id] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Arcade.sol\":6895:6905  msg.sender */\n      caller\n        /* \"contracts/Arcade.sol\":6872:6906  gameData[game_id].paid[msg.sender] */\n      dup5\n      mstore\n        /* \"contracts/Arcade.sol\":6872:6894  gameData[game_id].paid */\n      0x08\n      add\n        /* \"contracts/Arcade.sol\":6872:6906  gameData[game_id].paid[msg.sender] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Arcade.sol\":6872:6911  gameData[game_id].paid[msg.sender] == 0 */\n      iszero\n        /* \"contracts/Arcade.sol\":6864:6955  require(gameData[game_id].paid[msg.sender] == 0, \"Trophy King Arcade: Already registered.\") */\n      tag_343\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_230\n      swap1\n      tag_285\n      jump\t// in\n    tag_343:\n        /* \"contracts/Arcade.sol\":7006:7007  0 */\n      0x00\n        /* \"contracts/Arcade.sol\":6973:6990  gameData[game_id] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":6973:6981  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":6973:6990  gameData[game_id] */\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      swap2\n      keccak256\n        /* \"contracts/Arcade.sol\":6973:7003  gameData[game_id].player_limit */\n      add\n      sload\n        /* \"contracts/Arcade.sol\":6965:7047  require(gameData[game_id].player_limit > 0, \"Trophy King Arcade: Game not found.\") */\n      tag_345\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_230\n      swap1\n      tag_288\n      jump\t// in\n    tag_345:\n        /* \"contracts/Arcade.sol\":7065:7119  acceptedArcadeTokens[(gameData[game_id].arcade_token)] */\n      0x00\n        /* \"contracts/Arcade.sol\":7087:7104  gameData[game_id] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":7087:7095  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":7087:7104  gameData[game_id] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Arcade.sol\":7087:7117  gameData[game_id].arcade_token */\n      0x05\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n        /* \"contracts/Arcade.sol\":7065:7119  acceptedArcadeTokens[(gameData[game_id].arcade_token)] */\n      dup5\n      mstore\n        /* \"contracts/Arcade.sol\":7065:7085  acceptedArcadeTokens */\n      0x01\n        /* \"contracts/Arcade.sol\":7065:7119  acceptedArcadeTokens[(gameData[game_id].arcade_token)] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n        /* \"contracts/Arcade.sol\":7065:7132  acceptedArcadeTokens[(gameData[game_id].arcade_token)].native_token */\n      sload\n      and\n        /* \"contracts/Arcade.sol\":7065:7145  acceptedArcadeTokens[(gameData[game_id].arcade_token)].native_token.transferFrom */\n      0x23b872dd\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"contracts/Arcade.sol\":7175:7192  gameData[game_id] */\n      0x00\n      dup5\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":7175:7183  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":7175:7192  gameData[game_id] */\n      0x20\n      mstore\n      0x40\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/Arcade.sol\":7175:7209  gameData[game_id].registration_fee */\n      0x03\n      add\n      sload\n        /* \"contracts/Arcade.sol\":7065:7210  acceptedArcadeTokens[(gameData[game_id].arcade_token)].native_token.transferFrom(_msgSender(), address(this), gameData[game_id].registration_fee) */\n      swap1\n      mload\n      0xe0\n      dup5\n      swap1\n      shl\n      not(sub(shl(0xe0, 0x01), 0x01))\n      and\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4293:4308   */\n      swap1\n      swap3\n      and\n        /* \"contracts/Arcade.sol\":7065:7210  acceptedArcadeTokens[(gameData[game_id].arcade_token)].native_token.transferFrom(_msgSender(), address(this), gameData[game_id].registration_fee) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":4275:4309   */\n      mstore\n        /* \"contracts/Arcade.sol\":7168:7172  this */\n      address\n        /* \"#utility.yul\":4325:4343   */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":4318:4361   */\n      mstore\n        /* \"#utility.yul\":4377:4395   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4370:4404   */\n      mstore\n        /* \"#utility.yul\":4210:4228   */\n      0x64\n      add\n        /* \"contracts/Arcade.sol\":7065:7210  acceptedArcadeTokens[(gameData[game_id].arcade_token)].native_token.transferFrom(_msgSender(), address(this), gameData[game_id].registration_fee) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_350\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_350:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_352\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_352:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_353\n      swap2\n      swap1\n      tag_204\n      jump\t// in\n    tag_353:\n        /* \"contracts/Arcade.sol\":7057:7265  require(acceptedArcadeTokens[(gameData[game_id].arcade_token)].native_token.transferFrom(_msgSender(), address(this), gameData[game_id].registration_fee), \"Trophy King Arcade: Must approve registration fee.\") */\n      tag_354\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8438:8440   */\n      0x20\n        /* \"contracts/Arcade.sol\":7057:7265  require(acceptedArcadeTokens[(gameData[game_id].arcade_token)].native_token.transferFrom(_msgSender(), address(this), gameData[game_id].registration_fee), \"Trophy King Arcade: Must approve registration fee.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8420:8441   */\n      mstore\n        /* \"#utility.yul\":8477:8479   */\n      0x32\n        /* \"#utility.yul\":8457:8475   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8450:8480   */\n      mstore\n        /* \"#utility.yul\":8516:8550   */\n      0x54726f706879204b696e67204172636164653a204d75737420617070726f7665\n        /* \"#utility.yul\":8496:8514   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8489:8551   */\n      mstore\n      shl(0x71, 0x103932b3b4b9ba3930ba34b7b7103332b297)\n        /* \"#utility.yul\":8567:8585   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8560:8608   */\n      mstore\n        /* \"#utility.yul\":8625:8644   */\n      0x84\n      add\n        /* \"contracts/Arcade.sol\":7057:7265  require(acceptedArcadeTokens[(gameData[game_id].arcade_token)].native_token.transferFrom(_msgSender(), address(this), gameData[game_id].registration_fee), \"Trophy King Arcade: Must approve registration fee.\") */\n      tag_230\n        /* \"#utility.yul\":8410:8650   */\n      jump\n        /* \"contracts/Arcade.sol\":7057:7265  require(acceptedArcadeTokens[(gameData[game_id].arcade_token)].native_token.transferFrom(_msgSender(), address(this), gameData[game_id].registration_fee), \"Trophy King Arcade: Must approve registration fee.\") */\n    tag_354:\n        /* \"contracts/Arcade.sol\":7307:7324  gameData[game_id] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":7307:7315  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":7307:7324  gameData[game_id] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Arcade.sol\":7307:7341  gameData[game_id].registration_fee */\n      0x03\n      add\n      sload\n        /* \"contracts/Arcade.sol\":7276:7342  _register(game_id, msg.sender, gameData[game_id].registration_fee) */\n      tag_357\n      swap1\n        /* \"contracts/Arcade.sol\":7286:7293  game_id */\n      dup3\n      swap1\n        /* \"contracts/Arcade.sol\":7295:7305  msg.sender */\n      caller\n      swap1\n        /* \"contracts/Arcade.sol\":7276:7285  _register */\n      tag_299\n        /* \"contracts/Arcade.sol\":7276:7342  _register(game_id, msg.sender, gameData[game_id].registration_fee) */\n      jump\t// in\n    tag_357:\n        /* \"contracts/Arcade.sol\":6504:7349  function register(uint256 game_id) public {... */\n      pop\n      jump\t// out\n        /* \"contracts/Arcade.sol\":3561:4104  function createGame(uint256 game_id, uint256 registration_fee, address arcade_token, uint256 player_limit, bool exchange) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_179:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_359\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_186\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_359:\n        /* \"contracts/Arcade.sol\":3729:3746  gameData[game_id] */\n      0x00\n      dup7\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":3729:3737  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":3729:3746  gameData[game_id] */\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n        /* \"contracts/Arcade.sol\":3756:3757  1 */\n      0x01\n        /* \"contracts/Arcade.sol\":3729:3753  gameData[game_id].status */\n      0x04\n      dup3\n      add\n        /* \"contracts/Arcade.sol\":3729:3757  gameData[game_id].status = 1 */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/Arcade.sol\":3767:3794  gameData[game_id].total_fee */\n      0x06\n      dup3\n      add\n        /* \"contracts/Arcade.sol\":3767:3798  gameData[game_id].total_fee = 0 */\n      dup7\n      swap1\n      sstore\n        /* \"contracts/Arcade.sol\":3808:3842  gameData[game_id].registration_fee */\n      0x03\n      dup3\n      add\n        /* \"contracts/Arcade.sol\":3808:3861  gameData[game_id].registration_fee = registration_fee */\n      dup12\n      swap1\n      sstore\n        /* \"contracts/Arcade.sol\":3871:3901  gameData[game_id].arcade_token */\n      0x05\n      dup3\n      add\n        /* \"contracts/Arcade.sol\":3871:3916  gameData[game_id].arcade_token = arcade_token */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup13\n      and\n      or\n      swap1\n      sstore\n        /* \"contracts/Arcade.sol\":3926:3956  gameData[game_id].player_count */\n      dup2\n      add\n        /* \"contracts/Arcade.sol\":3926:3960  gameData[game_id].player_count = 0 */\n      swap5\n      swap1\n      swap5\n      sstore\n        /* \"contracts/Arcade.sol\":3970:4000  gameData[game_id].player_limit */\n      swap2\n      dup4\n      add\n        /* \"contracts/Arcade.sol\":3970:4015  gameData[game_id].player_limit = player_limit */\n      dup7\n      swap1\n      sstore\n        /* \"contracts/Arcade.sol\":4025:4062  gameData[game_id].exchange = exchange */\n      dup3\n      sload\n      not(0xff)\n      and\n      dup6\n      iszero\n      iszero\n      or\n      swap1\n      swap3\n      sstore\n        /* \"contracts/Arcade.sol\":4078:4097  CreateGame(game_id) */\n      mload\n        /* \"#utility.yul\":6307:6332   */\n      dup8\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":4078:4097  CreateGame(game_id) */\n      0x9e5237c6a8bb45df74799cf138ebda4fed0574bed906da41387acdc4a3cbe3d8\n      swap2\n        /* \"#utility.yul\":6280:6298   */\n      add\n        /* \"contracts/Arcade.sol\":4078:4097  CreateGame(game_id) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/Arcade.sol\":3561:4104  function createGame(uint256 game_id, uint256 registration_fee, address arcade_token, uint256 player_limit, bool exchange) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Arcade.sol\":8814:8932  function setMarketMaker(address incoming) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n    tag_183:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      tag_363\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2072:2076  0x00 */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2515  _checkRole */\n      tag_186\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":2505:2521  _checkRole(role) */\n      jump\t// in\n    tag_363:\n      pop\n        /* \"contracts/Arcade.sol\":8902:8914  market_maker */\n      0x06\n        /* \"contracts/Arcade.sol\":8902:8925  market_maker = incoming */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/Arcade.sol\":8814:8932  function setMarketMaker(address incoming) public onlyRole(DEFAULT_ADMIN_ROLE) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3334:3437  function _checkRole(bytes32 role) internal view virtual {... */\n    tag_186:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3400:3430  _checkRole(role, _msgSender()) */\n      tag_357\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3411:3415  role */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3400:3410  _checkRole */\n      tag_368\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3400:3430  _checkRole(role, _msgSender()) */\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7244:7477  function _grantRole(bytes32 role, address account) internal virtual {... */\n    tag_226:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7327:7349  hasRole(role, account) */\n      tag_372\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7335:7339  role */\n      dup3\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7341:7348  account */\n      dup3\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7327:7334  hasRole */\n      tag_125\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7327:7349  hasRole(role, account) */\n      jump\t// in\n    tag_372:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7322:7471  if (!hasRole(role, account)) {... */\n      tag_232\n      jumpi\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7365:7371  _roles */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7365:7377  _roles[role] */\n      dup3\n      dup2\n      mstore\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7365:7394  _roles[role].members[account] */\n      dup6\n      and\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7365:7401  _roles[role].members[account] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7397:7401  true */\n      0x01\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7365:7401  _roles[role].members[account] = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7447:7459  _msgSender() */\n      tag_374\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      caller\n      swap1\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7447:7459  _msgSender() */\n    tag_374:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7420:7460  RoleGranted(role, account, _msgSender()) */\n      and\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7438:7445  account */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7420:7460  RoleGranted(role, account, _msgSender()) */\n      and\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7432:7436  role */\n      dup4\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7420:7460  RoleGranted(role, account, _msgSender()) */\n      0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7244:7477  function _grantRole(bytes32 role, address account) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7602:7836  function _revokeRole(bytes32 role, address account) internal virtual {... */\n    tag_233:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7685:7707  hasRole(role, account) */\n      tag_376\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7693:7697  role */\n      dup3\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7699:7706  account */\n      dup3\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7685:7692  hasRole */\n      tag_125\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7685:7707  hasRole(role, account) */\n      jump\t// in\n    tag_376:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7681:7830  if (hasRole(role, account)) {... */\n      iszero\n      tag_232\n      jumpi\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7755:7760  false */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7723:7735  _roles[role] */\n      dup3\n      dup2\n      mstore\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7723:7752  _roles[role].members[account] */\n      dup6\n      and\n      dup1\n      dup6\n      mstore\n      swap3\n      mstore\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7723:7760  _roles[role].members[account] = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7779:7819  RoleRevoked(role, account, _msgSender()) */\n      mload\n        /* \"@openzeppelin/contracts@4.6.0/utils/Context.sol\":719:729  msg.sender */\n      caller\n      swap3\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7723:7735  _roles[role] */\n      dup6\n      swap2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7779:7819  RoleRevoked(role, account, _msgSender()) */\n      0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b\n      swap2\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7755:7760  false */\n      swap1\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7779:7819  RoleRevoked(role, account, _msgSender()) */\n      log4\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":7602:7836  function _revokeRole(bytes32 role, address account) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Arcade.sol\":6097:6432  function _register(uint256 game_id, address player_address, uint256 amount) internal {... */\n    tag_299:\n        /* \"contracts/Arcade.sol\":6192:6211  GameInfo storage gi */\n      0x00\n        /* \"contracts/Arcade.sol\":6214:6231  gameData[game_id] */\n      dup4\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":6214:6222  gameData */\n      0x02\n        /* \"contracts/Arcade.sol\":6214:6231  gameData[game_id] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Arcade.sol\":6261:6262  1 */\n      0x01\n        /* \"contracts/Arcade.sol\":6242:6257  gi.player_count */\n      dup1\n      dup3\n      add\n        /* \"contracts/Arcade.sol\":6242:6262  gi.player_count += 1 */\n      dup1\n      sload\n        /* \"contracts/Arcade.sol\":6214:6231  gameData[game_id] */\n      swap3\n      swap4\n        /* \"contracts/Arcade.sol\":6261:6262  1 */\n      swap2\n      swap3\n        /* \"contracts/Arcade.sol\":6242:6257  gi.player_count */\n      swap1\n      swap2\n        /* \"contracts/Arcade.sol\":6192:6211  GameInfo storage gi */\n      swap1\n        /* \"contracts/Arcade.sol\":6242:6262  gi.player_count += 1 */\n      tag_380\n      swap1\n        /* \"contracts/Arcade.sol\":6261:6262  1 */\n      dup5\n      swap1\n        /* \"contracts/Arcade.sol\":6242:6262  gi.player_count += 1 */\n      tag_381\n      jump\t// in\n    tag_380:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Arcade.sol\":6272:6294  gi.fee[player_address] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":6272:6278  gi.fee */\n      0x07\n      dup3\n      add\n        /* \"contracts/Arcade.sol\":6272:6294  gi.fee[player_address] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Arcade.sol\":6272:6303  gi.fee[player_address] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"contracts/Arcade.sol\":6313:6320  gi.paid */\n      0x08\n      dup5\n      add\n        /* \"contracts/Arcade.sol\":6313:6336  gi.paid[player_address] */\n      swap1\n      swap2\n      mstore\n      dup2\n      keccak256\n        /* \"contracts/Arcade.sol\":6339:6340  1 */\n      0x01\n        /* \"contracts/Arcade.sol\":6313:6340  gi.paid[player_address] = 1 */\n      swap1\n      sstore\n        /* \"contracts/Arcade.sol\":6350:6362  gi.total_fee */\n      0x06\n      dup3\n      add\n        /* \"contracts/Arcade.sol\":6350:6372  gi.total_fee += amount */\n      dup1\n      sload\n        /* \"contracts/Arcade.sol\":6297:6303  amount */\n      dup5\n      swap3\n        /* \"contracts/Arcade.sol\":6272:6294  gi.fee[player_address] */\n      swap1\n        /* \"contracts/Arcade.sol\":6350:6372  gi.total_fee += amount */\n      tag_382\n      swap1\n        /* \"contracts/Arcade.sol\":6297:6303  amount */\n      dup5\n      swap1\n        /* \"contracts/Arcade.sol\":6350:6372  gi.total_fee += amount */\n      tag_381\n      jump\t// in\n    tag_382:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Arcade.sol\":6396:6425  Register(msg.sender, game_id) */\n      mload(0x40)\n        /* \"#utility.yul\":6307:6332   */\n      dup5\n      dup2\n      mstore\n        /* \"contracts/Arcade.sol\":6405:6415  msg.sender */\n      caller\n      swap1\n        /* \"contracts/Arcade.sol\":6396:6425  Register(msg.sender, game_id) */\n      0x7dc6ab80cc84c043b7b8d4fcafc802187470087f7ea7fccd2e17aecd0256a1\n      swap1\n        /* \"#utility.yul\":6295:6297   */\n      0x20\n        /* \"#utility.yul\":6280:6298   */\n      add\n        /* \"contracts/Arcade.sol\":6396:6425  Register(msg.sender, game_id) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/Arcade.sol\":6097:6432  function _register(uint256 game_id, address player_address, uint256 amount) internal {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3718:4210  function _checkRole(bytes32 role, address account) internal view virtual {... */\n    tag_368:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3806:3828  hasRole(role, account) */\n      tag_385\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3814:3818  role */\n      dup3\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3820:3827  account */\n      dup3\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3806:3813  hasRole */\n      tag_125\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3806:3828  hasRole(role, account) */\n      jump\t// in\n    tag_385:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3801:4204  if (!hasRole(role, account)) {... */\n      tag_232\n      jumpi\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3989:4030  Strings.toHexString(uint160(account), 20) */\n      tag_387\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4017:4024  account */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3989:4030  Strings.toHexString(uint160(account), 20) */\n      and\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4027:4029  20 */\n      0x14\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3989:4008  Strings.toHexString */\n      tag_388\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3989:4030  Strings.toHexString(uint160(account), 20) */\n      jump\t// in\n    tag_387:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4101:4139  Strings.toHexString(uint256(role), 32) */\n      tag_389\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4129:4133  role */\n      dup4\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4136:4138  32 */\n      0x20\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4101:4120  Strings.toHexString */\n      tag_388\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":4101:4139  Strings.toHexString(uint256(role), 32) */\n      jump\t// in\n    tag_389:\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3896:4161  abi.encodePacked(... */\n      add(0x20, mload(0x40))\n      tag_390\n      swap3\n      swap2\n      swap1\n      tag_391\n      jump\t// in\n    tag_390:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap1\n      dup3\n      swap1\n      mstore\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":3844:4193  revert(... */\n      dup3\n      mstore\n      tag_230\n      swap2\n      0x04\n      add\n      tag_393\n      jump\t// in\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1588:2029  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {... */\n    tag_388:\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1663:1676  string memory */\n      0x60\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1688:1707  bytes memory buffer */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1720:1730  2 * length */\n      tag_395\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1724:1730  length */\n      dup4\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1720:1721  2 */\n      0x02\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1720:1730  2 * length */\n      tag_309\n      jump\t// in\n    tag_395:\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1720:1734  2 * length + 2 */\n      tag_396\n      swap1\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1733:1734  2 */\n      0x02\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1720:1734  2 * length + 2 */\n      tag_381\n      jump\t// in\n    tag_396:\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1710:1735  new bytes(2 * length + 2) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_397\n      jumpi\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_397:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_398\n      jumpi\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_398:\n      pop\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1688:1735  bytes memory buffer = new bytes(2 * length + 2) */\n      swap1\n      pop\n      shl(0xfc, 0x03)\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1745:1751  buffer */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1752:1753  0 */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1745:1754  buffer[0] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_399\n      jumpi\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_399:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1745:1760  buffer[0] = \"0\" */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n      shl(0xfb, 0x0f)\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1770:1776  buffer */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1777:1778  1 */\n      0x01\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1770:1779  buffer[1] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_400\n      jumpi\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_400:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1770:1785  buffer[1] = \"x\" */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1800:1809  uint256 i */\n      0x00\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1812:1822  2 * length */\n      tag_404\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1816:1822  length */\n      dup5\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1812:1813  2 */\n      0x02\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1812:1822  2 * length */\n      tag_309\n      jump\t// in\n    tag_404:\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1812:1826  2 * length + 1 */\n      tag_405\n      swap1\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1825:1826  1 */\n      0x01\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1812:1826  2 * length + 1 */\n      tag_381\n      jump\t// in\n    tag_405:\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1800:1826  uint256 i = 2 * length + 1 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n    tag_401:\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1832:1833  1 */\n      0x01\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1828:1829  i */\n      dup2\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1828:1833  i > 1 */\n      gt\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n      iszero\n      tag_402\n      jumpi\n      shl(0x81, 0x181899199a1a9b1b9c1cb0b131b232b3)\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1879:1884  value */\n      dup6\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1887:1890  0xf */\n      0x0f\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1879:1890  value & 0xf */\n      and\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1866:1891  _HEX_SYMBOLS[value & 0xf] */\n      0x10\n      dup2\n      lt\n      tag_406\n      jumpi\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_406:\n      byte\n      0xf8\n      shl\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1854:1860  buffer */\n      dup3\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1861:1862  i */\n      dup3\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1854:1863  buffer[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_407\n      jumpi\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_407:\n      0x20\n      add\n      add\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1854:1891  buffer[i] = _HEX_SYMBOLS[value & 0xf] */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1915:1916  4 */\n      0x04\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1905:1916  value >>= 4 */\n      swap5\n      swap1\n      swap5\n      shr\n      swap4\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1835:1838  --i */\n      tag_408\n      dup2\n      tag_409\n      jump\t// in\n    tag_408:\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1795:1927  for (uint256 i = 2 * length + 1; i > 1; --i) {... */\n      jump(tag_401)\n    tag_402:\n      pop\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1944:1954  value == 0 */\n      dup4\n      iszero\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n      tag_410\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7308:7310   */\n      0x20\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7290:7311   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":7327:7345   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7320:7350   */\n      mstore\n        /* \"#utility.yul\":7386:7420   */\n      0x537472696e67733a20686578206c656e67746820696e73756666696369656e74\n        /* \"#utility.yul\":7366:7384   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7359:7421   */\n      mstore\n        /* \"#utility.yul\":7438:7456   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n      tag_230\n        /* \"#utility.yul\":7280:7462   */\n      jump\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1936:1991  require(value == 0, \"Strings: hex length insufficient\") */\n    tag_410:\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":2015:2021  buffer */\n      swap4\n        /* \"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":1588:2029  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:187   */\n    tag_414:\n        /* \"#utility.yul\":82:102   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":131:162   */\n      dup2\n      and\n        /* \"#utility.yul\":121:163   */\n      dup2\n      eq\n        /* \"#utility.yul\":111:113   */\n      tag_416\n      jumpi\n        /* \"#utility.yul\":177:178   */\n      0x00\n        /* \"#utility.yul\":174:175   */\n      dup1\n        /* \"#utility.yul\":167:179   */\n      revert\n        /* \"#utility.yul\":111:113   */\n    tag_416:\n        /* \"#utility.yul\":63:187   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":192:388   */\n    tag_98:\n        /* \"#utility.yul\":251:257   */\n      0x00\n        /* \"#utility.yul\":304:306   */\n      0x20\n        /* \"#utility.yul\":292:301   */\n      dup3\n        /* \"#utility.yul\":283:290   */\n      dup5\n        /* \"#utility.yul\":279:302   */\n      sub\n        /* \"#utility.yul\":275:307   */\n      slt\n        /* \"#utility.yul\":272:274   */\n      iszero\n      tag_418\n      jumpi\n        /* \"#utility.yul\":325:331   */\n      dup1\n        /* \"#utility.yul\":317:323   */\n      dup2\n        /* \"#utility.yul\":310:332   */\n      revert\n        /* \"#utility.yul\":272:274   */\n    tag_418:\n        /* \"#utility.yul\":353:382   */\n      tag_410\n        /* \"#utility.yul\":372:381   */\n      dup3\n        /* \"#utility.yul\":353:382   */\n      tag_414\n      jump\t// in\n        /* \"#utility.yul\":393:786   */\n    tag_55:\n        /* \"#utility.yul\":467:473   */\n      0x00\n        /* \"#utility.yul\":475:481   */\n      dup1\n        /* \"#utility.yul\":483:489   */\n      0x00\n        /* \"#utility.yul\":536:538   */\n      0x60\n        /* \"#utility.yul\":524:533   */\n      dup5\n        /* \"#utility.yul\":515:522   */\n      dup7\n        /* \"#utility.yul\":511:534   */\n      sub\n        /* \"#utility.yul\":507:539   */\n      slt\n        /* \"#utility.yul\":504:506   */\n      iszero\n      tag_421\n      jumpi\n        /* \"#utility.yul\":557:563   */\n      dup2\n        /* \"#utility.yul\":549:555   */\n      dup3\n        /* \"#utility.yul\":542:564   */\n      revert\n        /* \"#utility.yul\":504:506   */\n    tag_421:\n        /* \"#utility.yul\":585:614   */\n      tag_422\n        /* \"#utility.yul\":604:613   */\n      dup5\n        /* \"#utility.yul\":585:614   */\n      tag_414\n      jump\t// in\n    tag_422:\n        /* \"#utility.yul\":575:614   */\n      swap3\n      pop\n        /* \"#utility.yul\":661:663   */\n      0x20\n        /* \"#utility.yul\":650:659   */\n      dup5\n        /* \"#utility.yul\":646:664   */\n      add\n        /* \"#utility.yul\":633:665   */\n      calldataload\n        /* \"#utility.yul\":623:665   */\n      swap2\n      pop\n        /* \"#utility.yul\":715:717   */\n      0x40\n        /* \"#utility.yul\":704:713   */\n      dup5\n        /* \"#utility.yul\":700:718   */\n      add\n        /* \"#utility.yul\":687:719   */\n      calldataload\n        /* \"#utility.yul\":728:756   */\n      tag_423\n        /* \"#utility.yul\":750:755   */\n      dup2\n        /* \"#utility.yul\":728:756   */\n      tag_424\n      jump\t// in\n    tag_423:\n        /* \"#utility.yul\":775:780   */\n      dup1\n        /* \"#utility.yul\":765:780   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":494:786   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":791:1046   */\n    tag_204:\n        /* \"#utility.yul\":858:864   */\n      0x00\n        /* \"#utility.yul\":911:913   */\n      0x20\n        /* \"#utility.yul\":899:908   */\n      dup3\n        /* \"#utility.yul\":890:897   */\n      dup5\n        /* \"#utility.yul\":886:909   */\n      sub\n        /* \"#utility.yul\":882:914   */\n      slt\n        /* \"#utility.yul\":879:881   */\n      iszero\n      tag_426\n      jumpi\n        /* \"#utility.yul\":932:938   */\n      dup1\n        /* \"#utility.yul\":924:930   */\n      dup2\n        /* \"#utility.yul\":917:939   */\n      revert\n        /* \"#utility.yul\":879:881   */\n    tag_426:\n        /* \"#utility.yul\":969:978   */\n      dup2\n        /* \"#utility.yul\":963:979   */\n      mload\n        /* \"#utility.yul\":988:1016   */\n      tag_410\n        /* \"#utility.yul\":1010:1015   */\n      dup2\n        /* \"#utility.yul\":988:1016   */\n      tag_424\n      jump\t// in\n        /* \"#utility.yul\":1051:1241   */\n    tag_64:\n        /* \"#utility.yul\":1110:1116   */\n      0x00\n        /* \"#utility.yul\":1163:1165   */\n      0x20\n        /* \"#utility.yul\":1151:1160   */\n      dup3\n        /* \"#utility.yul\":1142:1149   */\n      dup5\n        /* \"#utility.yul\":1138:1161   */\n      sub\n        /* \"#utility.yul\":1134:1166   */\n      slt\n        /* \"#utility.yul\":1131:1133   */\n      iszero\n      tag_429\n      jumpi\n        /* \"#utility.yul\":1184:1190   */\n      dup1\n        /* \"#utility.yul\":1176:1182   */\n      dup2\n        /* \"#utility.yul\":1169:1191   */\n      revert\n        /* \"#utility.yul\":1131:1133   */\n    tag_429:\n      pop\n        /* \"#utility.yul\":1212:1235   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1121:1241   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1246:1510   */\n    tag_84:\n        /* \"#utility.yul\":1314:1320   */\n      0x00\n        /* \"#utility.yul\":1322:1328   */\n      dup1\n        /* \"#utility.yul\":1375:1377   */\n      0x40\n        /* \"#utility.yul\":1363:1372   */\n      dup4\n        /* \"#utility.yul\":1354:1361   */\n      dup6\n        /* \"#utility.yul\":1350:1373   */\n      sub\n        /* \"#utility.yul\":1346:1378   */\n      slt\n        /* \"#utility.yul\":1343:1345   */\n      iszero\n      tag_431\n      jumpi\n        /* \"#utility.yul\":1396:1402   */\n      dup2\n        /* \"#utility.yul\":1388:1394   */\n      dup3\n        /* \"#utility.yul\":1381:1403   */\n      revert\n        /* \"#utility.yul\":1343:1345   */\n    tag_431:\n        /* \"#utility.yul\":1437:1446   */\n      dup3\n        /* \"#utility.yul\":1424:1447   */\n      calldataload\n        /* \"#utility.yul\":1414:1447   */\n      swap2\n      pop\n        /* \"#utility.yul\":1466:1504   */\n      tag_432\n        /* \"#utility.yul\":1500:1502   */\n      0x20\n        /* \"#utility.yul\":1489:1498   */\n      dup5\n        /* \"#utility.yul\":1485:1503   */\n      add\n        /* \"#utility.yul\":1466:1504   */\n      tag_414\n      jump\t// in\n    tag_432:\n        /* \"#utility.yul\":1456:1504   */\n      swap1\n      pop\n        /* \"#utility.yul\":1333:1510   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1515:1821   */\n    tag_48:\n        /* \"#utility.yul\":1573:1579   */\n      0x00\n        /* \"#utility.yul\":1626:1628   */\n      0x20\n        /* \"#utility.yul\":1614:1623   */\n      dup3\n        /* \"#utility.yul\":1605:1612   */\n      dup5\n        /* \"#utility.yul\":1601:1624   */\n      sub\n        /* \"#utility.yul\":1597:1629   */\n      slt\n        /* \"#utility.yul\":1594:1596   */\n      iszero\n      tag_434\n      jumpi\n        /* \"#utility.yul\":1647:1653   */\n      dup1\n        /* \"#utility.yul\":1639:1645   */\n      dup2\n        /* \"#utility.yul\":1632:1654   */\n      revert\n        /* \"#utility.yul\":1594:1596   */\n    tag_434:\n        /* \"#utility.yul\":1678:1701   */\n      dup2\n      calldataload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":1730:1762   */\n      dup2\n      and\n        /* \"#utility.yul\":1720:1763   */\n      dup2\n      eq\n        /* \"#utility.yul\":1710:1712   */\n      tag_410\n      jumpi\n        /* \"#utility.yul\":1782:1788   */\n      dup2\n        /* \"#utility.yul\":1774:1780   */\n      dup3\n        /* \"#utility.yul\":1767:1789   */\n      revert\n        /* \"#utility.yul\":2290:2821   */\n    tag_178:\n        /* \"#utility.yul\":2382:2388   */\n      0x00\n        /* \"#utility.yul\":2390:2396   */\n      dup1\n        /* \"#utility.yul\":2398:2404   */\n      0x00\n        /* \"#utility.yul\":2406:2412   */\n      dup1\n        /* \"#utility.yul\":2414:2420   */\n      0x00\n        /* \"#utility.yul\":2467:2470   */\n      0xa0\n        /* \"#utility.yul\":2455:2464   */\n      dup7\n        /* \"#utility.yul\":2446:2453   */\n      dup9\n        /* \"#utility.yul\":2442:2465   */\n      sub\n        /* \"#utility.yul\":2438:2471   */\n      slt\n        /* \"#utility.yul\":2435:2437   */\n      iszero\n      tag_442\n      jumpi\n        /* \"#utility.yul\":2489:2495   */\n      dup1\n        /* \"#utility.yul\":2481:2487   */\n      dup2\n        /* \"#utility.yul\":2474:2496   */\n      revert\n        /* \"#utility.yul\":2435:2437   */\n    tag_442:\n        /* \"#utility.yul\":2530:2539   */\n      dup6\n        /* \"#utility.yul\":2517:2540   */\n      calldataload\n        /* \"#utility.yul\":2507:2540   */\n      swap5\n      pop\n        /* \"#utility.yul\":2587:2589   */\n      0x20\n        /* \"#utility.yul\":2576:2585   */\n      dup7\n        /* \"#utility.yul\":2572:2590   */\n      add\n        /* \"#utility.yul\":2559:2591   */\n      calldataload\n        /* \"#utility.yul\":2549:2591   */\n      swap4\n      pop\n        /* \"#utility.yul\":2610:2648   */\n      tag_443\n        /* \"#utility.yul\":2644:2646   */\n      0x40\n        /* \"#utility.yul\":2633:2642   */\n      dup8\n        /* \"#utility.yul\":2629:2647   */\n      add\n        /* \"#utility.yul\":2610:2648   */\n      tag_414\n      jump\t// in\n    tag_443:\n        /* \"#utility.yul\":2600:2648   */\n      swap3\n      pop\n        /* \"#utility.yul\":2695:2697   */\n      0x60\n        /* \"#utility.yul\":2684:2693   */\n      dup7\n        /* \"#utility.yul\":2680:2698   */\n      add\n        /* \"#utility.yul\":2667:2699   */\n      calldataload\n        /* \"#utility.yul\":2657:2699   */\n      swap2\n      pop\n        /* \"#utility.yul\":2749:2752   */\n      0x80\n        /* \"#utility.yul\":2738:2747   */\n      dup7\n        /* \"#utility.yul\":2734:2753   */\n      add\n        /* \"#utility.yul\":2721:2754   */\n      calldataload\n        /* \"#utility.yul\":2763:2791   */\n      tag_444\n        /* \"#utility.yul\":2785:2790   */\n      dup2\n        /* \"#utility.yul\":2763:2791   */\n      tag_424\n      jump\t// in\n    tag_444:\n        /* \"#utility.yul\":2810:2815   */\n      dup1\n        /* \"#utility.yul\":2800:2815   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":2425:2821   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      swap1\n      swap4\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3036:3822   */\n    tag_391:\n        /* \"#utility.yul\":3447:3472   */\n      0x416363657373436f6e74726f6c3a206163636f756e7420000000000000000000\n        /* \"#utility.yul\":3442:3445   */\n      dup2\n        /* \"#utility.yul\":3435:3473   */\n      mstore\n        /* \"#utility.yul\":3417:3420   */\n      0x00\n        /* \"#utility.yul\":3502:3508   */\n      dup4\n        /* \"#utility.yul\":3496:3509   */\n      mload\n        /* \"#utility.yul\":3518:3580   */\n      tag_447\n        /* \"#utility.yul\":3573:3579   */\n      dup2\n        /* \"#utility.yul\":3568:3570   */\n      0x17\n        /* \"#utility.yul\":3563:3566   */\n      dup6\n        /* \"#utility.yul\":3559:3571   */\n      add\n        /* \"#utility.yul\":3552:3556   */\n      0x20\n        /* \"#utility.yul\":3544:3550   */\n      dup9\n        /* \"#utility.yul\":3540:3557   */\n      add\n        /* \"#utility.yul\":3518:3580   */\n      tag_448\n      jump\t// in\n    tag_447:\n      shl(0x7d, 0x01034b99036b4b9b9b4b733903937b6329)\n        /* \"#utility.yul\":3639:3641   */\n      0x17\n        /* \"#utility.yul\":3599:3615   */\n      swap2\n      dup5\n      add\n        /* \"#utility.yul\":3631:3642   */\n      swap2\n      dup3\n      add\n        /* \"#utility.yul\":3624:3664   */\n      mstore\n        /* \"#utility.yul\":3689:3702   */\n      dup4\n      mload\n        /* \"#utility.yul\":3711:3774   */\n      tag_449\n        /* \"#utility.yul\":3689:3702   */\n      dup2\n        /* \"#utility.yul\":3760:3762   */\n      0x28\n        /* \"#utility.yul\":3752:3763   */\n      dup5\n      add\n        /* \"#utility.yul\":3745:3749   */\n      0x20\n        /* \"#utility.yul\":3733:3750   */\n      dup9\n      add\n        /* \"#utility.yul\":3711:3774   */\n      tag_448\n      jump\t// in\n    tag_449:\n        /* \"#utility.yul\":3794:3811   */\n      add\n        /* \"#utility.yul\":3813:3815   */\n      0x28\n        /* \"#utility.yul\":3790:3816   */\n      add\n      swap5\n        /* \"#utility.yul\":3425:3822   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6718:7101   */\n    tag_393:\n        /* \"#utility.yul\":6867:6869   */\n      0x20\n        /* \"#utility.yul\":6856:6865   */\n      dup2\n        /* \"#utility.yul\":6849:6870   */\n      mstore\n        /* \"#utility.yul\":6830:6834   */\n      0x00\n        /* \"#utility.yul\":6899:6905   */\n      dup3\n        /* \"#utility.yul\":6893:6906   */\n      mload\n        /* \"#utility.yul\":6942:6948   */\n      dup1\n        /* \"#utility.yul\":6937:6939   */\n      0x20\n        /* \"#utility.yul\":6926:6935   */\n      dup5\n        /* \"#utility.yul\":6922:6940   */\n      add\n        /* \"#utility.yul\":6915:6949   */\n      mstore\n        /* \"#utility.yul\":6958:7024   */\n      tag_460\n        /* \"#utility.yul\":7017:7023   */\n      dup2\n        /* \"#utility.yul\":7012:7014   */\n      0x40\n        /* \"#utility.yul\":7001:7010   */\n      dup6\n        /* \"#utility.yul\":6997:7015   */\n      add\n        /* \"#utility.yul\":6992:6994   */\n      0x20\n        /* \"#utility.yul\":6984:6990   */\n      dup8\n        /* \"#utility.yul\":6980:6995   */\n      add\n        /* \"#utility.yul\":6958:7024   */\n      tag_448\n      jump\t// in\n    tag_460:\n        /* \"#utility.yul\":7085:7087   */\n      0x1f\n        /* \"#utility.yul\":7064:7079   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":7060:7089   */\n      and\n        /* \"#utility.yul\":7045:7090   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":7092:7094   */\n      0x40\n        /* \"#utility.yul\":7041:7095   */\n      add\n      swap3\n        /* \"#utility.yul\":6839:7101   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7828:8231   */\n    tag_285:\n        /* \"#utility.yul\":8030:8032   */\n      0x20\n        /* \"#utility.yul\":8012:8033   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":8069:8071   */\n      0x27\n        /* \"#utility.yul\":8049:8067   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":8042:8072   */\n      mstore\n        /* \"#utility.yul\":8108:8142   */\n      0x54726f706879204b696e67204172636164653a20416c72656164792072656769\n        /* \"#utility.yul\":8103:8105   */\n      0x40\n        /* \"#utility.yul\":8088:8106   */\n      dup3\n      add\n        /* \"#utility.yul\":8081:8143   */\n      mstore\n      shl(0xc9, 0x39ba32b932b217)\n        /* \"#utility.yul\":8174:8176   */\n      0x60\n        /* \"#utility.yul\":8159:8177   */\n      dup3\n      add\n        /* \"#utility.yul\":8152:8189   */\n      mstore\n        /* \"#utility.yul\":8221:8224   */\n      0x80\n        /* \"#utility.yul\":8206:8225   */\n      add\n      swap1\n        /* \"#utility.yul\":8002:8231   */\n      jump\t// out\n        /* \"#utility.yul\":9476:9879   */\n    tag_271:\n        /* \"#utility.yul\":9678:9680   */\n      0x20\n        /* \"#utility.yul\":9660:9681   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9717:9719   */\n      0x27\n        /* \"#utility.yul\":9697:9715   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":9690:9720   */\n      mstore\n        /* \"#utility.yul\":9756:9790   */\n      0x54726f706879204b696e67204172636164653a20556e61626c6520746f207472\n        /* \"#utility.yul\":9751:9753   */\n      0x40\n        /* \"#utility.yul\":9736:9754   */\n      dup3\n      add\n        /* \"#utility.yul\":9729:9791   */\n      mstore\n      shl(0xc9, 0x30b739b332b917)\n        /* \"#utility.yul\":9822:9824   */\n      0x60\n        /* \"#utility.yul\":9807:9825   */\n      dup3\n      add\n        /* \"#utility.yul\":9800:9837   */\n      mstore\n        /* \"#utility.yul\":9869:9872   */\n      0x80\n        /* \"#utility.yul\":9854:9873   */\n      add\n      swap1\n        /* \"#utility.yul\":9650:9879   */\n      jump\t// out\n        /* \"#utility.yul\":10301:10707   */\n    tag_282:\n        /* \"#utility.yul\":10503:10505   */\n      0x20\n        /* \"#utility.yul\":10485:10506   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":10542:10544   */\n      0x2a\n        /* \"#utility.yul\":10522:10540   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":10515:10545   */\n      mstore\n        /* \"#utility.yul\":10581:10615   */\n      0x54726f706879204b696e67204172636164653a2047616d652066756c6c2e2020\n        /* \"#utility.yul\":10576:10578   */\n      0x40\n        /* \"#utility.yul\":10561:10579   */\n      dup3\n      add\n        /* \"#utility.yul\":10554:10616   */\n      mstore\n      shl(0xb1, 0x2a393c9030b3b0b4b717)\n        /* \"#utility.yul\":10647:10649   */\n      0x60\n        /* \"#utility.yul\":10632:10650   */\n      dup3\n      add\n        /* \"#utility.yul\":10625:10665   */\n      mstore\n        /* \"#utility.yul\":10697:10700   */\n      0x80\n        /* \"#utility.yul\":10682:10701   */\n      add\n      swap1\n        /* \"#utility.yul\":10475:10707   */\n      jump\t// out\n        /* \"#utility.yul\":10712:11111   */\n    tag_288:\n        /* \"#utility.yul\":10914:10916   */\n      0x20\n        /* \"#utility.yul\":10896:10917   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":10953:10955   */\n      0x23\n        /* \"#utility.yul\":10933:10951   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":10926:10956   */\n      mstore\n        /* \"#utility.yul\":10992:11026   */\n      0x54726f706879204b696e67204172636164653a2047616d65206e6f7420666f75\n        /* \"#utility.yul\":10987:10989   */\n      0x40\n        /* \"#utility.yul\":10972:10990   */\n      dup3\n      add\n        /* \"#utility.yul\":10965:11027   */\n      mstore\n      shl(0xe9, 0x373217)\n        /* \"#utility.yul\":11058:11060   */\n      0x60\n        /* \"#utility.yul\":11043:11061   */\n      dup3\n      add\n        /* \"#utility.yul\":11036:11069   */\n      mstore\n        /* \"#utility.yul\":11101:11104   */\n      0x80\n        /* \"#utility.yul\":11086:11105   */\n      add\n      swap1\n        /* \"#utility.yul\":10886:11111   */\n      jump\t// out\n        /* \"#utility.yul\":11116:11513   */\n    tag_276:\n        /* \"#utility.yul\":11318:11320   */\n      0x20\n        /* \"#utility.yul\":11300:11321   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":11357:11359   */\n      0x21\n        /* \"#utility.yul\":11337:11355   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":11330:11360   */\n      mstore\n        /* \"#utility.yul\":11396:11430   */\n      0x54726f706879204b696e67204172636164653a20556e617574686f72697a6564\n        /* \"#utility.yul\":11391:11393   */\n      0x40\n        /* \"#utility.yul\":11376:11394   */\n      dup3\n      add\n        /* \"#utility.yul\":11369:11431   */\n      mstore\n      shl(0xf9, 0x17)\n        /* \"#utility.yul\":11462:11464   */\n      0x60\n        /* \"#utility.yul\":11447:11465   */\n      dup3\n      add\n        /* \"#utility.yul\":11440:11471   */\n      mstore\n        /* \"#utility.yul\":11503:11506   */\n      0x80\n        /* \"#utility.yul\":11488:11507   */\n      add\n      swap1\n        /* \"#utility.yul\":11290:11513   */\n      jump\t// out\n        /* \"#utility.yul\":13287:13415   */\n    tag_381:\n        /* \"#utility.yul\":13327:13330   */\n      0x00\n        /* \"#utility.yul\":13358:13359   */\n      dup3\n        /* \"#utility.yul\":13354:13360   */\n      not\n        /* \"#utility.yul\":13351:13352   */\n      dup3\n        /* \"#utility.yul\":13348:13361   */\n      gt\n        /* \"#utility.yul\":13345:13347   */\n      iszero\n      tag_479\n      jumpi\n        /* \"#utility.yul\":13364:13382   */\n      tag_479\n      tag_480\n      jump\t// in\n    tag_479:\n      pop\n        /* \"#utility.yul\":13400:13409   */\n      add\n      swap1\n        /* \"#utility.yul\":13335:13415   */\n      jump\t// out\n        /* \"#utility.yul\":13420:13637   */\n    tag_311:\n        /* \"#utility.yul\":13460:13461   */\n      0x00\n        /* \"#utility.yul\":13486:13487   */\n      dup3\n        /* \"#utility.yul\":13476:13478   */\n      tag_482\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":13511:13542   */\n      dup2\n      mstore\n        /* \"#utility.yul\":13565:13569   */\n      0x12\n        /* \"#utility.yul\":13562:13563   */\n      0x04\n        /* \"#utility.yul\":13555:13570   */\n      mstore\n        /* \"#utility.yul\":13593:13597   */\n      0x24\n        /* \"#utility.yul\":13518:13519   */\n      dup2\n        /* \"#utility.yul\":13583:13598   */\n      revert\n        /* \"#utility.yul\":13476:13478   */\n    tag_482:\n      pop\n        /* \"#utility.yul\":13622:13631   */\n      div\n      swap1\n        /* \"#utility.yul\":13466:13637   */\n      jump\t// out\n        /* \"#utility.yul\":13642:13810   */\n    tag_309:\n        /* \"#utility.yul\":13682:13689   */\n      0x00\n        /* \"#utility.yul\":13748:13749   */\n      dup2\n        /* \"#utility.yul\":13744:13745   */\n      0x00\n        /* \"#utility.yul\":13740:13746   */\n      not\n        /* \"#utility.yul\":13736:13750   */\n      div\n        /* \"#utility.yul\":13733:13734   */\n      dup4\n        /* \"#utility.yul\":13730:13751   */\n      gt\n        /* \"#utility.yul\":13725:13726   */\n      dup3\n        /* \"#utility.yul\":13718:13727   */\n      iszero\n        /* \"#utility.yul\":13711:13728   */\n      iszero\n        /* \"#utility.yul\":13707:13752   */\n      and\n        /* \"#utility.yul\":13704:13706   */\n      iszero\n      tag_485\n      jumpi\n        /* \"#utility.yul\":13755:13773   */\n      tag_485\n      tag_480\n      jump\t// in\n    tag_485:\n      pop\n        /* \"#utility.yul\":13795:13804   */\n      mul\n      swap1\n        /* \"#utility.yul\":13694:13810   */\n      jump\t// out\n        /* \"#utility.yul\":13815:13940   */\n    tag_258:\n        /* \"#utility.yul\":13855:13859   */\n      0x00\n        /* \"#utility.yul\":13883:13884   */\n      dup3\n        /* \"#utility.yul\":13880:13881   */\n      dup3\n        /* \"#utility.yul\":13877:13885   */\n      lt\n        /* \"#utility.yul\":13874:13876   */\n      iszero\n      tag_488\n      jumpi\n        /* \"#utility.yul\":13888:13906   */\n      tag_488\n      tag_480\n      jump\t// in\n    tag_488:\n      pop\n        /* \"#utility.yul\":13925:13934   */\n      sub\n      swap1\n        /* \"#utility.yul\":13864:13940   */\n      jump\t// out\n        /* \"#utility.yul\":13945:14203   */\n    tag_448:\n        /* \"#utility.yul\":14017:14018   */\n      0x00\n        /* \"#utility.yul\":14027:14140   */\n    tag_490:\n        /* \"#utility.yul\":14041:14047   */\n      dup4\n        /* \"#utility.yul\":14038:14039   */\n      dup2\n        /* \"#utility.yul\":14035:14048   */\n      lt\n        /* \"#utility.yul\":14027:14140   */\n      iszero\n      tag_492\n      jumpi\n        /* \"#utility.yul\":14117:14128   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":14111:14129   */\n      mload\n        /* \"#utility.yul\":14098:14109   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":14091:14130   */\n      mstore\n        /* \"#utility.yul\":14063:14065   */\n      0x20\n        /* \"#utility.yul\":14056:14066   */\n      add\n        /* \"#utility.yul\":14027:14140   */\n      jump(tag_490)\n    tag_492:\n        /* \"#utility.yul\":14158:14164   */\n      dup4\n        /* \"#utility.yul\":14155:14156   */\n      dup2\n        /* \"#utility.yul\":14152:14165   */\n      gt\n        /* \"#utility.yul\":14149:14151   */\n      iszero\n      tag_493\n      jumpi\n        /* \"#utility.yul\":14193:14194   */\n      0x00\n        /* \"#utility.yul\":14184:14190   */\n      dup5\n        /* \"#utility.yul\":14179:14182   */\n      dup5\n        /* \"#utility.yul\":14175:14191   */\n      add\n        /* \"#utility.yul\":14168:14195   */\n      mstore\n        /* \"#utility.yul\":14149:14151   */\n    tag_493:\n      pop\n        /* \"#utility.yul\":13998:14203   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14208:14344   */\n    tag_409:\n        /* \"#utility.yul\":14247:14250   */\n      0x00\n        /* \"#utility.yul\":14275:14280   */\n      dup2\n        /* \"#utility.yul\":14265:14267   */\n      tag_496\n      jumpi\n        /* \"#utility.yul\":14284:14302   */\n      tag_496\n      tag_480\n      jump\t// in\n    tag_496:\n      pop\n      not(0x00)\n        /* \"#utility.yul\":14320:14338   */\n      add\n      swap1\n        /* \"#utility.yul\":14255:14344   */\n      jump\t// out\n        /* \"#utility.yul\":14349:14476   */\n    tag_480:\n        /* \"#utility.yul\":14410:14420   */\n      0x4e487b71\n        /* \"#utility.yul\":14405:14408   */\n      0xe0\n        /* \"#utility.yul\":14401:14421   */\n      shl\n        /* \"#utility.yul\":14398:14399   */\n      0x00\n        /* \"#utility.yul\":14391:14422   */\n      mstore\n        /* \"#utility.yul\":14441:14445   */\n      0x11\n        /* \"#utility.yul\":14438:14439   */\n      0x04\n        /* \"#utility.yul\":14431:14446   */\n      mstore\n        /* \"#utility.yul\":14465:14469   */\n      0x24\n        /* \"#utility.yul\":14462:14463   */\n      0x00\n        /* \"#utility.yul\":14455:14470   */\n      revert\n        /* \"#utility.yul\":14481:14599   */\n    tag_424:\n        /* \"#utility.yul\":14567:14572   */\n      dup1\n        /* \"#utility.yul\":14560:14573   */\n      iszero\n        /* \"#utility.yul\":14553:14574   */\n      iszero\n        /* \"#utility.yul\":14546:14551   */\n      dup2\n        /* \"#utility.yul\":14543:14575   */\n      eq\n        /* \"#utility.yul\":14533:14535   */\n      tag_357\n      jumpi\n        /* \"#utility.yul\":14589:14590   */\n      0x00\n        /* \"#utility.yul\":14586:14587   */\n      dup1\n        /* \"#utility.yul\":14579:14591   */\n      revert\n\n    auxdata: 0xa264697066735822122099912042cfacd34a5750bd2693a5b603f78a6356342f1f70a1427cbd262cbd6564736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1517:11",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:11",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "78:358:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "88:16:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "103:1:11",
																"type": "",
																"value": "1"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nodeType": "YulTypedName",
																	"src": "92:7:11",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "113:16:11",
															"value": {
																"name": "power_1",
																"nodeType": "YulIdentifier",
																"src": "122:7:11"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "113:5:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "138:13:11",
															"value": {
																"name": "_base",
																"nodeType": "YulIdentifier",
																"src": "146:5:11"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "138:4:11"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "202:228:11",
																"statements": [
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "247:22:11",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "249:16:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "249:18:11"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "249:18:11"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "222:4:11"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "236:1:11",
																									"type": "",
																									"value": "0"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "232:3:11"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "232:6:11"
																						},
																						{
																							"name": "base",
																							"nodeType": "YulIdentifier",
																							"src": "240:4:11"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nodeType": "YulIdentifier",
																						"src": "228:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "228:17:11"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "219:2:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "219:27:11"
																		},
																		"nodeType": "YulIf",
																		"src": "216:2:11"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "308:29:11",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "310:25:11",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nodeType": "YulIdentifier",
																								"src": "323:5:11"
																							},
																							{
																								"name": "base",
																								"nodeType": "YulIdentifier",
																								"src": "330:4:11"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "319:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "319:16:11"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "310:5:11"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "289:8:11"
																				},
																				{
																					"name": "power_1",
																					"nodeType": "YulIdentifier",
																					"src": "299:7:11"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "285:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "285:22:11"
																		},
																		"nodeType": "YulIf",
																		"src": "282:2:11"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "350:23:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "362:4:11"
																				},
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "368:4:11"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nodeType": "YulIdentifier",
																				"src": "358:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "358:15:11"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nodeType": "YulIdentifier",
																				"src": "350:4:11"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "386:34:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "power_1",
																					"nodeType": "YulIdentifier",
																					"src": "402:7:11"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "411:8:11"
																				}
																			],
																			"functionName": {
																				"name": "shr",
																				"nodeType": "YulIdentifier",
																				"src": "398:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "398:22:11"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nodeType": "YulIdentifier",
																				"src": "386:8:11"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "171:8:11"
																	},
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "181:7:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "168:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "168:21:11"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "190:3:11",
																"statements": []
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "164:3:11",
																"statements": []
															},
															"src": "160:270:11"
														}
													]
												},
												"name": "checked_exp_helper",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_base",
														"nodeType": "YulTypedName",
														"src": "42:5:11",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "49:8:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "62:5:11",
														"type": ""
													},
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "69:4:11",
														"type": ""
													}
												],
												"src": "14:422:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:61:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:45:11",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "551:4:11"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "557:8:11"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nodeType": "YulIdentifier",
																	"src": "530:20:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "530:36:11"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "521:5:11"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "482:4:11",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "488:8:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "501:5:11",
														"type": ""
													}
												],
												"src": "441:131:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "636:747:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "674:52:11",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "688:10:11",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "697:1:11",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "688:5:11"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "711:5:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "656:8:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "649:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "649:16:11"
															},
															"nodeType": "YulIf",
															"src": "646:2:11"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "759:52:11",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "773:10:11",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "782:1:11",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "773:5:11"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "796:5:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "745:4:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "738:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "738:12:11"
															},
															"nodeType": "YulIf",
															"src": "735:2:11"
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "847:52:11",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "861:10:11",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "870:1:11",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "861:5:11"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "884:5:11"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "840:59:11",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "845:1:11",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "915:123:11",
																		"statements": [
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "950:22:11",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "952:16:11"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "952:18:11"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "952:18:11"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "935:8:11"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "945:3:11",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "932:2:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "932:17:11"
																				},
																				"nodeType": "YulIf",
																				"src": "929:2:11"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "985:25:11",
																				"value": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "998:8:11"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1008:1:11",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "994:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "994:16:11"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "985:5:11"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "1023:5:11"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "908:130:11",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "913:1:11",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nodeType": "YulIdentifier",
																"src": "827:4:11"
															},
															"nodeType": "YulSwitch",
															"src": "820:218:11"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1136:70:11",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1150:28:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "1163:4:11"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "1169:8:11"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nodeType": "YulIdentifier",
																				"src": "1159:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1159:19:11"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "1150:5:11"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "1191:5:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "1060:4:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1066:2:11",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "1057:2:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1057:12:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "1074:8:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1084:2:11",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "1071:2:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1071:16:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1053:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1053:35:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "1097:4:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1103:3:11",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "1094:2:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1094:13:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "1112:8:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1122:2:11",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "1109:2:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1109:16:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1090:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1090:36:11"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "1050:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1050:77:11"
															},
															"nodeType": "YulIf",
															"src": "1047:2:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1215:57:11",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "1257:4:11"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "1263:8:11"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nodeType": "YulIdentifier",
																	"src": "1238:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1238:34:11"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nodeType": "YulTypedName",
																	"src": "1219:7:11",
																	"type": ""
																},
																{
																	"name": "base_1",
																	"nodeType": "YulTypedName",
																	"src": "1228:6:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1317:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "1319:16:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1319:18:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1319:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "1287:7:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1304:1:11",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "1300:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1300:6:11"
																			},
																			{
																				"name": "base_1",
																				"nodeType": "YulIdentifier",
																				"src": "1308:6:11"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "1296:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1296:19:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1284:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1284:32:11"
															},
															"nodeType": "YulIf",
															"src": "1281:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1348:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "1361:7:11"
																	},
																	{
																		"name": "base_1",
																		"nodeType": "YulIdentifier",
																		"src": "1370:6:11"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "1357:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1357:20:11"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "1348:5:11"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "607:4:11",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "613:8:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "626:5:11",
														"type": ""
													}
												],
												"src": "577:806:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1420:95:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1437:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1444:3:11",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1449:10:11",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1440:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1440:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1430:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1430:31:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1430:31:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1477:1:11",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1480:4:11",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1470:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1470:15:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1470:15:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1501:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1504:4:11",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1494:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1494:15:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1494:15:11"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "1388:127:11"
											}
										]
									},
									"contents": "{\n    { }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}",
									"id": 11,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x12 PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH3 0x18 SWAP1 PUSH1 0xA PUSH3 0xA6 JUMP JUMPDEST PUSH1 0x5 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x7 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH8 0x16345785D8A0000 PUSH1 0x4 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0x187 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH3 0x9E JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH3 0x82 JUMPI PUSH3 0x82 PUSH3 0x171 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH3 0x90 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH3 0x62 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xB4 DUP4 DUP4 PUSH3 0xBB JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0xCC JUMPI POP PUSH1 0x1 PUSH3 0x16B JUMP JUMPDEST DUP2 PUSH3 0xDB JUMPI POP PUSH1 0x0 PUSH3 0x16B JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0xF4 JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0xFF JUMPI PUSH3 0x11F JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0x16B JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0x113 JUMPI PUSH3 0x113 PUSH3 0x171 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH3 0x16B JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0x144 JUMPI POP DUP2 DUP2 EXP PUSH3 0x16B JUMP JUMPDEST PUSH3 0x150 DUP4 DUP4 PUSH3 0x5D JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH3 0x167 JUMPI PUSH3 0x167 PUSH3 0x171 JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1F37 DUP1 PUSH3 0x197 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xC46ED45A GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xF0A3A97C GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF0A3A97C EQ PUSH2 0x688 JUMPI DUP1 PUSH4 0xF207564E EQ PUSH2 0x6BC JUMPI DUP1 PUSH4 0xF336EE3C EQ PUSH2 0x6DC JUMPI DUP1 PUSH4 0xF54C42D7 EQ PUSH2 0x6FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC46ED45A EQ PUSH2 0x56A JUMPI DUP1 PUSH4 0xCCAF237F EQ PUSH2 0x580 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x628 JUMPI DUP1 PUSH4 0xE6F091F9 EQ PUSH2 0x648 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9C623683 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x9C623683 EQ PUSH2 0x4A6 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x4C6 JUMPI DUP1 PUSH4 0xB22C376D EQ PUSH2 0x4DB JUMPI DUP1 PUSH4 0xB9888D89 EQ PUSH2 0x54A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x43E JUMPI DUP1 PUSH4 0x8F0D7E35 EQ PUSH2 0x45E JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x473 JUMPI DUP1 PUSH4 0x94B918DE EQ PUSH2 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D6EF310 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x3E16518F GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x3E16518F EQ PUSH2 0x367 JUMPI DUP1 PUSH4 0x4575624B EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0x75CA7603 EQ PUSH2 0x3E6 JUMPI DUP1 PUSH4 0x7AD226DC EQ PUSH2 0x41E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D6EF310 EQ PUSH2 0x2F1 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x311 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x248A55A1 GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x248A55A1 EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0x2AC5016F EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x2BA67100 EQ PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xF5544F EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x6602A48 EQ PUSH2 0x233 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B66 JUMP JUMPDEST PUSH2 0x71C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21E PUSH2 0x219 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA9 JUMP JUMPDEST PUSH2 0x77B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x24E CALLDATASIZE PUSH1 0x4 PUSH2 0x1B0B JUMP JUMPDEST PUSH2 0x7B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x26E CALLDATASIZE PUSH1 0x4 PUSH2 0x1B66 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A3 PUSH2 0x28E CALLDATASIZE PUSH1 0x4 PUSH2 0x1B66 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x22A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x2CC CALLDATASIZE PUSH1 0x4 PUSH2 0x1B66 JUMP JUMPDEST PUSH2 0x938 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x2EC CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0x949 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x30C CALLDATASIZE PUSH1 0x4 PUSH2 0x1B66 JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x32C CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0xA06 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A3 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0xA30 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x382 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AF1 JUMP JUMPDEST PUSH2 0xAB3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3CF PUSH2 0x3A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AF1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x22A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x406 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x22A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x439 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0xB02 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x7 SLOAD PUSH2 0x406 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0xD75 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21E PUSH2 0x48E CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0xDFA JUMP JUMPDEST PUSH2 0x1FC PUSH2 0x4A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B66 JUMP JUMPDEST PUSH2 0xE23 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x4C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0x1056 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A3 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x525 PUSH2 0x4F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AF1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP5 MSTORE SWAP2 ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x22A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x556 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x565 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0x127B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x576 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A3 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E8 PUSH2 0x59B CALLDATASIZE PUSH1 0x4 PUSH2 0x1B66 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 SWAP1 SWAP6 ADD SLOAD PUSH1 0xFF SWAP1 SWAP5 AND SWAP6 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 ISZERO ISZERO DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP5 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0x22A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x634 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x643 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0x1368 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x654 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21E PUSH2 0x663 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AF1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x694 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A3 PUSH32 0x3496E2E73C4D42B75D702E60D9E48102720B8691234415963A5A857B86425D07 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x6D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B66 JUMP JUMPDEST PUSH2 0x138D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x6F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BD1 JUMP JUMPDEST PUSH2 0x161B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x708 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x717 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AF1 JUMP JUMPDEST PUSH2 0x16BB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x727 DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x4 SWAP1 SWAP2 ADD SSTORE MLOAD PUSH32 0x651A9760985EDC53055BF2462CB4437B9BE3DE87AA3EECF2C05782E8B58EBA19 SWAP1 PUSH2 0x76F SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x7AC JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x3496E2E73C4D42B75D702E60D9E48102720B8691234415963A5A857B86425D07 PUSH2 0x7DC DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SWAP1 DUP2 ADD DUP6 SWAP1 SSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0xA0 SHL DUP6 ISZERO ISZERO MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND OR DUP3 OR SWAP1 SSTORE DUP5 SWAP1 PUSH4 0x95EA7B3 CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 NOT PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x872 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x886 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8AA SWAP2 SWAP1 PUSH2 0x1B4A JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8BD DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP6 SWAP1 SSTORE SWAP3 DUP4 ADD DUP5 SWAP1 SSTORE PUSH1 0x3 DUP4 ADD DUP5 SWAP1 SSTORE PUSH1 0x4 DUP4 ADD DUP5 SWAP1 SSTORE PUSH1 0x5 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x6 SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 SSTORE MLOAD DUP4 DUP2 MSTORE PUSH32 0xD0B153E02E23F4F21D020465B4DAC7B1114893D05DB395ED2511F879C3AC90B4 SWAP2 ADD PUSH2 0x76F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x943 DUP2 PUSH2 0x16E9 JUMP JUMPDEST POP PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x954 DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE PUSH1 0x9 SWAP1 SWAP2 ADD DUP4 MSTORE DUP2 DUP5 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE MLOAD SWAP2 DUP3 MSTORE PUSH32 0x34AEEFD5030BE05FE70EEBC8866D82F935A308EB9F334CBA88F5E3BEA1A0CAE8 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9C0 DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x4 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH32 0x827E8BFF9F46048F8351964D2C871D09E4F4231513CF2FCB786649C68732E24F SWAP1 PUSH2 0x76F SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xA21 DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH2 0xA2B DUP4 DUP4 PUSH2 0x16F3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xAA5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAAF DUP3 DUP3 PUSH2 0x1777 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x3496E2E73C4D42B75D702E60D9E48102720B8691234415963A5A857B86425D07 PUSH2 0xADD DUP2 PUSH2 0x16E9 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB0D DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xA2B JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE PUSH1 0x8 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 EQ PUSH2 0xBB2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A204E6F74207265676973746572 PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x32B2103337B9103A3434B99033B0B6B297 PUSH1 0x79 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP6 MSTORE PUSH1 0x1 SWAP1 SWAP4 MSTORE SWAP3 KECCAK256 SLOAD AND PUSH4 0xA9059CBB CALLER PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC43 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC67 SWAP2 SWAP1 PUSH2 0x1B4A JUMP JUMPDEST PUSH2 0xCBE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A20526566756E64206661696C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x3217 PUSH1 0xF1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE MLOAD PUSH32 0x21E12A7CAD0DA5928167E1084EA4D5FDF8D9AF66657A2543A9AC76A0CA081477 SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 DUP1 PUSH1 0x3 ADD SLOAD DUP2 PUSH1 0x6 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xD23 SWAP2 SWAP1 PUSH2 0x1E7F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE PUSH1 0x8 DUP5 ADD SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP2 SWAP1 SSTORE PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0xD6A SWAP1 DUP5 SWAP1 PUSH2 0x1E7F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD80 DUP2 PUSH2 0x16E9 JUMP JUMPDEST SELFBALANCE DUP1 ISZERO PUSH2 0xAAF JUMPI PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xDD4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDD9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA2B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1D13 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x9 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 EQ PUSH2 0xE5F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0x1 EQ PUSH2 0xEC0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A2047616D6520636C6F7365642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD SWAP2 ADD SLOAD GT PUSH2 0xEF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1D5A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x8 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0xF30 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1CCC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH2 0xF5F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1DA4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD CALLVALUE EQ PUSH2 0xFD8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A204D757374206D617463682072 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x32B3B4B9BA3930BA34B7B7103332B297 PUSH1 0x81 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALLVALUE SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1025 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x102A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x104B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1D13 JUMP JUMPDEST PUSH2 0xAAF DUP3 CALLER CALLVALUE PUSH2 0x17DC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1061 DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1272 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE PUSH1 0x7 ADD DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 SLOAD SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x557809284DA7314475B1582804AE28E5F1349EFC1FE970EA25D50FCE75EB4F43 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE PUSH1 0x8 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 EQ PUSH2 0x115C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A204E6F74207265676973746572 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x656420666F7220746869732067616D65 PUSH1 0x80 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x4 SLOAD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 SWAP3 SWAP2 DUP3 SWAP2 PUSH2 0x1183 SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST PUSH2 0x118D SWAP2 SWAP1 PUSH2 0x1E40 JUMP JUMPDEST PUSH2 0x1197 SWAP2 SWAP1 PUSH2 0x1E40 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x11B8 SWAP1 DUP4 SWAP1 PUSH2 0x1E7F JUMP JUMPDEST SWAP1 POP SELFBALANCE DUP2 DUP2 LT ISZERO PUSH2 0x11C7 JUMPI DUP1 SWAP2 POP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1214 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1219 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x123A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1D13 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE PUSH32 0x22427047E1A674A9AFF59700A2C8D00EA96E017DDF9236690BDEDF1F21F28D9D SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMPDEST PUSH2 0xA2B DUP4 PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1286 DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE PUSH1 0x9 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 EQ ISZERO PUSH2 0x1308 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A20416C72656164792073656174 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x32B217 PUSH1 0xE9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE PUSH1 0x9 SWAP1 SWAP2 ADD DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 SSTORE DUP1 MLOAD SWAP3 DUP4 MSTORE SWAP1 DUP3 ADD DUP6 SWAP1 MSTORE PUSH32 0x9F2DEEFFF0A36949D580CDD4BA9959B4A94786E786BAD5650001B58B625FBBB1 SWAP2 ADD PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1383 DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH2 0xA2B DUP4 DUP4 PUSH2 0x1777 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x9 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 EQ PUSH2 0x13C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0x1 EQ PUSH2 0x142A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A2047616D6520636C6F7365642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD SWAP2 ADD SLOAD GT PUSH2 0x1460 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1D5A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x8 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x149A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1CCC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH2 0x14C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1DA4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP5 MSTORE PUSH1 0x1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD AND PUSH4 0x23B872DD CALLER PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 MLOAD PUSH1 0xE0 DUP5 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x155A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x156E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1592 SWAP2 SWAP1 PUSH2 0x1B4A JUMP JUMPDEST PUSH2 0x15F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A204D75737420617070726F7665 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x103932B3B4B9BA3930BA34B7B7103332B297 PUSH1 0x71 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x1618 SWAP1 DUP3 SWAP1 CALLER SWAP1 PUSH2 0x17DC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1626 DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 0x6 DUP3 ADD DUP7 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD DUP12 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND OR SWAP1 SSTORE DUP2 ADD SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP4 ADD DUP7 SWAP1 SSTORE DUP3 SLOAD PUSH1 0xFF NOT AND DUP6 ISZERO ISZERO OR SWAP1 SWAP3 SSTORE MLOAD DUP8 DUP2 MSTORE PUSH32 0x9E5237C6A8BB45DF74799CF138EBDA4FED0574BED906DA41387ACDC4A3CBE3D8 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16C6 DUP2 PUSH2 0x16E9 JUMP JUMPDEST POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1618 DUP2 CALLER PUSH2 0x1888 JUMP JUMPDEST PUSH2 0x16FD DUP3 DUP3 PUSH2 0xDFA JUMP JUMPDEST PUSH2 0xAAF JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1733 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x1781 DUP3 DUP3 PUSH2 0xDFA JUMP JUMPDEST ISZERO PUSH2 0xAAF JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP1 DUP3 ADD DUP1 SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x1803 SWAP1 DUP5 SWAP1 PUSH2 0x1E28 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE PUSH1 0x8 DUP5 ADD SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x1 SWAP1 SSTORE PUSH1 0x6 DUP3 ADD DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1849 SWAP1 DUP5 SWAP1 PUSH2 0x1E28 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP5 DUP2 MSTORE CALLER SWAP1 PUSH31 0x7DC6AB80CC84C043B7B8D4FCAFC802187470087F7EA7FCCD2E17AECD0256A1 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH2 0x1892 DUP3 DUP3 PUSH2 0xDFA JUMP JUMPDEST PUSH2 0xAAF JUMPI PUSH2 0x18AA DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0x18EC JUMP JUMPDEST PUSH2 0x18B5 DUP4 PUSH1 0x20 PUSH2 0x18EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x18C6 SWAP3 SWAP2 SWAP1 PUSH2 0x1C24 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0xA9C SWAP2 PUSH1 0x4 ADD PUSH2 0x1C99 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x18FB DUP4 PUSH1 0x2 PUSH2 0x1E60 JUMP JUMPDEST PUSH2 0x1906 SWAP1 PUSH1 0x2 PUSH2 0x1E28 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x192C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1956 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x197F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x19BC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x19E0 DUP5 PUSH1 0x2 PUSH2 0x1E60 JUMP JUMPDEST PUSH2 0x19EB SWAP1 PUSH1 0x1 PUSH2 0x1E28 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1A7F JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x1A2D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1A51 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x1A78 DUP2 PUSH2 0x1EC6 JUMP JUMPDEST SWAP1 POP PUSH2 0x19EE JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x1ACE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA9C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1AEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B02 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1ACE DUP3 PUSH2 0x1AD5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B1F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1B28 DUP5 PUSH2 0x1AD5 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x1B3F DUP2 PUSH2 0x1EF3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B5B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1ACE DUP2 PUSH2 0x1EF3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B77 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B90 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1BA0 PUSH1 0x20 DUP5 ADD PUSH2 0x1AD5 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BBA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1ACE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1BE8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH2 0x1BFF PUSH1 0x40 DUP8 ADD PUSH2 0x1AD5 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0x1C16 DUP2 PUSH2 0x1EF3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x1C5C DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1E96 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x1C8D DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1E96 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1CB8 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1E96 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A20416C72656164792072656769 PUSH1 0x40 DUP3 ADD MSTORE PUSH7 0x39BA32B932B217 PUSH1 0xC9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A20556E61626C6520746F207472 PUSH1 0x40 DUP3 ADD MSTORE PUSH7 0x30B739B332B917 PUSH1 0xC9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A2047616D652066756C6C2E2020 PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x2A393C9030B3B0B4B717 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A2047616D65206E6F7420666F75 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x373217 PUSH1 0xE9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A20556E617574686F72697A6564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0xF9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1E3B JUMPI PUSH2 0x1E3B PUSH2 0x1EDD JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1E5B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1E7A JUMPI PUSH2 0x1E7A PUSH2 0x1EDD JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1E91 JUMPI PUSH2 0x1E91 PUSH2 0x1EDD JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1EB1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1E99 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1EC0 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1ED5 JUMPI PUSH2 0x1ED5 PUSH2 0x1EDD JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1618 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 SWAP2 KECCAK256 TIMESTAMP 0xCF 0xAC 0xD3 0x4A JUMPI POP 0xBD 0x26 SWAP4 0xA5 0xB6 SUB 0xF7 DUP11 PUSH4 0x56342F1F PUSH17 0xA1427CBD262CBD6564736F6C6343000804 STOP CALLER ",
							"sourceMap": "263:9609:10:-:0;;;1438:2;1412:28;;;;1506:23;;:2;:23;:::i;:::-;1483:46;;1597:119;;;;;;;;;-1:-1:-1;1621:5:10;:20;;719:10:5;-1:-1:-1;;;;;;1621:20:10;;;;;;;;1668:4;1651:14;:21;1682:12;:27;;;;;;;;;;263:9609;;14:422:11;103:1;146:5;103:1;160:270;181:7;171:8;168:21;160:270;;;240:4;236:1;232:6;228:17;222:4;219:27;216:2;;;249:18;;:::i;:::-;299:7;289:8;285:22;282:2;;;319:16;;;;282:2;398:22;;;;358:15;;;;160:270;;;164:3;78:358;;;;;:::o;441:131::-;501:5;530:36;557:8;551:4;530:36;:::i;:::-;521:45;511:61;-1:-1:-1;;;511:61:11:o;577:806::-;626:5;656:8;646:2;;-1:-1:-1;697:1:11;711:5;;646:2;745:4;735:2;;-1:-1:-1;782:1:11;796:5;;735:2;827:4;845:1;840:59;;;;913:1;908:130;;;;820:218;;840:59;870:1;861:10;;884:5;;;908:130;945:3;935:8;932:17;929:2;;;952:18;;:::i;:::-;-1:-1:-1;;1008:1:11;994:16;;1023:5;;820:218;;1122:2;1112:8;1109:16;1103:3;1097:4;1094:13;1090:36;1084:2;1074:8;1071:16;1066:2;1060:4;1057:12;1053:35;1050:77;1047:2;;;-1:-1:-1;1159:19:11;;;1191:5;;1047:2;1238:34;1263:8;1257:4;1238:34;:::i;:::-;1308:6;1304:1;1300:6;1296:19;1287:7;1284:32;1281:2;;;1319:18;;:::i;:::-;1357:20;;-1:-1:-1;636:747:11;;;;;:::o;1388:127::-;1449:10;1444:3;1440:20;1437:1;1430:31;1480:4;1477:1;1470:15;1504:4;1501:1;1494:15;1420:95;263:9609:10;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:14601:11",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:11",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "63:124:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "82:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "82:20:11"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "73:5:11"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "165:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "174:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "177:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "167:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "167:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "167:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "124:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "135:5:11"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "150:3:11",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "155:1:11",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "146:3:11"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "146:11:11"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "159:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "142:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "142:19:11"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "131:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "131:31:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "121:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "121:42:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "114:50:11"
															},
															"nodeType": "YulIf",
															"src": "111:2:11"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "42:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:11",
														"type": ""
													}
												],
												"src": "14:173:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "262:126:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "308:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "317:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "325:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "310:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "310:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "310:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "283:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "292:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "279:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "279:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "304:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "275:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "275:32:11"
															},
															"nodeType": "YulIf",
															"src": "272:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "343:39:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "372:9:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "353:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "353:29:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "343:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "228:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "239:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "251:6:11",
														"type": ""
													}
												],
												"src": "192:196:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "494:292:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "540:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "549:6:11"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "557:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "542:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "542:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "542:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "515:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "524:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "511:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "511:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "536:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "507:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "507:32:11"
															},
															"nodeType": "YulIf",
															"src": "504:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "575:39:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "604:9:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "585:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "585:29:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "575:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "623:42:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "650:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "661:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "646:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "646:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "633:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "633:32:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "623:6:11"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "674:45:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "704:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "715:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "700:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "700:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "687:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "687:32:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "678:5:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "750:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bool",
																	"nodeType": "YulIdentifier",
																	"src": "728:21:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "728:28:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "728:28:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "765:15:11",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "775:5:11"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "765:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "444:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "455:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "467:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "475:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "483:6:11",
														"type": ""
													}
												],
												"src": "393:393:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "869:177:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "915:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "924:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "932:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "917:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "917:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "917:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "890:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "899:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "886:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "886:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "911:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "882:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "882:32:11"
															},
															"nodeType": "YulIf",
															"src": "879:2:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "950:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "969:9:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "963:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "963:16:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "954:5:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1010:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bool",
																	"nodeType": "YulIdentifier",
																	"src": "988:21:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "988:28:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "988:28:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1025:15:11",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1035:5:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1025:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "835:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "846:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "858:6:11",
														"type": ""
													}
												],
												"src": "791:255:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1121:120:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1167:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1176:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1184:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1169:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1169:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1169:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1142:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1151:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1138:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1138:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1163:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1134:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1134:32:11"
															},
															"nodeType": "YulIf",
															"src": "1131:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1202:33:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1225:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1212:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1212:23:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1202:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1087:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1098:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1110:6:11",
														"type": ""
													}
												],
												"src": "1051:190:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1333:177:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1379:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1388:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1396:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1381:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1381:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1381:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1354:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1363:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1350:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1350:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1375:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1346:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1346:32:11"
															},
															"nodeType": "YulIf",
															"src": "1343:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1414:33:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1437:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1424:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1424:23:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1414:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1456:48:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1489:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1500:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1485:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1485:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1466:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1466:38:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1456:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1291:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1302:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1314:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1322:6:11",
														"type": ""
													}
												],
												"src": "1246:264:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1584:237:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1630:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1639:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1647:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1632:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1632:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1632:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1605:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1614:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1601:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1601:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1626:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1597:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1597:32:11"
															},
															"nodeType": "YulIf",
															"src": "1594:2:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1665:36:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1691:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1678:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1678:23:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1669:5:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1765:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1774:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1782:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1767:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1767:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1767:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1723:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1734:5:11"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1745:3:11",
																								"type": "",
																								"value": "224"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1750:10:11",
																								"type": "",
																								"value": "0xffffffff"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1741:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1741:20:11"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1730:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1730:32:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1720:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1720:43:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1713:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1713:51:11"
															},
															"nodeType": "YulIf",
															"src": "1710:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1800:15:11",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1810:5:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1800:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1550:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1561:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1573:6:11",
														"type": ""
													}
												],
												"src": "1515:306:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1896:120:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1942:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1951:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1959:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1944:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1944:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1944:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1917:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1926:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1913:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1913:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1938:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1909:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1909:32:11"
															},
															"nodeType": "YulIf",
															"src": "1906:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1977:33:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2000:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1987:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1987:23:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1977:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1862:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1873:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1885:6:11",
														"type": ""
													}
												],
												"src": "1826:190:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2108:177:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2154:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2163:6:11"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2171:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2156:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2156:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2156:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2129:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2138:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2125:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2125:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2150:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2121:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2121:32:11"
															},
															"nodeType": "YulIf",
															"src": "2118:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2189:33:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2212:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2199:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2199:23:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2189:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2231:48:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2264:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2275:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2260:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2260:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2241:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2241:38:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2231:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2066:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2077:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2089:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2097:6:11",
														"type": ""
													}
												],
												"src": "2021:264:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2425:396:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2472:26:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "2481:6:11"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "2489:6:11"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2474:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2474:22:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2474:22:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2446:7:11"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2455:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2442:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2442:23:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2467:3:11",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2438:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2438:33:11"
															},
															"nodeType": "YulIf",
															"src": "2435:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2507:33:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2530:9:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2517:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2517:23:11"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2507:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2549:42:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2576:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2587:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2572:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2572:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2559:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2559:32:11"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2549:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2600:48:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2633:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2644:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2629:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2629:18:11"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2610:18:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2610:38:11"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2600:6:11"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2657:42:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2684:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2695:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2680:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2680:18:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2667:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2667:32:11"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "2657:6:11"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2708:46:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2738:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2749:3:11",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2734:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2734:19:11"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2721:12:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2721:33:11"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2712:5:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2785:5:11"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bool",
																	"nodeType": "YulIdentifier",
																	"src": "2763:21:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "2763:28:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2763:28:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2800:15:11",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2810:5:11"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "2800:6:11"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256t_addresst_uint256t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2359:9:11",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2370:7:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2382:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2390:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2398:6:11",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "2406:6:11",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "2414:6:11",
														"type": ""
													}
												],
												"src": "2290:531:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3017:14:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3019:10:11",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "3026:3:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3019:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3001:3:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3009:3:11",
														"type": ""
													}
												],
												"src": "2826:205:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3425:397:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3442:3:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3447:25:11",
																		"type": "",
																		"value": "AccessControl: account "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3435:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3435:38:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3435:38:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3482:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3502:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3496:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3496:13:11"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "3486:6:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3544:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3552:4:11",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3540:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3540:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "3563:3:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3568:2:11",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3559:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3559:12:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3573:6:11"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "3518:21:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3518:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3518:62:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3589:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3603:3:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3608:6:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3599:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3599:16:11"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3593:2:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3635:2:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3639:2:11",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3631:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3631:11:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3644:19:11",
																		"type": "",
																		"value": " is missing role "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3624:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3624:40:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3624:40:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3673:29:11",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "3695:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3689:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3689:13:11"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "3677:8:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "3737:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3745:4:11",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3733:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3733:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3756:2:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3760:2:11",
																				"type": "",
																				"value": "40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3752:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3752:11:11"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "3765:8:11"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "3711:21:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3711:63:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3711:63:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3783:33:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3798:2:11"
																			},
																			{
																				"name": "length_1",
																				"nodeType": "YulIdentifier",
																				"src": "3802:8:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3794:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3794:17:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3813:2:11",
																		"type": "",
																		"value": "40"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3790:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3790:26:11"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3783:3:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3393:3:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3398:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3406:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3417:3:11",
														"type": ""
													}
												],
												"src": "3036:786:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3928:102:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3938:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3950:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3961:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3946:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3946:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3938:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3980:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3995:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4011:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4016:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4007:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4007:11:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4020:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4003:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4003:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3991:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3991:32:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3973:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3973:51:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3973:51:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3897:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3908:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3919:4:11",
														"type": ""
													}
												],
												"src": "3827:203:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4192:218:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4202:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4214:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4225:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4210:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4210:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4202:4:11"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4237:29:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4255:3:11",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4260:1:11",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "4251:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4251:11:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4264:1:11",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "4247:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4247:19:11"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4241:2:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4282:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4297:6:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4305:2:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4293:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4293:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4275:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4275:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4275:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4329:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4340:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4325:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4325:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "4349:6:11"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4357:2:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4345:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4345:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4318:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4318:43:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4318:43:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4381:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4392:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4377:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4377:18:11"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4397:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4370:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4370:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4370:34:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4145:9:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4156:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4164:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4172:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4183:4:11",
														"type": ""
													}
												],
												"src": "4035:375:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4629:145:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4639:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4651:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4662:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4647:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4647:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4639:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4681:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4696:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4712:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4717:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4708:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4708:11:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4721:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4704:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4704:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4692:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4692:32:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4674:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4674:51:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4674:51:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4745:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4756:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4741:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4741:18:11"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "4761:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4734:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4734:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4734:34:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_rational_115792089237316195423570985008687907853269984665640564039457584007913129639935_by_1__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4590:9:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4601:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4609:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4620:4:11",
														"type": ""
													}
												],
												"src": "4415:359:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4908:145:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4918:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4930:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4941:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4926:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4926:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4918:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4960:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4975:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4991:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4996:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4987:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4987:11:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5000:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4983:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4983:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4971:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4971:32:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4953:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "4953:51:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4953:51:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5024:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5035:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5020:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5020:18:11"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5040:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5013:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5013:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5013:34:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4869:9:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4880:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4888:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4899:4:11",
														"type": ""
													}
												],
												"src": "4779:274:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5153:92:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5163:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5175:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5186:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5171:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5171:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5163:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5205:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "5230:6:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "5223:6:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5223:14:11"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "5216:6:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5216:22:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5198:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5198:41:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5198:41:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5122:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5133:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5144:4:11",
														"type": ""
													}
												],
												"src": "5058:187:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5373:135:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5383:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5395:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5406:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5391:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5391:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5383:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5425:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "5450:6:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "5443:6:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5443:14:11"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "5436:6:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5436:22:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5418:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5418:41:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5418:41:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5479:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5490:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5475:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5475:18:11"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5495:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5468:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5468:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5468:34:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool_t_uint256__to_t_bool_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5334:9:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5345:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5353:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5364:4:11",
														"type": ""
													}
												],
												"src": "5250:258:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5776:380:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5786:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5798:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5809:3:11",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5794:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5794:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5786:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5829:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "5854:6:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "5847:6:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5847:14:11"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "5840:6:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5840:22:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5822:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5822:41:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5822:41:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5883:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5894:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5879:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5879:18:11"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5899:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5872:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5872:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5872:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5926:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5937:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5922:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5922:18:11"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "5942:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5915:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5915:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5915:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5969:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5980:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5965:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5965:18:11"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "5985:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5958:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "5958:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5958:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6012:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6023:3:11",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6008:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6008:19:11"
																	},
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "6029:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6001:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6001:35:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6001:35:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6056:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6067:3:11",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6052:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6052:19:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value5",
																				"nodeType": "YulIdentifier",
																				"src": "6077:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6093:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6098:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "6089:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6089:11:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6102:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "6085:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6085:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6073:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6073:32:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6045:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6045:61:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6045:61:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6126:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6137:3:11",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6122:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6122:19:11"
																	},
																	{
																		"name": "value6",
																		"nodeType": "YulIdentifier",
																		"src": "6143:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6115:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6115:35:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6115:35:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool_t_uint256_t_uint256_t_uint256_t_uint256_t_address_t_uint256__to_t_bool_t_uint256_t_uint256_t_uint256_t_uint256_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5697:9:11",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "5708:6:11",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "5716:6:11",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "5724:6:11",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "5732:6:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5740:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5748:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5756:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5767:4:11",
														"type": ""
													}
												],
												"src": "5513:643:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6262:76:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6272:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6284:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6295:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6280:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6280:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6272:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6314:9:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6325:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6307:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6307:25:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6307:25:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6231:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6242:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6253:4:11",
														"type": ""
													}
												],
												"src": "6161:177:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6509:204:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6519:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6531:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6542:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6527:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6527:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6519:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6561:9:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6576:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6592:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6597:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "6588:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6588:11:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6601:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "6584:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6584:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6572:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6572:32:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6554:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6554:51:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6554:51:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6625:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6636:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6621:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6621:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "6655:6:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "6648:6:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6648:14:11"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "6641:6:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6641:22:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6614:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6614:50:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6614:50:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6684:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6695:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6680:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6680:18:11"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "6700:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6673:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6673:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6673:34:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$1056_t_bool_t_uint256__to_t_address_t_bool_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6462:9:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "6473:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6481:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6489:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6500:4:11",
														"type": ""
													}
												],
												"src": "6343:370:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6839:262:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6856:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6867:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6849:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6849:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6849:21:11"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6879:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6899:6:11"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6893:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6893:13:11"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "6883:6:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6926:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6937:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6922:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6922:18:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6942:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6915:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6915:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6915:34:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6984:6:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6992:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6980:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6980:15:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7001:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7012:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6997:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6997:18:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7017:6:11"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "6958:21:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "6958:66:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6958:66:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7033:62:11",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7049:9:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "7068:6:11"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7076:2:11",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "7064:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7064:15:11"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7085:2:11",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "7081:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7081:7:11"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "7060:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7060:29:11"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7045:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7045:45:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7092:2:11",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7041:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7041:54:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7033:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6808:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6819:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6830:4:11",
														"type": ""
													}
												],
												"src": "6718:383:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7280:182:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7297:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7308:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7290:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7290:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7290:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7331:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7342:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7327:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7327:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7347:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7320:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7320:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7320:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7370:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7381:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7366:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7366:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7386:34:11",
																		"type": "",
																		"value": "Strings: hex length insufficient"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7359:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7359:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7359:62:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7430:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7442:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7453:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7438:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7438:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7430:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7257:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7271:4:11",
														"type": ""
													}
												],
												"src": "7106:356:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7641:182:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7658:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7669:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7651:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7651:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7651:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7692:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7703:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7688:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7688:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7708:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7681:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7681:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7681:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7731:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7742:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7727:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7727:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7747:34:11",
																		"type": "",
																		"value": "Trophy King Arcade: Game closed."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7720:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7720:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7720:62:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7791:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7803:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7814:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7799:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "7799:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7791:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3147508d713f5a0416c0b9397acc0c7db67afd004656b898ef9a7aadad32b0ba__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7618:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7632:4:11",
														"type": ""
													}
												],
												"src": "7467:356:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8002:229:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8019:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8030:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8012:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8012:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8012:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8053:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8064:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8049:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8049:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8069:2:11",
																		"type": "",
																		"value": "39"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8042:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8042:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8042:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8092:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8103:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8088:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8088:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8108:34:11",
																		"type": "",
																		"value": "Trophy King Arcade: Already regi"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8081:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8081:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8081:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8163:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8174:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8159:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8159:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8179:9:11",
																		"type": "",
																		"value": "stered."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8152:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8152:37:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8152:37:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8198:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8210:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8221:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8206:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8206:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8198:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_39f6ad3a7ba6df7f1bd7790fcaefdbe707fc60fa099bee994b9d93fd1123c24c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7979:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7993:4:11",
														"type": ""
													}
												],
												"src": "7828:403:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8410:240:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8427:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8438:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8420:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8420:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8420:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8461:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8472:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8457:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8457:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8477:2:11",
																		"type": "",
																		"value": "50"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8450:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8450:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8450:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8500:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8511:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8496:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8496:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8516:34:11",
																		"type": "",
																		"value": "Trophy King Arcade: Must approve"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8489:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8489:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8489:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8571:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8582:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8567:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8567:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8587:20:11",
																		"type": "",
																		"value": " registration fee."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8560:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8560:48:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8560:48:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8617:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8629:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8640:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8625:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8625:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8617:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_757df3aca1a1c0adbe7add59c897e665a7e972e40c26169ae2b9960374a84d83__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8387:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8401:4:11",
														"type": ""
													}
												],
												"src": "8236:414:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8829:225:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8846:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8857:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8839:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8839:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8839:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8880:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8891:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8876:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8876:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8896:2:11",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8869:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8869:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8869:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8919:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8930:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8915:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8915:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8935:34:11",
																		"type": "",
																		"value": "Trophy King Arcade: Already seat"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8908:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8908:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8908:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8990:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9001:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8986:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8986:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9006:5:11",
																		"type": "",
																		"value": "ed."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8979:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "8979:33:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8979:33:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9021:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9033:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9044:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9029:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9029:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9021:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_8c3de74f867a9f0113ab9f6165670a02e14fcdbe846e7e2cd68321bd2a24213a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8806:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8820:4:11",
														"type": ""
													}
												],
												"src": "8655:399:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9233:238:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9250:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9261:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9243:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9243:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9243:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9284:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9295:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9280:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9280:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9300:2:11",
																		"type": "",
																		"value": "48"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9273:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9273:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9273:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9323:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9334:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9319:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9319:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9339:34:11",
																		"type": "",
																		"value": "Trophy King Arcade: Not register"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9312:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9312:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9312:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9394:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9405:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9390:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9390:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9410:18:11",
																		"type": "",
																		"value": "ed for this game"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9383:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9383:46:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9383:46:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9438:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9450:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9461:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9446:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9446:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9438:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ae12d68cb90f20b0d133f70a3a8f97b96ec1725ea66930b92c795330ec4e1b2e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9210:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9224:4:11",
														"type": ""
													}
												],
												"src": "9059:412:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9650:229:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9667:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9678:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9660:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9660:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9660:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9701:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9712:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9697:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9697:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9717:2:11",
																		"type": "",
																		"value": "39"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9690:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9690:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9690:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9740:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9751:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9736:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9736:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9756:34:11",
																		"type": "",
																		"value": "Trophy King Arcade: Unable to tr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9729:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9729:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9729:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9811:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9822:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9807:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9807:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9827:9:11",
																		"type": "",
																		"value": "ansfer."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9800:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9800:37:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9800:37:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9846:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9858:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9869:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9854:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "9854:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9846:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baab7bb41e4b9169c526c16bbcbffefe20545b9868a1d3f2c8420ac42ec1aa91__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9627:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9641:4:11",
														"type": ""
													}
												],
												"src": "9476:403:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10058:238:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10075:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10086:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10068:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10068:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10068:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10109:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10120:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10105:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10105:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10125:2:11",
																		"type": "",
																		"value": "48"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10098:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10098:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10098:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10148:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10159:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10144:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10144:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10164:34:11",
																		"type": "",
																		"value": "Trophy King Arcade: Must match r"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10137:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10137:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10137:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10219:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10230:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10215:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10215:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10235:18:11",
																		"type": "",
																		"value": "egistration fee."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10208:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10208:46:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10208:46:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10263:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10275:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10286:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10271:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10271:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10263:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cb75b40a399681329a67f3d89d82402c347679ed34e9b8342ad54ec973c1d7b3__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10035:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10049:4:11",
														"type": ""
													}
												],
												"src": "9884:412:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10475:232:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10492:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10503:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10485:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10485:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10485:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10526:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10537:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10522:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10522:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10542:2:11",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10515:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10515:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10515:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10565:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10576:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10561:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10561:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10581:34:11",
																		"type": "",
																		"value": "Trophy King Arcade: Game full.  "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10554:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10554:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10554:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10636:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10647:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10632:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10632:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10652:12:11",
																		"type": "",
																		"value": "Try again."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10625:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10625:40:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10625:40:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10674:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10686:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10697:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10682:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10682:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10674:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d67db45e25e45128e972499cd5e2f048a2288ba2b56fc714cdb6f6fba6c95241__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10452:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10466:4:11",
														"type": ""
													}
												],
												"src": "10301:406:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10886:225:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10903:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10914:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10896:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10896:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10896:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10937:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10948:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10933:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10933:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10953:2:11",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10926:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10926:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10926:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10976:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10987:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10972:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10972:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10992:34:11",
																		"type": "",
																		"value": "Trophy King Arcade: Game not fou"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10965:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "10965:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10965:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11047:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11058:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11043:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11043:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11063:5:11",
																		"type": "",
																		"value": "nd."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11036:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11036:33:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11036:33:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11078:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11090:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11101:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11086:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11086:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11078:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_dc0f7ef317f79a478ce2f0f5bc392d176cd738d07b68b36645f9677e62b68e9f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10863:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10877:4:11",
														"type": ""
													}
												],
												"src": "10712:399:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11290:223:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11307:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11318:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11300:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11300:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11300:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11341:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11352:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11337:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11337:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11357:2:11",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11330:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11330:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11330:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11380:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11391:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11376:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11376:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11396:34:11",
																		"type": "",
																		"value": "Trophy King Arcade: Unauthorized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11369:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11369:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11369:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11451:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11462:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11447:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11447:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11467:3:11",
																		"type": "",
																		"value": "."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11440:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11440:31:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11440:31:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11480:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11492:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11503:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11488:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11488:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11480:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e58036a9a85e0ff3f290e73b4e692a530d20a26bcd7f7164c38ae84b13bd5f10__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11267:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11281:4:11",
														"type": ""
													}
												],
												"src": "11116:397:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11692:239:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11709:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11720:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11702:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11702:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11702:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11743:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11754:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11739:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11739:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11759:2:11",
																		"type": "",
																		"value": "49"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11732:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11732:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11732:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11782:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11793:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11778:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11778:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11798:34:11",
																		"type": "",
																		"value": "Trophy King Arcade: Not register"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11771:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11771:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11771:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11853:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11864:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11849:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11849:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11869:19:11",
																		"type": "",
																		"value": "ed for this game."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11842:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11842:47:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11842:47:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11898:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11910:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11921:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11906:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "11906:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11898:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e8476f6de5c6ff2c50776cc215cd09f73b5d88379dbf65821b397a78399f15ea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11669:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11683:4:11",
														"type": ""
													}
												],
												"src": "11518:413:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12110:224:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12127:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12138:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12120:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12120:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12120:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12161:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12172:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12157:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12157:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12177:2:11",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12150:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12150:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12150:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12200:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12211:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12196:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12196:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12216:34:11",
																		"type": "",
																		"value": "Trophy King Arcade: Refund faile"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12189:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12189:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12189:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12271:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12282:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12267:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12267:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12287:4:11",
																		"type": "",
																		"value": "d."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12260:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12260:32:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12260:32:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12301:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12313:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12324:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12309:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12309:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12301:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e85a8c2eacb2c795304c1ccf2f876604537ff8637a554b73c978582d5d39df6c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12087:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12101:4:11",
														"type": ""
													}
												],
												"src": "11936:398:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12513:237:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12530:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12541:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12523:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12523:21:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12523:21:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12564:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12575:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12560:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12560:18:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12580:2:11",
																		"type": "",
																		"value": "47"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12553:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12553:30:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12553:30:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12603:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12614:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12599:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12599:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12619:34:11",
																		"type": "",
																		"value": "AccessControl: can only renounce"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12592:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12592:62:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12592:62:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12674:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12685:2:11",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12670:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12670:18:11"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12690:17:11",
																		"type": "",
																		"value": " roles for self"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12663:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12663:45:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12663:45:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12717:27:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12729:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12740:3:11",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12725:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12725:19:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12717:4:11"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12490:9:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12504:4:11",
														"type": ""
													}
												],
												"src": "12339:411:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12856:76:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12866:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12878:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12889:2:11",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12874:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12874:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12866:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12908:9:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12919:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12901:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "12901:25:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12901:25:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12825:9:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12836:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12847:4:11",
														"type": ""
													}
												],
												"src": "12755:177:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13094:188:11",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13104:26:11",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13116:9:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13127:2:11",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13112:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13112:18:11"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13104:4:11"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13146:9:11"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13157:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13139:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13139:25:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13139:25:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13184:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13195:2:11",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13180:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13180:18:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "13204:6:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "13220:3:11",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "13225:1:11",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "13216:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "13216:11:11"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "13229:1:11",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "13212:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13212:19:11"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13200:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13200:32:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13173:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13173:60:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13173:60:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13253:9:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13264:2:11",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13249:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13249:18:11"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "13269:6:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13242:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13242:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13242:34:11"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13047:9:11",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "13058:6:11",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "13066:6:11",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13074:6:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13085:4:11",
														"type": ""
													}
												],
												"src": "12937:345:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13335:80:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13362:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "13364:16:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13364:18:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13364:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "13351:1:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "13358:1:11"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "13354:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13354:6:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "13348:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13348:13:11"
															},
															"nodeType": "YulIf",
															"src": "13345:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13393:16:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "13404:1:11"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "13407:1:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13400:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13400:9:11"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "13393:3:11"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "13318:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "13321:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "13327:3:11",
														"type": ""
													}
												],
												"src": "13287:128:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13466:171:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13497:111:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "13518:1:11"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "13525:3:11",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "13530:10:11",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "13521:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "13521:20:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "13511:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13511:31:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13511:31:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13562:1:11",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13565:4:11",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "13555:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13555:15:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13555:15:11"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "13590:1:11"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13593:4:11",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13583:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13583:15:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13583:15:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "13486:1:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "13479:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13479:9:11"
															},
															"nodeType": "YulIf",
															"src": "13476:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13617:14:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "13626:1:11"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "13629:1:11"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "13622:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13622:9:11"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "13617:1:11"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "13451:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "13454:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "13460:1:11",
														"type": ""
													}
												],
												"src": "13420:217:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13694:116:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13753:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "13755:16:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13755:18:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13755:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "13725:1:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "13718:6:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13718:9:11"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "13711:6:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13711:17:11"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "13733:1:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "13744:1:11",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "13740:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "13740:6:11"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "13748:1:11"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "13736:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13736:14:11"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "13730:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13730:21:11"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "13707:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13707:45:11"
															},
															"nodeType": "YulIf",
															"src": "13704:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13784:20:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "13799:1:11"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "13802:1:11"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "13795:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13795:9:11"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "13784:7:11"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "13673:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "13676:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "13682:7:11",
														"type": ""
													}
												],
												"src": "13642:168:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13864:76:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13886:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "13888:16:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13888:18:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13888:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "13880:1:11"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "13883:1:11"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "13877:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13877:8:11"
															},
															"nodeType": "YulIf",
															"src": "13874:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13917:17:11",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "13929:1:11"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "13932:1:11"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "13925:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "13925:9:11"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "13917:4:11"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "13846:1:11",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "13849:1:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "13855:4:11",
														"type": ""
													}
												],
												"src": "13815:125:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13998:205:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14008:10:11",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "14017:1:11",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "14012:1:11",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14077:63:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "14102:3:11"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "14107:1:11"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "14098:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "14098:11:11"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "14121:3:11"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "14126:1:11"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "14117:3:11"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "14117:11:11"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "14111:5:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "14111:18:11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "14091:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14091:39:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14091:39:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "14038:1:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "14041:6:11"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "14035:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "14035:13:11"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "14049:19:11",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "14051:15:11",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "14060:1:11"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14063:2:11",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "14056:3:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14056:10:11"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "14051:1:11"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "14031:3:11",
																"statements": []
															},
															"src": "14027:113:11"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14166:31:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "14179:3:11"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "14184:6:11"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "14175:3:11"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "14175:16:11"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14193:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "14168:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14168:27:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14168:27:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "14155:1:11"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "14158:6:11"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "14152:2:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "14152:13:11"
															},
															"nodeType": "YulIf",
															"src": "14149:2:11"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "13976:3:11",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "13981:3:11",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "13986:6:11",
														"type": ""
													}
												],
												"src": "13945:258:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14255:89:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14282:22:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "14284:16:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14284:18:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14284:18:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "14275:5:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "14268:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "14268:13:11"
															},
															"nodeType": "YulIf",
															"src": "14265:2:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14313:25:11",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "14324:5:11"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14335:1:11",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "14331:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14331:6:11"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14320:3:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "14320:18:11"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "14313:3:11"
																}
															]
														}
													]
												},
												"name": "decrement_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14237:5:11",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "14247:3:11",
														"type": ""
													}
												],
												"src": "14208:136:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14381:95:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14398:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14405:3:11",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14410:10:11",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "14401:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14401:20:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14391:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "14391:31:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14391:31:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14438:1:11",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14441:4:11",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14431:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "14431:15:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14431:15:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14462:1:11",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14465:4:11",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "14455:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "14455:15:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14455:15:11"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "14349:127:11"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14523:76:11",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "14577:16:11",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14586:1:11",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "14589:1:11",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "14579:6:11"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "14579:12:11"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "14579:12:11"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "14546:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "14567:5:11"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "14560:6:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "14560:13:11"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "14553:6:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "14553:21:11"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "14543:2:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14543:32:11"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "14536:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "14536:40:11"
															},
															"nodeType": "YulIf",
															"src": "14533:2:11"
														}
													]
												},
												"name": "validator_revert_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "14512:5:11",
														"type": ""
													}
												],
												"src": "14481:118:11"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_bool(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value1, value1) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let value := calldataload(add(headStart, 64))\n        validator_revert_bool(value)\n        value2 := value\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_addresst_uint256t_bool(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(value4, value4) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let value := calldataload(add(headStart, 128))\n        validator_revert_bool(value)\n        value4 := value\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_rational_115792089237316195423570985008687907853269984665640564039457584007913129639935_by_1__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bool_t_uint256__to_t_bool_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool_t_uint256_t_uint256_t_uint256_t_uint256_t_address_t_uint256__to_t_bool_t_uint256_t_uint256_t_uint256_t_uint256_t_address_t_uint256__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), and(value5, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 192), value6)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$1056_t_bool_t_uint256__to_t_address_t_bool_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3147508d713f5a0416c0b9397acc0c7db67afd004656b898ef9a7aadad32b0ba__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Trophy King Arcade: Game closed.\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_39f6ad3a7ba6df7f1bd7790fcaefdbe707fc60fa099bee994b9d93fd1123c24c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Trophy King Arcade: Already regi\")\n        mstore(add(headStart, 96), \"stered.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_757df3aca1a1c0adbe7add59c897e665a7e972e40c26169ae2b9960374a84d83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"Trophy King Arcade: Must approve\")\n        mstore(add(headStart, 96), \" registration fee.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8c3de74f867a9f0113ab9f6165670a02e14fcdbe846e7e2cd68321bd2a24213a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"Trophy King Arcade: Already seat\")\n        mstore(add(headStart, 96), \"ed.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ae12d68cb90f20b0d133f70a3a8f97b96ec1725ea66930b92c795330ec4e1b2e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 48)\n        mstore(add(headStart, 64), \"Trophy King Arcade: Not register\")\n        mstore(add(headStart, 96), \"ed for this game\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baab7bb41e4b9169c526c16bbcbffefe20545b9868a1d3f2c8420ac42ec1aa91__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Trophy King Arcade: Unable to tr\")\n        mstore(add(headStart, 96), \"ansfer.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cb75b40a399681329a67f3d89d82402c347679ed34e9b8342ad54ec973c1d7b3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 48)\n        mstore(add(headStart, 64), \"Trophy King Arcade: Must match r\")\n        mstore(add(headStart, 96), \"egistration fee.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d67db45e25e45128e972499cd5e2f048a2288ba2b56fc714cdb6f6fba6c95241__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"Trophy King Arcade: Game full.  \")\n        mstore(add(headStart, 96), \"Try again.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_dc0f7ef317f79a478ce2f0f5bc392d176cd738d07b68b36645f9677e62b68e9f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"Trophy King Arcade: Game not fou\")\n        mstore(add(headStart, 96), \"nd.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e58036a9a85e0ff3f290e73b4e692a530d20a26bcd7f7164c38ae84b13bd5f10__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Trophy King Arcade: Unauthorized\")\n        mstore(add(headStart, 96), \".\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e8476f6de5c6ff2c50776cc215cd09f73b5d88379dbf65821b397a78399f15ea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 49)\n        mstore(add(headStart, 64), \"Trophy King Arcade: Not register\")\n        mstore(add(headStart, 96), \"ed for this game.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e85a8c2eacb2c795304c1ccf2f876604537ff8637a554b73c978582d5d39df6c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"Trophy King Arcade: Refund faile\")\n        mstore(add(headStart, 96), \"d.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n}",
									"id": 11,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x102 JUMPI DUP1 PUSH4 0xC46ED45A GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xF0A3A97C GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xF0A3A97C EQ PUSH2 0x688 JUMPI DUP1 PUSH4 0xF207564E EQ PUSH2 0x6BC JUMPI DUP1 PUSH4 0xF336EE3C EQ PUSH2 0x6DC JUMPI DUP1 PUSH4 0xF54C42D7 EQ PUSH2 0x6FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC46ED45A EQ PUSH2 0x56A JUMPI DUP1 PUSH4 0xCCAF237F EQ PUSH2 0x580 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x628 JUMPI DUP1 PUSH4 0xE6F091F9 EQ PUSH2 0x648 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9C623683 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x9C623683 EQ PUSH2 0x4A6 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x4C6 JUMPI DUP1 PUSH4 0xB22C376D EQ PUSH2 0x4DB JUMPI DUP1 PUSH4 0xB9888D89 EQ PUSH2 0x54A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x43E JUMPI DUP1 PUSH4 0x8F0D7E35 EQ PUSH2 0x45E JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x473 JUMPI DUP1 PUSH4 0x94B918DE EQ PUSH2 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D6EF310 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x3E16518F GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x3E16518F EQ PUSH2 0x367 JUMPI DUP1 PUSH4 0x4575624B EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0x75CA7603 EQ PUSH2 0x3E6 JUMPI DUP1 PUSH4 0x7AD226DC EQ PUSH2 0x41E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2D6EF310 EQ PUSH2 0x2F1 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x311 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x331 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x248A55A1 GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x248A55A1 EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0x2AC5016F EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x2BA67100 EQ PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xF5544F EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x6602A48 EQ PUSH2 0x233 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B66 JUMP JUMPDEST PUSH2 0x71C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21E PUSH2 0x219 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BA9 JUMP JUMPDEST PUSH2 0x77B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x24E CALLDATASIZE PUSH1 0x4 PUSH2 0x1B0B JUMP JUMPDEST PUSH2 0x7B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x25F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x26E CALLDATASIZE PUSH1 0x4 PUSH2 0x1B66 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A3 PUSH2 0x28E CALLDATASIZE PUSH1 0x4 PUSH2 0x1B66 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x22A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x2CC CALLDATASIZE PUSH1 0x4 PUSH2 0x1B66 JUMP JUMPDEST PUSH2 0x938 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x2EC CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0x949 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x30C CALLDATASIZE PUSH1 0x4 PUSH2 0x1B66 JUMP JUMPDEST PUSH2 0x9B5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x32C CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0xA06 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A3 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0xA30 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x382 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AF1 JUMP JUMPDEST PUSH2 0xAB3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3CF PUSH2 0x3A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AF1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP2 DIV PUSH1 0xFF AND SWAP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x22A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x406 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x22A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x439 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0xB02 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x7 SLOAD PUSH2 0x406 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0xD75 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21E PUSH2 0x48E CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0xDFA JUMP JUMPDEST PUSH2 0x1FC PUSH2 0x4A1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B66 JUMP JUMPDEST PUSH2 0xE23 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x4C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0x1056 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A3 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x525 PUSH2 0x4F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AF1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP5 MSTORE SWAP2 ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x22A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x556 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x565 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0x127B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x576 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A3 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E8 PUSH2 0x59B CALLDATASIZE PUSH1 0x4 PUSH2 0x1B66 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 SWAP1 SWAP6 ADD SLOAD PUSH1 0xFF SWAP1 SWAP5 AND SWAP6 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 ISZERO ISZERO DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP5 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0x22A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x634 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x643 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0x1368 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x654 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21E PUSH2 0x663 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AF1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x694 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A3 PUSH32 0x3496E2E73C4D42B75D702E60D9E48102720B8691234415963A5A857B86425D07 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x6D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B66 JUMP JUMPDEST PUSH2 0x138D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x6F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1BD1 JUMP JUMPDEST PUSH2 0x161B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x708 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x717 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AF1 JUMP JUMPDEST PUSH2 0x16BB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x727 DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x4 SWAP1 SWAP2 ADD SSTORE MLOAD PUSH32 0x651A9760985EDC53055BF2462CB4437B9BE3DE87AA3EECF2C05782E8B58EBA19 SWAP1 PUSH2 0x76F SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x7AC JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x3496E2E73C4D42B75D702E60D9E48102720B8691234415963A5A857B86425D07 PUSH2 0x7DC DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SWAP1 DUP2 ADD DUP6 SWAP1 SSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0xA0 SHL DUP6 ISZERO ISZERO MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND OR DUP3 OR SWAP1 SSTORE DUP5 SWAP1 PUSH4 0x95EA7B3 CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 NOT PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x872 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x886 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8AA SWAP2 SWAP1 PUSH2 0x1B4A JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8BD DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP6 SWAP1 SSTORE SWAP3 DUP4 ADD DUP5 SWAP1 SSTORE PUSH1 0x3 DUP4 ADD DUP5 SWAP1 SSTORE PUSH1 0x4 DUP4 ADD DUP5 SWAP1 SSTORE PUSH1 0x5 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x6 SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 SSTORE MLOAD DUP4 DUP2 MSTORE PUSH32 0xD0B153E02E23F4F21D020465B4DAC7B1114893D05DB395ED2511F879C3AC90B4 SWAP2 ADD PUSH2 0x76F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x943 DUP2 PUSH2 0x16E9 JUMP JUMPDEST POP PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x954 DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE PUSH1 0x9 SWAP1 SWAP2 ADD DUP4 MSTORE DUP2 DUP5 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE MLOAD SWAP2 DUP3 MSTORE PUSH32 0x34AEEFD5030BE05FE70EEBC8866D82F935A308EB9F334CBA88F5E3BEA1A0CAE8 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9C0 DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x4 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH32 0x827E8BFF9F46048F8351964D2C871D09E4F4231513CF2FCB786649C68732E24F SWAP1 PUSH2 0x76F SWAP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xA21 DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH2 0xA2B DUP4 DUP4 PUSH2 0x16F3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xAA5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAAF DUP3 DUP3 PUSH2 0x1777 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x3496E2E73C4D42B75D702E60D9E48102720B8691234415963A5A857B86425D07 PUSH2 0xADD DUP2 PUSH2 0x16E9 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB0D DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xA2B JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE PUSH1 0x8 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 EQ PUSH2 0xBB2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A204E6F74207265676973746572 PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x32B2103337B9103A3434B99033B0B6B297 PUSH1 0x79 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP6 MSTORE PUSH1 0x1 SWAP1 SWAP4 MSTORE SWAP3 KECCAK256 SLOAD AND PUSH4 0xA9059CBB CALLER PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC43 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC67 SWAP2 SWAP1 PUSH2 0x1B4A JUMP JUMPDEST PUSH2 0xCBE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A20526566756E64206661696C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x3217 PUSH1 0xF1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE MLOAD PUSH32 0x21E12A7CAD0DA5928167E1084EA4D5FDF8D9AF66657A2543A9AC76A0CA081477 SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 DUP1 PUSH1 0x3 ADD SLOAD DUP2 PUSH1 0x6 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xD23 SWAP2 SWAP1 PUSH2 0x1E7F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 SWAP1 SSTORE PUSH1 0x8 DUP5 ADD SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP2 SWAP1 SSTORE PUSH1 0x1 DUP1 DUP4 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0xD6A SWAP1 DUP5 SWAP1 PUSH2 0x1E7F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD80 DUP2 PUSH2 0x16E9 JUMP JUMPDEST SELFBALANCE DUP1 ISZERO PUSH2 0xAAF JUMPI PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xDD4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDD9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA2B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1D13 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x9 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 EQ PUSH2 0xE5F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0x1 EQ PUSH2 0xEC0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A2047616D6520636C6F7365642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD SWAP2 ADD SLOAD GT PUSH2 0xEF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1D5A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x8 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0xF30 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1CCC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH2 0xF5F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1DA4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD CALLVALUE EQ PUSH2 0xFD8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A204D757374206D617463682072 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x32B3B4B9BA3930BA34B7B7103332B297 PUSH1 0x81 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALLVALUE SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1025 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x102A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x104B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1D13 JUMP JUMPDEST PUSH2 0xAAF DUP3 CALLER CALLVALUE PUSH2 0x17DC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1061 DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1272 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE PUSH1 0x7 ADD DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 SLOAD SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x557809284DA7314475B1582804AE28E5F1349EFC1FE970EA25D50FCE75EB4F43 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE PUSH1 0x8 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 EQ PUSH2 0x115C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A204E6F74207265676973746572 PUSH1 0x44 DUP3 ADD MSTORE PUSH16 0x656420666F7220746869732067616D65 PUSH1 0x80 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x4 SLOAD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP1 SWAP3 SWAP2 DUP3 SWAP2 PUSH2 0x1183 SWAP2 SWAP1 PUSH2 0x1E60 JUMP JUMPDEST PUSH2 0x118D SWAP2 SWAP1 PUSH2 0x1E40 JUMP JUMPDEST PUSH2 0x1197 SWAP2 SWAP1 PUSH2 0x1E40 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x6 ADD SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x11B8 SWAP1 DUP4 SWAP1 PUSH2 0x1E7F JUMP JUMPDEST SWAP1 POP SELFBALANCE DUP2 DUP2 LT ISZERO PUSH2 0x11C7 JUMPI DUP1 SWAP2 POP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1214 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1219 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x123A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1D13 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE PUSH32 0x22427047E1A674A9AFF59700A2C8D00EA96E017DDF9236690BDEDF1F21F28D9D SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMPDEST PUSH2 0xA2B DUP4 PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1286 DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE PUSH1 0x9 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 EQ ISZERO PUSH2 0x1308 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A20416C72656164792073656174 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x32B217 PUSH1 0xE9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP1 DUP6 MSTORE PUSH1 0x9 SWAP1 SWAP2 ADD DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 SSTORE DUP1 MLOAD SWAP3 DUP4 MSTORE SWAP1 DUP3 ADD DUP6 SWAP1 MSTORE PUSH32 0x9F2DEEFFF0A36949D580CDD4BA9959B4A94786E786BAD5650001B58B625FBBB1 SWAP2 ADD PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x1383 DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH2 0xA2B DUP4 DUP4 PUSH2 0x1777 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x9 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 EQ PUSH2 0x13C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x4 ADD SLOAD PUSH1 0x1 EQ PUSH2 0x142A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A2047616D6520636C6F7365642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD SWAP2 ADD SLOAD GT PUSH2 0x1460 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1D5A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x8 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x149A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1CCC JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH2 0x14C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA9C SWAP1 PUSH2 0x1DA4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP5 MSTORE PUSH1 0x1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD AND PUSH4 0x23B872DD CALLER PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 MLOAD PUSH1 0xE0 DUP5 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x155A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x156E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1592 SWAP2 SWAP1 PUSH2 0x1B4A JUMP JUMPDEST PUSH2 0x15F9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A204D75737420617070726F7665 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x103932B3B4B9BA3930BA34B7B7103332B297 PUSH1 0x71 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH2 0x1618 SWAP1 DUP3 SWAP1 CALLER SWAP1 PUSH2 0x17DC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1626 DUP2 PUSH2 0x16E9 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 0x6 DUP3 ADD DUP7 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD DUP12 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND OR SWAP1 SSTORE DUP2 ADD SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP4 ADD DUP7 SWAP1 SSTORE DUP3 SLOAD PUSH1 0xFF NOT AND DUP6 ISZERO ISZERO OR SWAP1 SWAP3 SSTORE MLOAD DUP8 DUP2 MSTORE PUSH32 0x9E5237C6A8BB45DF74799CF138EBDA4FED0574BED906DA41387ACDC4A3CBE3D8 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16C6 DUP2 PUSH2 0x16E9 JUMP JUMPDEST POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1618 DUP2 CALLER PUSH2 0x1888 JUMP JUMPDEST PUSH2 0x16FD DUP3 DUP3 PUSH2 0xDFA JUMP JUMPDEST PUSH2 0xAAF JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1733 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x1781 DUP3 DUP3 PUSH2 0xDFA JUMP JUMPDEST ISZERO PUSH2 0xAAF JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP1 DUP3 ADD DUP1 SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x1803 SWAP1 DUP5 SWAP1 PUSH2 0x1E28 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE PUSH1 0x8 DUP5 ADD SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH1 0x1 SWAP1 SSTORE PUSH1 0x6 DUP3 ADD DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1849 SWAP1 DUP5 SWAP1 PUSH2 0x1E28 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP5 DUP2 MSTORE CALLER SWAP1 PUSH31 0x7DC6AB80CC84C043B7B8D4FCAFC802187470087F7EA7FCCD2E17AECD0256A1 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH2 0x1892 DUP3 DUP3 PUSH2 0xDFA JUMP JUMPDEST PUSH2 0xAAF JUMPI PUSH2 0x18AA DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0x18EC JUMP JUMPDEST PUSH2 0x18B5 DUP4 PUSH1 0x20 PUSH2 0x18EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x18C6 SWAP3 SWAP2 SWAP1 PUSH2 0x1C24 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0xA9C SWAP2 PUSH1 0x4 ADD PUSH2 0x1C99 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x18FB DUP4 PUSH1 0x2 PUSH2 0x1E60 JUMP JUMPDEST PUSH2 0x1906 SWAP1 PUSH1 0x2 PUSH2 0x1E28 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x192C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1956 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x197F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x19BC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x19E0 DUP5 PUSH1 0x2 PUSH2 0x1E60 JUMP JUMPDEST PUSH2 0x19EB SWAP1 PUSH1 0x1 PUSH2 0x1E28 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1A7F JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x1A2D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1A51 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x1A78 DUP2 PUSH2 0x1EC6 JUMP JUMPDEST SWAP1 POP PUSH2 0x19EE JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x1ACE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA9C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1AEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B02 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1ACE DUP3 PUSH2 0x1AD5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B1F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1B28 DUP5 PUSH2 0x1AD5 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x1B3F DUP2 PUSH2 0x1EF3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B5B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1ACE DUP2 PUSH2 0x1EF3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B77 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B90 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1BA0 PUSH1 0x20 DUP5 ADD PUSH2 0x1AD5 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BBA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1ACE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1BE8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH2 0x1BFF PUSH1 0x40 DUP8 ADD PUSH2 0x1AD5 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH2 0x1C16 DUP2 PUSH2 0x1EF3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x1C5C DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1E96 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x1C8D DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1E96 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1CB8 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1E96 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A20416C72656164792072656769 PUSH1 0x40 DUP3 ADD MSTORE PUSH7 0x39BA32B932B217 PUSH1 0xC9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x27 SWAP1 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A20556E61626C6520746F207472 PUSH1 0x40 DUP3 ADD MSTORE PUSH7 0x30B739B332B917 PUSH1 0xC9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A2047616D652066756C6C2E2020 PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x2A393C9030B3B0B4B717 PUSH1 0xB1 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A2047616D65206E6F7420666F75 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x373217 PUSH1 0xE9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x21 SWAP1 DUP3 ADD MSTORE PUSH32 0x54726F706879204B696E67204172636164653A20556E617574686F72697A6564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0xF9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1E3B JUMPI PUSH2 0x1E3B PUSH2 0x1EDD JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1E5B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1E7A JUMPI PUSH2 0x1E7A PUSH2 0x1EDD JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1E91 JUMPI PUSH2 0x1E91 PUSH2 0x1EDD JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1EB1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1E99 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1EC0 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1ED5 JUMPI PUSH2 0x1ED5 PUSH2 0x1EDD JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1618 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 SWAP2 KECCAK256 TIMESTAMP 0xCF 0xAC 0xD3 0x4A JUMPI POP 0xBD 0x26 SWAP4 0xA5 0xB6 SUB 0xF7 DUP11 PUSH4 0x56342F1F PUSH17 0xA1427CBD262CBD6564736F6C6343000804 STOP CALLER ",
							"sourceMap": "263:9609:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4397:149;;;;;;;;;;-1:-1:-1;4397:149:10;;;;;:::i;:::-;;:::i;:::-;;2606:202:0;;;;;;;;;;-1:-1:-1;2606:202:0;;;;;:::i;:::-;;:::i;:::-;;;5223:14:11;;5216:22;5198:41;;5186:2;5171:18;2606:202:0;;;;;;;;2191:564:10;;;;;;;;;;-1:-1:-1;2191:564:10;;;;;:::i;:::-;;:::i;4176:149::-;;;;;;;;;;-1:-1:-1;4176:149:10;;;;;:::i;:::-;;:::i;4391:129:0:-;;;;;;;;;;-1:-1:-1;4391:129:0;;;;;:::i;:::-;4465:7;4491:12;;;;;;;;;;:22;;;;4391:129;;;;6307:25:11;;;6295:2;6280:18;4391:129:0;6262:76:11;8610:132:10;;;;;;;;;;-1:-1:-1;8610:132:10;;;;;:::i;:::-;;:::i;8359:179::-;;;;;;;;;;-1:-1:-1;8359:179:10;;;;;:::i;:::-;;:::i;3338:151::-;;;;;;;;;;-1:-1:-1;3338:151:10;;;;;:::i;:::-;;:::i;4770:145:0:-;;;;;;;;;;-1:-1:-1;4770:145:0;;;;;:::i;:::-;;:::i;1412:28:10:-;;;;;;;;;;;;;;;;5787:214:0;;;;;;;;;;-1:-1:-1;5787:214:0;;;;;:::i;:::-;;:::i;2831:149:10:-;;;;;;;;;;-1:-1:-1;2831:149:10;;;;;:::i;:::-;;:::i;3063:203::-;;;;;;;;;;-1:-1:-1;3063:203:10;;;;;:::i;:::-;-1:-1:-1;;;;;3163:35:10;3130:4;3163:35;;;:20;:35;;;;;;;;:42;;3207:51;;;-1:-1:-1;;;3163:42:10;;;;;;3063:203;;;;;5443:14:11;;5436:22;5418:41;;5490:2;5475:18;;5468:34;;;;5391:18;3063:203:10;5373:135:11;1536:27:10;;;;;;;;;;-1:-1:-1;1536:27:10;;;;-1:-1:-1;;;;;1536:27:10;;;;;;-1:-1:-1;;;;;3991:32:11;;;3973:51;;3961:2;3946:18;1536:27:10;3928:102:11;5332:692:10;;;;;;;;;;-1:-1:-1;5332:692:10;;;;;:::i;:::-;;:::i;1570:20::-;;;;;;;;;;-1:-1:-1;1570:20:10;;;;-1:-1:-1;;;;;1570:20:10;;;4971:289;;;;;;;;;;;;;:::i;2895:145:0:-;;;;;;;;;;-1:-1:-1;2895:145:0;;;;;:::i;:::-;;:::i;7421:866:10:-;;;;;;:::i;:::-;;:::i;9004:::-;;;;;;;;;;-1:-1:-1;9004:866:10;;;;;:::i;:::-;;:::i;2027:49:0:-;;;;;;;;;;-1:-1:-1;2027:49:0;2072:4;2027:49;;1295:59:10;;;;;;;;;;-1:-1:-1;1295:59:10;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1295:59:10;;;-1:-1:-1;;;1295:59:10;;;;;;;;;;;-1:-1:-1;;;;;6572:32:11;;;6554:51;;6648:14;;6641:22;6636:2;6621:18;;6614:50;6680:18;;;6673:34;6542:2;6527:18;1295:59:10;6509:204:11;4618:281:10;;;;;;;;;;-1:-1:-1;4618:281:10;;;;;:::i;:::-;;:::i;1447:29::-;;;;;;;;;;;;;;;;1361:44;;;;;;;;;;-1:-1:-1;1361:44:10;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1361:44:10;;;;;;;;;;5847:14:11;;5840:22;5822:41;;5894:2;5879:18;;5872:34;;;;5922:18;;;5915:34;;;;5980:2;5965:18;;5958:34;;;;6023:3;6008:19;;6001:35;-1:-1:-1;;;;;6073:32:11;6093:3;6052:19;;6045:61;6137:3;6122:19;;6115:35;5809:3;5794:19;1361:44:10;5776:380:11;5149:147:0;;;;;;;;;;-1:-1:-1;5149:147:0;;;;;:::i;:::-;;:::i;1788:136:10:-;;;;;;;;;;-1:-1:-1;1788:136:10;;;;;:::i;:::-;-1:-1:-1;;;;;1875:35:10;1852:4;1875:35;;;:20;:35;;;;;:42;-1:-1:-1;;;1875:42:10;;;;;1788:136;745:68;;;;;;;;;;;;786:27;745:68;;6504:845;;;;;;;;;;-1:-1:-1;6504:845:10;;;;;:::i;:::-;;:::i;3561:543::-;;;;;;;;;;-1:-1:-1;3561:543:10;;;;;:::i;:::-;;:::i;8814:118::-;;;;;;;;;;-1:-1:-1;8814:118:10;;;;;:::i;:::-;;:::i;4397:149::-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;4478:17:10::1;::::0;;;:8:::1;:17;::::0;;;;;;4505:1:::1;4478:24;::::0;;::::1;:28:::0;4522:17;::::1;::::0;::::1;::::0;4487:7;6307:25:11;;6295:2;6280:18;;6262:76;4522:17:10::1;;;;;;;;4397:149:::0;;:::o;2606:202:0:-;2691:4;-1:-1:-1;;;;;;2714:47:0;;-1:-1:-1;;;2714:47:0;;:87;;-1:-1:-1;;;;;;;;;;937:40:7;;;2765:36:0;2707:94;2606:202;-1:-1:-1;;2606:202:0:o;2191:564:10:-;786:27;2505:16:0;2516:4;2505:10;:16::i;:::-;-1:-1:-1;;;;;2319:35:10;::::1;;::::0;;;:20:::1;:35;::::0;;;;;;;:51;;::::1;:69:::0;;;2398:52;;-1:-1:-1;;;;;;2517:71:10;-1:-1:-1;;;2398:52:10;::::1;;;-1:-1:-1::0;;;;;;2517:71:10;;;::::1;::::0;;2319:35;;2598:56:::1;719:10:5::0;2598:150:10::1;::::0;-1:-1:-1;;;;;;2598:150:10::1;::::0;;;;;;-1:-1:-1;;;;;4692:32:11;;;2598:150:10::1;::::0;::::1;4674:51:11::0;-1:-1:-1;;4741:18:11;;;4734:34;4647:18;;2598:150:10::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2531:1:0;2191:564:10::0;;;;:::o;4176:149::-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;4266:17:10::1;::::0;;;:8:::1;:17;::::0;;;;;;;4259:24;;-1:-1:-1;;4259:24:10::1;::::0;;-1:-1:-1;4259:24:10;::::1;::::0;;;;;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;-1:-1:-1;;;;;;4259:24:10::1;::::0;;::::1;::::0;;::::1;::::0;;;;4299:19;6307:25:11;;;4299:19:10::1;::::0;6280:18:11;4299:19:10::1;6262:76:11::0;8610:132:10;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;-1:-1:-1;8708:14:10::1;:27:::0;8610:132::o;8359:179::-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;8494:1:10::1;8460:17:::0;;;:8:::1;:17;::::0;;;;;;;-1:-1:-1;;;;;8460:31:10;::::1;::::0;;;:23:::1;::::0;;::::1;:31:::0;;;;;:35;;;;8511:20;3973:51:11;;;8511:20:10::1;::::0;3946:18:11;8511:20:10::1;;;;;;;;8359:179:::0;;;:::o;3338:151::-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;3447:1:10::1;3420:17:::0;;;:8:::1;:17;::::0;;;;;:24:::1;;:28:::0;;;;3464:18;::::1;::::0;::::1;::::0;3429:7;6307:25:11;;6295:2;6280:18;;6262:76;4770:145:0;4465:7;4491:12;;;;;;;;;;:22;;;2505:16;2516:4;2505:10;:16::i;:::-;4883:25:::1;4894:4;4900:7;4883:10;:25::i;:::-;4770:145:::0;;;:::o;5787:214::-;-1:-1:-1;;;;;5882:23:0;;719:10:5;5882:23:0;5874:83;;;;-1:-1:-1;;;5874:83:0;;12541:2:11;5874:83:0;;;12523:21:11;12580:2;12560:18;;;12553:30;12619:34;12599:18;;;12592:62;-1:-1:-1;;;12670:18:11;;;12663:45;12725:19;;5874:83:0;;;;;;;;;5968:26;5980:4;5986:7;5968:11;:26::i;:::-;5787:214;;:::o;2831:149:10:-;786:27;2505:16:0;2516:4;2505:10;:16::i;:::-;-1:-1:-1;;;;;;2923:35:10::1;2968:5;2923:35:::0;;;:20:::1;:35;::::0;;;;:50;;-1:-1:-1;;;;2923:50:10::1;::::0;;2831:149::o;5332:692::-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;5431:17:10::1;::::0;;;:8:::1;:17;::::0;;;;:26;::::1;;5427:591;;5490:17;::::0;;;:8:::1;:17;::::0;;;;;;;-1:-1:-1;;;;;5490:30:10;::::1;::::0;;:22:::1;;:30:::0;;;;;;5524:1:::1;5490:35;5482:97;;;::::0;-1:-1:-1;;;5482:97:10;;11720:2:11;5482:97:10::1;::::0;::::1;11702:21:11::0;11759:2;11739:18;;;11732:30;11798:34;11778:18;;;11771:62;-1:-1:-1;;;11849:18:11;;;11842:47;11906:19;;5482:97:10::1;11692:239:11::0;5482:97:10::1;5594:19;5616:17:::0;;;:8:::1;:17;::::0;;;;;;;5678:15:::1;::::0;::::1;::::0;-1:-1:-1;;;;;5678:15:10;;::::1;5656:39:::0;;:20:::1;:39:::0;;;;;:52;::::1;:61;719:10:5::0;5732:19:10::1;::::0;::::1;::::0;5656:96:::1;::::0;-1:-1:-1;;;;;;5656:96:10::1;::::0;;;;;;-1:-1:-1;;;;;4692:32:11;;;5656:96:10::1;::::0;::::1;4674:51:11::0;4741:18;;;4734:34;4647:18;;5656:96:10::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5648:143;;;::::0;-1:-1:-1;;;5648:143:10;;12138:2:11;5648:143:10::1;::::0;::::1;12120:21:11::0;12177:2;12157:18;;;12150:30;12216:34;12196:18;;;12189:62;-1:-1:-1;;;12267:18:11;;;12260:32;12309:19;;5648:143:10::1;12110:224:11::0;5648:143:10::1;5835:19;::::0;::::1;::::0;5811:44:::1;::::0;;13139:25:11;;;-1:-1:-1;;;;;13200:32:11;;13195:2;13180:18;;13173:60;13249:18;;;13242:34;;;;5811:44:10;::::1;::::0;;;;13127:2:11;5811:44:10;;::::1;5887:2;:19;;;5870:2;:12;;;:37;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;;;;;;5922:14:10;::::1;5939:1;5922:14:::0;;;:6:::1;::::0;::::1;:14;::::0;;;;;;;:18;;;5954:7:::1;::::0;::::1;:15:::0;;;;;:19;;;6006:1:::1;5987:15:::0;;::::1;:20:::0;;6006:1;;5987:15;;:20:::1;::::0;6006:1;;5987:20:::1;:::i;:::-;::::0;;;-1:-1:-1;;;5332:692:10;;;:::o;4971:289::-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;5056:21:10::1;5092:11:::0;;5088:166:::1;;5138:5;::::0;:32:::1;::::0;5120:12:::1;::::0;-1:-1:-1;;;;;5138:5:10::1;::::0;5157:7;;5120:12;5138:32;5120:12;5138:32;5157:7;5138:5;:32:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5119:51;;;5192:7;5184:59;;;;-1:-1:-1::0;;;5184:59:10::1;;;;;;;:::i;2895:145:0:-:0;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:0;;;;;;;;;;;;;;;2895:145::o;7421:866:10:-;7485:17;;;;:8;:17;;;;;;;;7509:10;7485:35;;:23;;:35;;;;;;7524:1;7485:40;7477:86;;;;-1:-1:-1;;;7477:86:10;;;;;;;:::i;:::-;7581:17;;;;:8;:17;;;;;:24;;;7609:1;7581:29;7573:74;;;;-1:-1:-1;;;7573:74:10;;7669:2:11;7573:74:10;;;7651:21:11;;;7688:18;;;7681:30;7747:34;7727:18;;;7720:62;7799:18;;7573:74:10;7641:182:11;7573:74:10;7698:17;;;;:8;:17;;;;;;;;:30;;;;7665;;;:63;7657:118;;;;-1:-1:-1;;;7657:118:10;;;;;;;:::i;:::-;7793:17;;;;:8;:17;;;;;;;;7816:10;7793:34;;:22;;:34;;;;;;:39;7785:91;;;;-1:-1:-1;;;7785:91:10;;;;;;;:::i;:::-;7927:1;7894:17;;;:8;:17;;;;;;;;:30;;7886:82;;;;-1:-1:-1;;;7886:82:10;;;;;;;:::i;:::-;8000:17;;;;:8;:17;;;;;:34;;;7986:9;:49;7978:110;;;;-1:-1:-1;;;7978:110:10;;10086:2:11;7978:110:10;;;10068:21:11;10125:2;10105:18;;;10098:30;10164:34;10144:18;;;10137:62;-1:-1:-1;;;10215:18:11;;;10208:46;10271:19;;7978:110:10;10058:238:11;7978:110:10;8118:12;;:41;;8100:12;;-1:-1:-1;;;;;8118:12:10;;8144:9;;8100:12;8118:41;8100:12;8118:41;8144:9;8118:12;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8099:60;;;8177:7;8169:59;;;;-1:-1:-1;;;8169:59:10;;;;;;;:::i;:::-;8239:41;8249:7;8258:10;8270:9;8239;:41::i;9004:866::-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;9106:17:10::1;::::0;;;:8:::1;:17;::::0;;;;:26;::::1;;9102:733;;9166:17;::::0;;;:8:::1;:17;::::0;;;;;;;-1:-1:-1;;;;;9166:29:10;::::1;::::0;;:21:::1;;:29:::0;;;;;;;9162:34;;6307:25:11;;;9162:34:10::1;::::0;6280:18:11;9162:34:10::1;;;;;;;9219:17;::::0;;;:8:::1;:17;::::0;;;;;;;-1:-1:-1;;;;;9219:30:10;::::1;::::0;;:22:::1;;:30:::0;;;;;;9253:1:::1;9219:35;9211:96;;;::::0;-1:-1:-1;;;9211:96:10;;9261:2:11;9211:96:10::1;::::0;::::1;9243:21:11::0;9300:2;9280:18;;;9273:30;9339:34;9319:18;;;9312:62;-1:-1:-1;;;9390:18:11;;;9383:46;9446:19;;9211:96:10::1;9233:238:11::0;9211:96:10::1;9399:4;::::0;9374:14:::1;::::0;9322:18:::1;9344:17:::0;;;:8:::1;:17;::::0;;;;:27:::1;;::::0;9322:18;;9399:4;;;9344:44:::1;::::0;9374:14;9344:44:::1;:::i;:::-;9343:53;;;;:::i;:::-;:60;;;;:::i;:::-;9417:14;9434:17:::0;;;:8:::1;:17;::::0;;;;:27:::1;;::::0;9322:81;;-1:-1:-1;9417:14:10;9434:40:::1;::::0;9322:81;;9434:40:::1;:::i;:::-;9417:57:::0;-1:-1:-1;9515:21:10::1;9555:25:::0;;::::1;9551:89;;;9609:16;9600:25;;9551:89;9655:12;9673:6;-1:-1:-1::0;;;;;9673:11:10::1;9693:6;9673:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9654:51;;;9727:7;9719:59;;;;-1:-1:-1::0;;;9719:59:10::1;;;;;;;:::i;:::-;9810:14;::::0;6307:25:11;;;9810:14:10::1;::::0;6295:2:11;6280:18;9810:14:10::1;;;;;;;9102:733;;;;;9845:18;9855:7;9845:9;:18::i;4618:281::-:0;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;4726:17:10::1;::::0;;;:8:::1;:17;::::0;;;;;;;-1:-1:-1;;;;;4726:31:10;::::1;::::0;;:23:::1;;:31:::0;;;;;;4761:1:::1;4726:36;;4718:84;;;::::0;-1:-1:-1;;;4718:84:10;;8857:2:11;4718:84:10::1;::::0;::::1;8839:21:11::0;8896:2;8876:18;;;8869:30;8935:34;8915:18;;;8908:62;-1:-1:-1;;;8986:18:11;;;8979:33;9029:19;;4718:84:10::1;8829:225:11::0;4718:84:10::1;4813:17;::::0;;;:8:::1;:17;::::0;;;;;;;-1:-1:-1;;;;;4813:31:10;::::1;::::0;;;:23:::1;::::0;;::::1;:31:::0;;;;;;4847:1:::1;4813:35:::0;;4864:28;;4674:51:11;;;4741:18;;;4734:34;;;4864:28:10::1;::::0;4647:18:11;4864:28:10::1;4629:145:11::0;5149:147:0;4465:7;4491:12;;;;;;;;;;:22;;;2505:16;2516:4;2505:10;:16::i;:::-;5263:26:::1;5275:4;5281:7;5263:11;:26::i;6504:845:10:-:0;6564:17;;;;:8;:17;;;;;;;;6588:10;6564:35;;:23;;:35;;;;;;6603:1;6564:40;6556:86;;;;-1:-1:-1;;;6556:86:10;;;;;;;:::i;:::-;6660:17;;;;:8;:17;;;;;:24;;;6688:1;6660:29;6652:74;;;;-1:-1:-1;;;6652:74:10;;7669:2:11;6652:74:10;;;7651:21:11;;;7688:18;;;7681:30;7747:34;7727:18;;;7720:62;7799:18;;6652:74:10;7641:182:11;6652:74:10;6777:17;;;;:8;:17;;;;;;;;:30;;;;6744;;;:63;6736:118;;;;-1:-1:-1;;;6736:118:10;;;;;;;:::i;:::-;6872:17;;;;:8;:17;;;;;;;;6895:10;6872:34;;:22;;:34;;;;;;:39;6864:91;;;;-1:-1:-1;;;6864:91:10;;;;;;;:::i;:::-;7006:1;6973:17;;;:8;:17;;;;;;;;:30;;6965:82;;;;-1:-1:-1;;;6965:82:10;;;;;;;:::i;:::-;7065:54;7087:17;;;:8;:17;;;;;;;;:30;;;-1:-1:-1;;;;;7087:30:10;;;7065:54;;:20;:54;;;;;;:67;;:80;719:10:5;7175:17:10;;;;:8;:17;;;;;;;:34;;;7065:145;;;;;;-1:-1:-1;;;;;;7065:145:10;;;-1:-1:-1;;;;;4293:15:11;;;7065:145:10;;;4275:34:11;7168:4:10;4325:18:11;;;4318:43;4377:18;;;4370:34;4210:18;;7065:145:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7057:208;;;;-1:-1:-1;;;7057:208:10;;8438:2:11;7057:208:10;;;8420:21:11;8477:2;8457:18;;;8450:30;8516:34;8496:18;;;8489:62;-1:-1:-1;;;8567:18:11;;;8560:48;8625:19;;7057:208:10;8410:240:11;7057:208:10;7307:17;;;;:8;:17;;;;;:34;;;7276:66;;7286:7;;7295:10;;7276:9;:66::i;:::-;6504:845;:::o;3561:543::-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;3729:17:10::1;::::0;;;:8:::1;:17;::::0;;;;;;;3756:1:::1;3729:24;::::0;::::1;:28:::0;;;3767:27:::1;::::0;::::1;:31:::0;;;3808:34:::1;::::0;::::1;:53:::0;;;3871:30:::1;::::0;::::1;:45:::0;;-1:-1:-1;;;;;;3871:45:10::1;-1:-1:-1::0;;;;;3871:45:10;::::1;;::::0;;3926:30;::::1;:34:::0;;;;3970:30;;::::1;:45:::0;;;4025:37;;-1:-1:-1;;4025:37:10::1;::::0;::::1;;;::::0;;;4078:19;6307:25:11;;;4078:19:10::1;::::0;6280:18:11;4078:19:10::1;;;;;;;3561:543:::0;;;;;;:::o;8814:118::-;2072:4:0;2505:16;2072:4;2505:10;:16::i;:::-;-1:-1:-1;8902:12:10::1;:23:::0;;-1:-1:-1;;;;;;8902:23:10::1;-1:-1:-1::0;;;;;8902:23:10;;;::::1;::::0;;;::::1;::::0;;8814:118::o;3334:103:0:-;3400:30;3411:4;719:10:5;3400::0;:30::i;7244:233::-;7327:22;7335:4;7341:7;7327;:22::i;:::-;7322:149;;7365:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7365:29:0;;;;;;;;;:36;;-1:-1:-1;;7365:36:0;7397:4;7365:36;;;7447:12;719:10:5;;640:96;7447:12:0;-1:-1:-1;;;;;7420:40:0;7438:7;-1:-1:-1;;;;;7420:40:0;7432:4;7420:40;;;;;;;;;;7244:233;;:::o;7602:234::-;7685:22;7693:4;7699:7;7685;:22::i;:::-;7681:149;;;7755:5;7723:12;;;;;;;;;;;-1:-1:-1;;;;;7723:29:0;;;;;;;;;;:37;;-1:-1:-1;;7723:37:0;;;7779:40;719:10:5;;7723:12:0;;7779:40;;7755:5;7779:40;7602:234;;:::o;6097:335:10:-;6192:19;6214:17;;;:8;:17;;;;;6261:1;6242:15;;;:20;;6214:17;;6261:1;;6242:15;;6192:19;6242:20;;6261:1;;6242:20;:::i;:::-;;;;-1:-1:-1;;;;;;;6272:22:10;;;;;;:6;;;:22;;;;;;;;:31;;;6313:7;;;:23;;;;;6339:1;6313:27;;6350:12;;;:22;;6297:6;;6272:22;6350;;6297:6;;6350:22;:::i;:::-;;;;-1:-1:-1;;6396:29:10;;6307:25:11;;;6405:10:10;;6396:29;;6295:2:11;6280:18;6396:29:10;;;;;;;6097:335;;;;:::o;3718:492:0:-;3806:22;3814:4;3820:7;3806;:22::i;:::-;3801:403;;3989:41;4017:7;-1:-1:-1;;;;;3989:41:0;4027:2;3989:19;:41::i;:::-;4101:38;4129:4;4136:2;4101:19;:38::i;:::-;3896:265;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3896:265:0;;;;;;;;;;-1:-1:-1;;;3844:349:0;;;;;;;:::i;1588:441:6:-;1663:13;1688:19;1720:10;1724:6;1720:1;:10;:::i;:::-;:14;;1733:1;1720:14;:::i;:::-;1710:25;;;;;;-1:-1:-1;;;1710:25:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1710:25:6;;1688:47;;-1:-1:-1;;;1745:6:6;1752:1;1745:9;;;;;;-1:-1:-1;;;1745:9:6;;;;;;;;;;;;:15;-1:-1:-1;;;;;1745:15:6;;;;;;;;;-1:-1:-1;;;1770:6:6;1777:1;1770:9;;;;;;-1:-1:-1;;;1770:9:6;;;;;;;;;;;;:15;-1:-1:-1;;;;;1770:15:6;;;;;;;;-1:-1:-1;1800:9:6;1812:10;1816:6;1812:1;:10;:::i;:::-;:14;;1825:1;1812:14;:::i;:::-;1800:26;;1795:132;1832:1;1828;:5;1795:132;;;-1:-1:-1;;;1879:5:6;1887:3;1879:11;1866:25;;;;;-1:-1:-1;;;1866:25:6;;;;;;;;;;;;1854:6;1861:1;1854:9;;;;;;-1:-1:-1;;;1854:9:6;;;;;;;;;;;;:37;-1:-1:-1;;;;;1854:37:6;;;;;;;;-1:-1:-1;1915:1:6;1905:11;;;;;1835:3;;;:::i;:::-;;;1795:132;;;-1:-1:-1;1944:10:6;;1936:55;;;;-1:-1:-1;;;1936:55:6;;7308:2:11;1936:55:6;;;7290:21:11;;;7327:18;;;7320:30;7386:34;7366:18;;;7359:62;7438:18;;1936:55:6;7280:182:11;1936:55:6;2015:6;1588:441;-1:-1:-1;;;1588:441:6:o;14:173:11:-;82:20;;-1:-1:-1;;;;;131:31:11;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:196::-;251:6;304:2;292:9;283:7;279:23;275:32;272:2;;;325:6;317;310:22;272:2;353:29;372:9;353:29;:::i;393:393::-;467:6;475;483;536:2;524:9;515:7;511:23;507:32;504:2;;;557:6;549;542:22;504:2;585:29;604:9;585:29;:::i;:::-;575:39;;661:2;650:9;646:18;633:32;623:42;;715:2;704:9;700:18;687:32;728:28;750:5;728:28;:::i;:::-;775:5;765:15;;;494:292;;;;;:::o;791:255::-;858:6;911:2;899:9;890:7;886:23;882:32;879:2;;;932:6;924;917:22;879:2;969:9;963:16;988:28;1010:5;988:28;:::i;1051:190::-;1110:6;1163:2;1151:9;1142:7;1138:23;1134:32;1131:2;;;1184:6;1176;1169:22;1131:2;-1:-1:-1;1212:23:11;;1121:120;-1:-1:-1;1121:120:11:o;1246:264::-;1314:6;1322;1375:2;1363:9;1354:7;1350:23;1346:32;1343:2;;;1396:6;1388;1381:22;1343:2;1437:9;1424:23;1414:33;;1466:38;1500:2;1489:9;1485:18;1466:38;:::i;:::-;1456:48;;1333:177;;;;;:::o;1515:306::-;1573:6;1626:2;1614:9;1605:7;1601:23;1597:32;1594:2;;;1647:6;1639;1632:22;1594:2;1678:23;;-1:-1:-1;;;;;;1730:32:11;;1720:43;;1710:2;;1782:6;1774;1767:22;2290:531;2382:6;2390;2398;2406;2414;2467:3;2455:9;2446:7;2442:23;2438:33;2435:2;;;2489:6;2481;2474:22;2435:2;2530:9;2517:23;2507:33;;2587:2;2576:9;2572:18;2559:32;2549:42;;2610:38;2644:2;2633:9;2629:18;2610:38;:::i;:::-;2600:48;;2695:2;2684:9;2680:18;2667:32;2657:42;;2749:3;2738:9;2734:19;2721:33;2763:28;2785:5;2763:28;:::i;:::-;2810:5;2800:15;;;2425:396;;;;;;;;:::o;3036:786::-;3447:25;3442:3;3435:38;3417:3;3502:6;3496:13;3518:62;3573:6;3568:2;3563:3;3559:12;3552:4;3544:6;3540:17;3518:62;:::i;:::-;-1:-1:-1;;;3639:2:11;3599:16;;;3631:11;;;3624:40;3689:13;;3711:63;3689:13;3760:2;3752:11;;3745:4;3733:17;;3711:63;:::i;:::-;3794:17;3813:2;3790:26;;3425:397;-1:-1:-1;;;;3425:397:11:o;6718:383::-;6867:2;6856:9;6849:21;6830:4;6899:6;6893:13;6942:6;6937:2;6926:9;6922:18;6915:34;6958:66;7017:6;7012:2;7001:9;6997:18;6992:2;6984:6;6980:15;6958:66;:::i;:::-;7085:2;7064:15;-1:-1:-1;;7060:29:11;7045:45;;;;7092:2;7041:54;;6839:262;-1:-1:-1;;6839:262:11:o;7828:403::-;8030:2;8012:21;;;8069:2;8049:18;;;8042:30;8108:34;8103:2;8088:18;;8081:62;-1:-1:-1;;;8174:2:11;8159:18;;8152:37;8221:3;8206:19;;8002:229::o;9476:403::-;9678:2;9660:21;;;9717:2;9697:18;;;9690:30;9756:34;9751:2;9736:18;;9729:62;-1:-1:-1;;;9822:2:11;9807:18;;9800:37;9869:3;9854:19;;9650:229::o;10301:406::-;10503:2;10485:21;;;10542:2;10522:18;;;10515:30;10581:34;10576:2;10561:18;;10554:62;-1:-1:-1;;;10647:2:11;10632:18;;10625:40;10697:3;10682:19;;10475:232::o;10712:399::-;10914:2;10896:21;;;10953:2;10933:18;;;10926:30;10992:34;10987:2;10972:18;;10965:62;-1:-1:-1;;;11058:2:11;11043:18;;11036:33;11101:3;11086:19;;10886:225::o;11116:397::-;11318:2;11300:21;;;11357:2;11337:18;;;11330:30;11396:34;11391:2;11376:18;;11369:62;-1:-1:-1;;;11462:2:11;11447:18;;11440:31;11503:3;11488:19;;11290:223::o;13287:128::-;13327:3;13358:1;13354:6;13351:1;13348:13;13345:2;;;13364:18;;:::i;:::-;-1:-1:-1;13400:9:11;;13335:80::o;13420:217::-;13460:1;13486;13476:2;;-1:-1:-1;;;13511:31:11;;13565:4;13562:1;13555:15;13593:4;13518:1;13583:15;13476:2;-1:-1:-1;13622:9:11;;13466:171::o;13642:168::-;13682:7;13748:1;13744;13740:6;13736:14;13733:1;13730:21;13725:1;13718:9;13711:17;13707:45;13704:2;;;13755:18;;:::i;:::-;-1:-1:-1;13795:9:11;;13694:116::o;13815:125::-;13855:4;13883:1;13880;13877:8;13874:2;;;13888:18;;:::i;:::-;-1:-1:-1;13925:9:11;;13864:76::o;13945:258::-;14017:1;14027:113;14041:6;14038:1;14035:13;14027:113;;;14117:11;;;14111:18;14098:11;;;14091:39;14063:2;14056:10;14027:113;;;14158:6;14155:1;14152:13;14149:2;;;14193:1;14184:6;14179:3;14175:16;14168:27;14149:2;;13998:205;;;:::o;14208:136::-;14247:3;14275:5;14265:2;;14284:18;;:::i;:::-;-1:-1:-1;;;14320:18:11;;14255:89::o;14349:127::-;14410:10;14405:3;14401:20;14398:1;14391:31;14441:4;14438:1;14431:15;14465:4;14462:1;14455:15;14481:118;14567:5;14560:13;14553:21;14546:5;14543:32;14533:2;;14589:1;14586;14579:12"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1598200",
								"executionCost": "103704",
								"totalCost": "1701904"
							},
							"external": {
								"DEFAULT_ADMIN_ROLE()": "262",
								"TREASURER_ROLE()": "239",
								"acceptedArcadeTokens(address)": "2239",
								"addArcadeToken(address,uint256,bool)": "infinite",
								"closeGame(uint256)": "infinite",
								"createGame(uint256,uint256,address,uint256,bool)": "infinite",
								"decimals()": "1085",
								"deleteGame(uint256)": "infinite",
								"fee_percentage()": "1040",
								"gameData(uint256)": "6281",
								"getRoleAdmin(bytes32)": "1215",
								"getStablecoin(address)": "2178",
								"grantRole(bytes32,address)": "infinite",
								"hasRole(bytes32,address)": "1441",
								"isAccepted(address)": "1366",
								"market_maker()": "1126",
								"openGame(uint256)": "infinite",
								"owner()": "1083",
								"placePlayer(uint256,address)": "infinite",
								"reconcile()": "infinite",
								"refund(uint256,address)": "infinite",
								"register(uint256)": "infinite",
								"removeArcadeToken(address)": "infinite",
								"removePlayer(uint256,address)": "infinite",
								"renounceRole(bytes32,address)": "24407",
								"revokeRole(bytes32,address)": "infinite",
								"setArcadeFeePercentage(uint256)": "infinite",
								"setMarketMaker(address)": "infinite",
								"setWinner(uint256,address)": "infinite",
								"supportsInterface(bytes4)": "495",
								"swap(uint256)": "infinite"
							},
							"internal": {
								"_register(uint256,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 263,
									"end": 9872,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 263,
									"end": 9872,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 263,
									"end": 9872,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1438,
									"end": 1440,
									"name": "PUSH",
									"source": 10,
									"value": "12"
								},
								{
									"begin": 1412,
									"end": 1440,
									"name": "PUSH",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 1412,
									"end": 1440,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1412,
									"end": 1440,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1412,
									"end": 1440,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 1506,
									"end": 1529,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1506,
									"end": 1529,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1506,
									"end": 1508,
									"name": "PUSH",
									"source": 10,
									"value": "A"
								},
								{
									"begin": 1506,
									"end": 1529,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 1506,
									"end": 1529,
									"name": "JUMP",
									"source": 10,
									"value": "[in]"
								},
								{
									"begin": 1506,
									"end": 1529,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1506,
									"end": 1529,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1483,
									"end": 1529,
									"name": "PUSH",
									"source": 10,
									"value": "5"
								},
								{
									"begin": 1483,
									"end": 1529,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 1597,
									"end": 1716,
									"name": "CALLVALUE",
									"source": 10
								},
								{
									"begin": 1597,
									"end": 1716,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1597,
									"end": 1716,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1597,
									"end": 1716,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 1597,
									"end": 1716,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1597,
									"end": 1716,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1597,
									"end": 1716,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1597,
									"end": 1716,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1597,
									"end": 1716,
									"name": "tag",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 1597,
									"end": 1716,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1621,
									"end": 1626,
									"name": "PUSH",
									"source": 10,
									"value": "7"
								},
								{
									"begin": 1621,
									"end": 1641,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1621,
									"end": 1641,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1621,
									"end": 1641,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1621,
									"end": 1641,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1621,
									"end": 1641,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1621,
									"end": 1641,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1621,
									"end": 1641,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 1621,
									"end": 1641,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1621,
									"end": 1641,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1621,
									"end": 1641,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 1668,
									"end": 1672,
									"name": "PUSH",
									"source": 10,
									"value": "16345785D8A0000"
								},
								{
									"begin": 1651,
									"end": 1665,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 1651,
									"end": 1672,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 1682,
									"end": 1694,
									"name": "PUSH",
									"source": 10,
									"value": "6"
								},
								{
									"begin": 1682,
									"end": 1709,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1682,
									"end": 1709,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": 1682,
									"end": 1709,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1682,
									"end": 1709,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1682,
									"end": 1709,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 1682,
									"end": 1709,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1682,
									"end": 1709,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1682,
									"end": 1709,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 1682,
									"end": 1709,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1682,
									"end": 1709,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 263,
									"end": 9872,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "11"
								},
								{
									"begin": 263,
									"end": 9872,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 14,
									"end": 436,
									"name": "tag",
									"source": 11,
									"value": "12"
								},
								{
									"begin": 14,
									"end": 436,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 151,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 103,
									"end": 104,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 160,
									"end": 430,
									"name": "tag",
									"source": 11,
									"value": "14"
								},
								{
									"begin": 160,
									"end": 430,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 181,
									"end": 188,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 171,
									"end": 179,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 168,
									"end": 189,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 160,
									"end": 430,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 160,
									"end": 430,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 160,
									"end": 430,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 240,
									"end": 244,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 236,
									"end": 237,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 232,
									"end": 238,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 228,
									"end": 245,
									"name": "DIV",
									"source": 11
								},
								{
									"begin": 222,
									"end": 226,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 219,
									"end": 246,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 216,
									"end": 218,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 216,
									"end": 218,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 216,
									"end": 218,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 249,
									"end": 267,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 249,
									"end": 267,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "19"
								},
								{
									"begin": 249,
									"end": 267,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 249,
									"end": 267,
									"name": "tag",
									"source": 11,
									"value": "18"
								},
								{
									"begin": 249,
									"end": 267,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 299,
									"end": 306,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 289,
									"end": 297,
									"name": "DUP6",
									"source": 11
								},
								{
									"begin": 285,
									"end": 307,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 282,
									"end": 284,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 282,
									"end": 284,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 282,
									"end": 284,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 319,
									"end": 335,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 319,
									"end": 335,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 319,
									"end": 335,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 319,
									"end": 335,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 282,
									"end": 284,
									"name": "tag",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 282,
									"end": 284,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 398,
									"end": 420,
									"name": "SWAP4",
									"source": 11
								},
								{
									"begin": 398,
									"end": 420,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 398,
									"end": 420,
									"name": "SHR",
									"source": 11
								},
								{
									"begin": 398,
									"end": 420,
									"name": "SWAP4",
									"source": 11
								},
								{
									"begin": 358,
									"end": 373,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 358,
									"end": 373,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 358,
									"end": 373,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 358,
									"end": 373,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 160,
									"end": 430,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "14"
								},
								{
									"begin": 160,
									"end": 430,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 160,
									"end": 430,
									"name": "tag",
									"source": 11,
									"value": "16"
								},
								{
									"begin": 160,
									"end": 430,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 164,
									"end": 167,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 78,
									"end": 436,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 78,
									"end": 436,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 78,
									"end": 436,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 78,
									"end": 436,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 78,
									"end": 436,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 78,
									"end": 436,
									"name": "JUMP",
									"source": 11,
									"value": "[out]"
								},
								{
									"begin": 441,
									"end": 572,
									"name": "tag",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 441,
									"end": 572,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 501,
									"end": 506,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 566,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 557,
									"end": 565,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 551,
									"end": 555,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 530,
									"end": 566,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "23"
								},
								{
									"begin": 530,
									"end": 566,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 530,
									"end": 566,
									"name": "tag",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 530,
									"end": 566,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 521,
									"end": 566,
									"name": "SWAP4",
									"source": 11
								},
								{
									"begin": 511,
									"end": 572,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 511,
									"end": 572,
									"name": "JUMP",
									"source": 11,
									"value": "[out]"
								},
								{
									"begin": 577,
									"end": 1383,
									"name": "tag",
									"source": 11,
									"value": "23"
								},
								{
									"begin": 577,
									"end": 1383,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 626,
									"end": 631,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 656,
									"end": 664,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 646,
									"end": 648,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "25"
								},
								{
									"begin": 646,
									"end": 648,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 697,
									"end": 698,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 711,
									"end": 716,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 711,
									"end": 716,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 646,
									"end": 648,
									"name": "tag",
									"source": 11,
									"value": "25"
								},
								{
									"begin": 646,
									"end": 648,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 745,
									"end": 749,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 735,
									"end": 737,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "26"
								},
								{
									"begin": 735,
									"end": 737,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 782,
									"end": 783,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 796,
									"end": 801,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 796,
									"end": 801,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 735,
									"end": 737,
									"name": "tag",
									"source": 11,
									"value": "26"
								},
								{
									"begin": 735,
									"end": 737,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 827,
									"end": 831,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 845,
									"end": 846,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 840,
									"end": 899,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 840,
									"end": 899,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 840,
									"end": 899,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "28"
								},
								{
									"begin": 840,
									"end": 899,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 913,
									"end": 914,
									"name": "PUSH",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 908,
									"end": 1038,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 908,
									"end": 1038,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 908,
									"end": 1038,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "29"
								},
								{
									"begin": 908,
									"end": 1038,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 820,
									"end": 1038,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "27"
								},
								{
									"begin": 820,
									"end": 1038,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 840,
									"end": 899,
									"name": "tag",
									"source": 11,
									"value": "28"
								},
								{
									"begin": 840,
									"end": 899,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 870,
									"end": 871,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 861,
									"end": 871,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 861,
									"end": 871,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 884,
									"end": 889,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 884,
									"end": 889,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 884,
									"end": 889,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 908,
									"end": 1038,
									"name": "tag",
									"source": 11,
									"value": "29"
								},
								{
									"begin": 908,
									"end": 1038,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 945,
									"end": 948,
									"name": "PUSH",
									"source": 11,
									"value": "FF"
								},
								{
									"begin": 935,
									"end": 943,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 932,
									"end": 949,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 929,
									"end": 931,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 929,
									"end": 931,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "31"
								},
								{
									"begin": 929,
									"end": 931,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 952,
									"end": 970,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "31"
								},
								{
									"begin": 952,
									"end": 970,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "19"
								},
								{
									"begin": 952,
									"end": 970,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 952,
									"end": 970,
									"name": "tag",
									"source": 11,
									"value": "31"
								},
								{
									"begin": 952,
									"end": 970,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1008,
									"end": 1009,
									"name": "PUSH",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 994,
									"end": 1010,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 994,
									"end": 1010,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 1023,
									"end": 1028,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 1023,
									"end": 1028,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 820,
									"end": 1038,
									"name": "tag",
									"source": 11,
									"value": "27"
								},
								{
									"begin": 820,
									"end": 1038,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 820,
									"end": 1038,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1122,
									"end": 1124,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 1112,
									"end": 1120,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 1109,
									"end": 1125,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 1103,
									"end": 1106,
									"name": "PUSH",
									"source": 11,
									"value": "133"
								},
								{
									"begin": 1097,
									"end": 1101,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 1094,
									"end": 1107,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 1090,
									"end": 1126,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 1084,
									"end": 1086,
									"name": "PUSH",
									"source": 11,
									"value": "4E"
								},
								{
									"begin": 1074,
									"end": 1082,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 1071,
									"end": 1087,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 1066,
									"end": 1068,
									"name": "PUSH",
									"source": 11,
									"value": "B"
								},
								{
									"begin": 1060,
									"end": 1064,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 1057,
									"end": 1069,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 1053,
									"end": 1088,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 1050,
									"end": 1127,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 1047,
									"end": 1049,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 1047,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "32"
								},
								{
									"begin": 1047,
									"end": 1049,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1159,
									"end": 1178,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1159,
									"end": 1178,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1159,
									"end": 1178,
									"name": "EXP",
									"source": 11
								},
								{
									"begin": 1191,
									"end": 1196,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 1191,
									"end": 1196,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1047,
									"end": 1049,
									"name": "tag",
									"source": 11,
									"value": "32"
								},
								{
									"begin": 1047,
									"end": 1049,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1238,
									"end": 1272,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "33"
								},
								{
									"begin": 1263,
									"end": 1271,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 1257,
									"end": 1261,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 1238,
									"end": 1272,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "12"
								},
								{
									"begin": 1238,
									"end": 1272,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 1238,
									"end": 1272,
									"name": "tag",
									"source": 11,
									"value": "33"
								},
								{
									"begin": 1238,
									"end": 1272,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1308,
									"end": 1314,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1304,
									"end": 1305,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1300,
									"end": 1306,
									"name": "NOT",
									"source": 11
								},
								{
									"begin": 1296,
									"end": 1315,
									"name": "DIV",
									"source": 11
								},
								{
									"begin": 1287,
									"end": 1294,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1284,
									"end": 1316,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 1281,
									"end": 1283,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 1281,
									"end": 1283,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "35"
								},
								{
									"begin": 1281,
									"end": 1283,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1319,
									"end": 1337,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "35"
								},
								{
									"begin": 1319,
									"end": 1337,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "19"
								},
								{
									"begin": 1319,
									"end": 1337,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 1319,
									"end": 1337,
									"name": "tag",
									"source": 11,
									"value": "35"
								},
								{
									"begin": 1319,
									"end": 1337,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1357,
									"end": 1377,
									"name": "MUL",
									"source": 11
								},
								{
									"begin": 1357,
									"end": 1377,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 636,
									"end": 1383,
									"name": "tag",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 636,
									"end": 1383,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 636,
									"end": 1383,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 636,
									"end": 1383,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 636,
									"end": 1383,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 636,
									"end": 1383,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 636,
									"end": 1383,
									"name": "JUMP",
									"source": 11,
									"value": "[out]"
								},
								{
									"begin": 1388,
									"end": 1515,
									"name": "tag",
									"source": 11,
									"value": "19"
								},
								{
									"begin": 1388,
									"end": 1515,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1449,
									"end": 1459,
									"name": "PUSH",
									"source": 11,
									"value": "4E487B71"
								},
								{
									"begin": 1444,
									"end": 1447,
									"name": "PUSH",
									"source": 11,
									"value": "E0"
								},
								{
									"begin": 1440,
									"end": 1460,
									"name": "SHL",
									"source": 11
								},
								{
									"begin": 1437,
									"end": 1438,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1430,
									"end": 1461,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1480,
									"end": 1484,
									"name": "PUSH",
									"source": 11,
									"value": "11"
								},
								{
									"begin": 1477,
									"end": 1478,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 1470,
									"end": 1485,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1504,
									"end": 1508,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 1501,
									"end": 1502,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1494,
									"end": 1509,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 1420,
									"end": 1515,
									"name": "tag",
									"source": 11,
									"value": "11"
								},
								{
									"begin": 1420,
									"end": 1515,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 263,
									"end": 9872,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 263,
									"end": 9872,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 263,
									"end": 9872,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 263,
									"end": 9872,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 263,
									"end": 9872,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 263,
									"end": 9872,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 263,
									"end": 9872,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122099912042cfacd34a5750bd2693a5b603f78a6356342f1f70a1427cbd262cbd6564736f6c63430008040033",
									".code": [
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "8DA5CB5B"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "C46ED45A"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "34"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "F0A3A97C"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "35"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "F0A3A97C"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "29"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "F207564E"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "F336EE3C"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "F54C42D7"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "tag",
											"source": 10,
											"value": "35"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "C46ED45A"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "CCAF237F"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "D547741F"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "E6F091F9"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "tag",
											"source": 10,
											"value": "34"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "9C623683"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "9C623683"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "A217FDDF"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "B22C376D"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "B9888D89"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "tag",
											"source": 10,
											"value": "36"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "8DA5CB5B"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "8F0D7E35"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "91D14854"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "19"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "94B918DE"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "tag",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "2D6EF310"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "37"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "3E16518F"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "38"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "3E16518F"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "4575624B"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "75CA7603"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "7AD226DC"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "tag",
											"source": 10,
											"value": "38"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "2D6EF310"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "2F2FF15D"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "313CE567"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "36568ABE"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "tag",
											"source": 10,
											"value": "37"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "248A55A1"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "248A55A1"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "248A9CA3"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "2AC5016F"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "2BA67100"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "tag",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "F5544F"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "1FFC9A7"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "6602A48"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "tag",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 263,
											"end": 9872,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "tag",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "tag",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "tag",
											"source": 10,
											"value": "42"
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "tag",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "STOP",
											"source": 10
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5223,
											"end": 5237,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5223,
											"end": 5237,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5216,
											"end": 5238,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5198,
											"end": 5239,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5198,
											"end": 5239,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5186,
											"end": 5188,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 5171,
											"end": 5189,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "tag",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "52"
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "tag",
											"source": 10,
											"value": "52"
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "55"
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "tag",
											"source": 10,
											"value": "54"
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "56"
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "tag",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "57"
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "tag",
											"source": 10,
											"value": "57"
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "59"
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "tag",
											"source": 10,
											"value": "59"
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4465,
											"end": 4472,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6295,
											"end": 6297,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6280,
											"end": 6298,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4391,
											"end": 4520,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 6262,
											"end": 6338,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "tag",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "tag",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "70"
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "tag",
											"source": 10,
											"value": "70"
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "71"
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "tag",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "tag",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "tag",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "tag",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "77"
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "tag",
											"source": 10,
											"value": "77"
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "tag",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "tag",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "86"
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "tag",
											"source": 10,
											"value": "86"
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1412,
											"end": 1440,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "tag",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "tag",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "tag",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "tag",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "tag",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "tag",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "101"
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "102"
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "tag",
											"source": 10,
											"value": "102"
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3163,
											"end": 3198,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3130,
											"end": 3134,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3163,
											"end": 3198,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3163,
											"end": 3198,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3163,
											"end": 3198,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3163,
											"end": 3183,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 3163,
											"end": 3198,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3163,
											"end": 3198,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3163,
											"end": 3198,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3163,
											"end": 3198,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3163,
											"end": 3198,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3163,
											"end": 3198,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3163,
											"end": 3198,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3163,
											"end": 3198,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3163,
											"end": 3205,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3163,
											"end": 3205,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3207,
											"end": 3258,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3207,
											"end": 3258,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3207,
											"end": 3258,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3163,
											"end": 3205,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3163,
											"end": 3205,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3163,
											"end": 3205,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 3163,
											"end": 3205,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 3163,
											"end": 3205,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3163,
											"end": 3205,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "tag",
											"source": 10,
											"value": "101"
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 5443,
											"end": 5457,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5443,
											"end": 5457,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5436,
											"end": 5458,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5418,
											"end": 5459,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5418,
											"end": 5459,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5490,
											"end": 5492,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 5475,
											"end": 5493,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5475,
											"end": 5493,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5468,
											"end": 5502,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5468,
											"end": 5502,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5468,
											"end": 5502,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5468,
											"end": 5502,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5391,
											"end": 5409,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3063,
											"end": 3266,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 5373,
											"end": 5508,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "tag",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "tag",
											"source": 10,
											"value": "106"
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "107"
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "tag",
											"source": 10,
											"value": "107"
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3991,
											"end": 4023,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3991,
											"end": 4023,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3991,
											"end": 4023,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3973,
											"end": 4024,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3973,
											"end": 4024,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3961,
											"end": 3963,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3946,
											"end": 3964,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1536,
											"end": 1563,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 3928,
											"end": 4030,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "tag",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "111"
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "tag",
											"source": 10,
											"value": "111"
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "tag",
											"source": 10,
											"value": "113"
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "tag",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "115"
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "tag",
											"source": 10,
											"value": "115"
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "107"
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1570,
											"end": 1590,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "tag",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "119"
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "tag",
											"source": 10,
											"value": "119"
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "121"
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7421,
											"end": 8287,
											"name": "tag",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7421,
											"end": 8287,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7421,
											"end": 8287,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 7421,
											"end": 8287,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "128"
										},
										{
											"begin": 7421,
											"end": 8287,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 7421,
											"end": 8287,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7421,
											"end": 8287,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 7421,
											"end": 8287,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7421,
											"end": 8287,
											"name": "tag",
											"source": 10,
											"value": "128"
										},
										{
											"begin": 7421,
											"end": 8287,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7421,
											"end": 8287,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "129"
										},
										{
											"begin": 7421,
											"end": 8287,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "tag",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "tag",
											"source": 10,
											"value": "130"
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "132"
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "tag",
											"source": 10,
											"value": "132"
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2027,
											"end": 2076,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "tag",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "138"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "tag",
											"source": 10,
											"value": "138"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "tag",
											"source": 10,
											"value": "140"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "tag",
											"source": 10,
											"value": "139"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6572,
											"end": 6604,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6572,
											"end": 6604,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 6572,
											"end": 6604,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6554,
											"end": 6605,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 6554,
											"end": 6605,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6648,
											"end": 6662,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6648,
											"end": 6662,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6641,
											"end": 6663,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 6636,
											"end": 6638,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6621,
											"end": 6639,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 6621,
											"end": 6639,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6614,
											"end": 6664,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6680,
											"end": 6698,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6680,
											"end": 6698,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6680,
											"end": 6698,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6673,
											"end": 6707,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6542,
											"end": 6544,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 6527,
											"end": 6545,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1295,
											"end": 1354,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 6509,
											"end": 6713,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "tag",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "tag",
											"source": 10,
											"value": "144"
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "tag",
											"source": 10,
											"value": "146"
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "tag",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "tag",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1447,
											"end": 1476,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "tag",
											"source": 10,
											"value": "26"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "152"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "tag",
											"source": 10,
											"value": "152"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "tag",
											"source": 10,
											"value": "154"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "tag",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 5847,
											"end": 5861,
											"name": "SWAP8",
											"source": 11
										},
										{
											"begin": 5847,
											"end": 5861,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5840,
											"end": 5862,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5822,
											"end": 5863,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 5822,
											"end": 5863,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5894,
											"end": 5896,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 5879,
											"end": 5897,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 5879,
											"end": 5897,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5872,
											"end": 5906,
											"name": "SWAP7",
											"source": 11
										},
										{
											"begin": 5872,
											"end": 5906,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5872,
											"end": 5906,
											"name": "SWAP7",
											"source": 11
										},
										{
											"begin": 5872,
											"end": 5906,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5922,
											"end": 5940,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 5922,
											"end": 5940,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 5922,
											"end": 5940,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5915,
											"end": 5949,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 5915,
											"end": 5949,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5915,
											"end": 5949,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 5915,
											"end": 5949,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5980,
											"end": 5982,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 5965,
											"end": 5983,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 5965,
											"end": 5983,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5958,
											"end": 5992,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5958,
											"end": 5992,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5958,
											"end": 5992,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5958,
											"end": 5992,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6023,
											"end": 6026,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 6008,
											"end": 6027,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 6008,
											"end": 6027,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6001,
											"end": 6036,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6073,
											"end": 6105,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 6093,
											"end": 6096,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 6052,
											"end": 6071,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 6052,
											"end": 6071,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6045,
											"end": 6106,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6137,
											"end": 6140,
											"name": "PUSH",
											"source": 11,
											"value": "C0"
										},
										{
											"begin": 6122,
											"end": 6141,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6122,
											"end": 6141,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6115,
											"end": 6150,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5809,
											"end": 5812,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 5794,
											"end": 5813,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1361,
											"end": 1405,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "50"
										},
										{
											"begin": 5776,
											"end": 6156,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "tag",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "tag",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "tag",
											"source": 10,
											"value": "28"
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "tag",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "46"
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "164"
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "tag",
											"source": 10,
											"value": "164"
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1875,
											"end": 1910,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1852,
											"end": 1856,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1875,
											"end": 1910,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 1910,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 1910,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 1895,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1875,
											"end": 1910,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1875,
											"end": 1910,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 1910,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1875,
											"end": 1910,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 1910,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 1917,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1875,
											"end": 1917,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 1917,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 1917,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 1875,
											"end": 1917,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 1917,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1788,
											"end": 1924,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 745,
											"end": 813,
											"name": "tag",
											"source": 10,
											"value": "29"
										},
										{
											"begin": 745,
											"end": 813,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 745,
											"end": 813,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 745,
											"end": 813,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 745,
											"end": 813,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 745,
											"end": 813,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "167"
										},
										{
											"begin": 745,
											"end": 813,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 745,
											"end": 813,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 745,
											"end": 813,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 745,
											"end": 813,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 745,
											"end": 813,
											"name": "tag",
											"source": 10,
											"value": "167"
										},
										{
											"begin": 745,
											"end": 813,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 745,
											"end": 813,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 745,
											"end": 813,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 786,
											"end": 813,
											"name": "PUSH",
											"source": 10,
											"value": "3496E2E73C4D42B75D702E60D9E48102720B8691234415963A5A857B86425D07"
										},
										{
											"begin": 745,
											"end": 813,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 745,
											"end": 813,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "tag",
											"source": 10,
											"value": "30"
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "tag",
											"source": 10,
											"value": "171"
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "tag",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "tag",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "tag",
											"source": 10,
											"value": "175"
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "178"
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "tag",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "tag",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "tag",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "98"
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "tag",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "183"
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "tag",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "185"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "185"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4478,
											"end": 4495,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4478,
											"end": 4495,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4478,
											"end": 4495,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4478,
											"end": 4495,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4478,
											"end": 4486,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 4478,
											"end": 4495,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4478,
											"end": 4495,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4478,
											"end": 4495,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4478,
											"end": 4495,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4478,
											"end": 4495,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4478,
											"end": 4495,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4478,
											"end": 4495,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4505,
											"end": 4506,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 4478,
											"end": 4502,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4478,
											"end": 4502,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4478,
											"end": 4502,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4478,
											"end": 4502,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4478,
											"end": 4506,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4522,
											"end": 4539,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4522,
											"end": 4539,
											"name": "PUSH",
											"source": 10,
											"value": "651A9760985EDC53055BF2462CB4437B9BE3DE87AA3EECF2C05782E8B58EBA19"
										},
										{
											"begin": 4522,
											"end": 4539,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4522,
											"end": 4539,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 4522,
											"end": 4539,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4487,
											"end": 4494,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6295,
											"end": 6297,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6280,
											"end": 6298,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6280,
											"end": 6298,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6262,
											"end": 6338,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4522,
											"end": 4539,
											"name": "tag",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 4522,
											"end": 4539,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4522,
											"end": 4539,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4522,
											"end": 4539,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4522,
											"end": 4539,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4522,
											"end": 4539,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4522,
											"end": 4539,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4522,
											"end": 4539,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4522,
											"end": 4539,
											"name": "LOG1",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 4397,
											"end": 4546,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "tag",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2691,
											"end": 2695,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7965DB0B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2761,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2714,
											"end": 2801,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 2714,
											"end": 2801,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1FFC9A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 937,
											"end": 977,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 937,
											"end": 977,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 937,
											"end": 977,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2765,
											"end": 2801,
											"name": "tag",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 2765,
											"end": 2801,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2707,
											"end": 2801,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2606,
											"end": 2808,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "tag",
											"source": 10,
											"value": "56"
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 786,
											"end": 813,
											"name": "PUSH",
											"source": 10,
											"value": "3496E2E73C4D42B75D702E60D9E48102720B8691234415963A5A857B86425D07"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 2516,
											"end": 2520,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2319,
											"end": 2354,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2354,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2354,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2319,
											"end": 2354,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2354,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2354,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2339,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 2319,
											"end": 2354,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2319,
											"end": 2354,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2354,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2354,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2354,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2319,
											"end": 2354,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2354,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2354,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2370,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2370,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2370,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2388,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2388,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2388,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 2398,
											"end": 2450,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2398,
											"end": 2450,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2517,
											"end": 2588,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2398,
											"end": 2450,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 2398,
											"end": 2450,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2398,
											"end": 2450,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2398,
											"end": 2450,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2517,
											"end": 2588,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2517,
											"end": 2588,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 2517,
											"end": 2588,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2517,
											"end": 2588,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 2517,
											"end": 2588,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2517,
											"end": 2588,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2354,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2319,
											"end": 2354,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2654,
											"name": "PUSH",
											"source": 10,
											"value": "95EA7B3"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4692,
											"end": 4724,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4692,
											"end": 4724,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 4692,
											"end": 4724,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4674,
											"end": 4725,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4741,
											"end": 4759,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 4741,
											"end": 4759,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4741,
											"end": 4759,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4734,
											"end": 4768,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4647,
											"end": 4665,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 4647,
											"end": 4665,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "200"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "tag",
											"source": 10,
											"value": "200"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "202"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "tag",
											"source": 10,
											"value": "202"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "204"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "tag",
											"source": 10,
											"value": "203"
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2598,
											"end": 2748,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2531,
											"end": 2532,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2191,
											"end": 2755,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "tag",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 4176,
											"end": 4325,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4266,
											"end": 4283,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4266,
											"end": 4283,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4266,
											"end": 4283,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4266,
											"end": 4283,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4266,
											"end": 4274,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 4266,
											"end": 4283,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4266,
											"end": 4283,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4266,
											"end": 4283,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4266,
											"end": 4283,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4266,
											"end": 4283,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4266,
											"end": 4283,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4266,
											"end": 4283,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4266,
											"end": 4283,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4259,
											"end": 4283,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4299,
											"end": 4318,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4299,
											"end": 4318,
											"name": "PUSH",
											"source": 10,
											"value": "D0B153E02E23F4F21D020465B4DAC7B1114893D05DB395ED2511F879C3AC90B4"
										},
										{
											"begin": 4299,
											"end": 4318,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6280,
											"end": 6298,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4299,
											"end": 4318,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 6262,
											"end": 6338,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "tag",
											"source": 10,
											"value": "71"
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8708,
											"end": 8722,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8708,
											"end": 8735,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 8610,
											"end": 8742,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "tag",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8494,
											"end": 8495,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8460,
											"end": 8477,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8477,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8477,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8468,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 8460,
											"end": 8477,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8460,
											"end": 8477,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8477,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8477,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8477,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8460,
											"end": 8477,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8477,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8477,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8460,
											"end": 8491,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8491,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8491,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8491,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8491,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8483,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 8460,
											"end": 8483,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8483,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8483,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8491,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8491,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8491,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8491,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8491,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8495,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8495,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8495,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 8460,
											"end": 8495,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 8511,
											"end": 8531,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3973,
											"end": 4024,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3973,
											"end": 4024,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3973,
											"end": 4024,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8511,
											"end": 8531,
											"name": "PUSH",
											"source": 10,
											"value": "34AEEFD5030BE05FE70EEBC8866D82F935A308EB9F334CBA88F5E3BEA1A0CAE8"
										},
										{
											"begin": 8511,
											"end": 8531,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3946,
											"end": 3964,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8511,
											"end": 8531,
											"name": "tag",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 8511,
											"end": 8531,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8511,
											"end": 8531,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8511,
											"end": 8531,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 8511,
											"end": 8531,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8511,
											"end": 8531,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8511,
											"end": 8531,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 8511,
											"end": 8531,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8511,
											"end": 8531,
											"name": "LOG1",
											"source": 10
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8359,
											"end": 8538,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "tag",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 3338,
											"end": 3489,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3447,
											"end": 3448,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3420,
											"end": 3437,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3420,
											"end": 3437,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3420,
											"end": 3437,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3420,
											"end": 3428,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 3420,
											"end": 3437,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3420,
											"end": 3437,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3420,
											"end": 3437,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3420,
											"end": 3437,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3420,
											"end": 3437,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3420,
											"end": 3437,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3420,
											"end": 3444,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3420,
											"end": 3444,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3420,
											"end": 3448,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3420,
											"end": 3448,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3420,
											"end": 3448,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3420,
											"end": 3448,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 3464,
											"end": 3482,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3464,
											"end": 3482,
											"name": "PUSH",
											"source": 10,
											"value": "827E8BFF9F46048F8351964D2C871D09E4F4231513CF2FCB786649C68732E24F"
										},
										{
											"begin": 3464,
											"end": 3482,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3464,
											"end": 3482,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 3464,
											"end": 3482,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3429,
											"end": 3436,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6295,
											"end": 6297,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6280,
											"end": 6298,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6280,
											"end": 6298,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 6262,
											"end": 6338,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4465,
											"end": 4472,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 2516,
											"end": 2520,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4883,
											"end": 4908,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 4894,
											"end": 4898,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4900,
											"end": 4907,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4883,
											"end": 4893,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "226"
										},
										{
											"begin": 4883,
											"end": 4908,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4883,
											"end": 4908,
											"name": "tag",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 4883,
											"end": 4908,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4770,
											"end": 4915,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5882,
											"end": 5905,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5882,
											"end": 5905,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 5882,
											"end": 5905,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "229"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12541,
											"end": 12543,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12523,
											"end": 12544,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12580,
											"end": 12582,
											"name": "PUSH",
											"source": 11,
											"value": "2F"
										},
										{
											"begin": 12560,
											"end": 12578,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 12560,
											"end": 12578,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12560,
											"end": 12578,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12553,
											"end": 12583,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12619,
											"end": 12653,
											"name": "PUSH",
											"source": 11,
											"value": "416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365"
										},
										{
											"begin": 12599,
											"end": 12617,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 12599,
											"end": 12617,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12599,
											"end": 12617,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12592,
											"end": 12654,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "103937B632B9903337B91039B2B633"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "89"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12670,
											"end": 12688,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 12670,
											"end": 12688,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12670,
											"end": 12688,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12663,
											"end": 12708,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12725,
											"end": 12744,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 12725,
											"end": 12744,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "tag",
											"source": 0,
											"value": "230"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "tag",
											"source": 0,
											"value": "229"
										},
										{
											"begin": 5874,
											"end": 5957,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5968,
											"end": 5994,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 5980,
											"end": 5984,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5986,
											"end": 5993,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5968,
											"end": 5979,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 5968,
											"end": 5994,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5968,
											"end": 5994,
											"name": "tag",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 5968,
											"end": 5994,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5787,
											"end": 6001,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "tag",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 786,
											"end": 813,
											"name": "PUSH",
											"source": 10,
											"value": "3496E2E73C4D42B75D702E60D9E48102720B8691234415963A5A857B86425D07"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 2516,
											"end": 2520,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2923,
											"end": 2958,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2968,
											"end": 2973,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2923,
											"end": 2958,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2923,
											"end": 2958,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2923,
											"end": 2958,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2923,
											"end": 2943,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 2923,
											"end": 2958,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2923,
											"end": 2958,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2923,
											"end": 2958,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2923,
											"end": 2958,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2923,
											"end": 2958,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 2923,
											"end": 2973,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2923,
											"end": 2973,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2923,
											"end": 2973,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2923,
											"end": 2973,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2923,
											"end": 2973,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 2831,
											"end": 2980,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "tag",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "239"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "239"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5431,
											"end": 5448,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5431,
											"end": 5448,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5431,
											"end": 5448,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5431,
											"end": 5448,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5431,
											"end": 5439,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 5431,
											"end": 5448,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5431,
											"end": 5448,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5431,
											"end": 5448,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5431,
											"end": 5448,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5431,
											"end": 5448,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5431,
											"end": 5457,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5431,
											"end": 5457,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 5431,
											"end": 5457,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5427,
											"end": 6018,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 5427,
											"end": 6018,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5507,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5490,
											"end": 5507,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5507,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5507,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5498,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 5490,
											"end": 5507,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5490,
											"end": 5507,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5507,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5507,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5507,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5490,
											"end": 5507,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5507,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5507,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5490,
											"end": 5520,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5520,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5520,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5520,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5512,
											"name": "PUSH",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 5490,
											"end": 5512,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5520,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5520,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5520,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5520,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5520,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5490,
											"end": 5520,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5524,
											"end": 5525,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 5490,
											"end": 5525,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 5482,
											"end": 5579,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "242"
										},
										{
											"begin": 5482,
											"end": 5579,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5482,
											"end": 5579,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5482,
											"end": 5579,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5482,
											"end": 5579,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5482,
											"end": 5579,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11720,
											"end": 11722,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 5482,
											"end": 5579,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5482,
											"end": 5579,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5482,
											"end": 5579,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 11702,
											"end": 11723,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11759,
											"end": 11761,
											"name": "PUSH",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 11739,
											"end": 11757,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 11739,
											"end": 11757,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11739,
											"end": 11757,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11732,
											"end": 11762,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11798,
											"end": 11832,
											"name": "PUSH",
											"source": 11,
											"value": "54726F706879204B696E67204172636164653A204E6F74207265676973746572"
										},
										{
											"begin": 11778,
											"end": 11796,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 11778,
											"end": 11796,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11778,
											"end": 11796,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11771,
											"end": 11833,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "32B2103337B9103A3434B99033B0B6B297"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "79"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11849,
											"end": 11867,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 11849,
											"end": 11867,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11849,
											"end": 11867,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11842,
											"end": 11889,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11906,
											"end": 11925,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 11906,
											"end": 11925,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5482,
											"end": 5579,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 11692,
											"end": 11931,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5482,
											"end": 5579,
											"name": "tag",
											"source": 10,
											"value": "242"
										},
										{
											"begin": 5482,
											"end": 5579,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5594,
											"end": 5613,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5616,
											"end": 5633,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5616,
											"end": 5633,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5616,
											"end": 5633,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5616,
											"end": 5624,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 5616,
											"end": 5633,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5616,
											"end": 5633,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5616,
											"end": 5633,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5616,
											"end": 5633,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5616,
											"end": 5633,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5616,
											"end": 5633,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5616,
											"end": 5633,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5616,
											"end": 5633,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5678,
											"end": 5693,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 5678,
											"end": 5693,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5678,
											"end": 5693,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5678,
											"end": 5693,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5678,
											"end": 5693,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5678,
											"end": 5693,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5678,
											"end": 5693,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5695,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5695,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5676,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 5656,
											"end": 5695,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5695,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5695,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5695,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5695,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5708,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5708,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5717,
											"name": "PUSH",
											"source": 10,
											"value": "A9059CBB"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 5732,
											"end": 5751,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 5732,
											"end": 5751,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5732,
											"end": 5751,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5732,
											"end": 5751,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4692,
											"end": 4724,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4692,
											"end": 4724,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4692,
											"end": 4724,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4674,
											"end": 4725,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4741,
											"end": 4759,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 4741,
											"end": 4759,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4741,
											"end": 4759,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4734,
											"end": 4768,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4647,
											"end": 4665,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 4647,
											"end": 4665,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "tag",
											"source": 10,
											"value": "248"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "tag",
											"source": 10,
											"value": "250"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "204"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "tag",
											"source": 10,
											"value": "251"
										},
										{
											"begin": 5656,
											"end": 5752,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5648,
											"end": 5791,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "252"
										},
										{
											"begin": 5648,
											"end": 5791,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5648,
											"end": 5791,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5648,
											"end": 5791,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5648,
											"end": 5791,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5648,
											"end": 5791,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 12138,
											"end": 12140,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 5648,
											"end": 5791,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5648,
											"end": 5791,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5648,
											"end": 5791,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 12120,
											"end": 12141,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12177,
											"end": 12179,
											"name": "PUSH",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 12157,
											"end": 12175,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 12157,
											"end": 12175,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12157,
											"end": 12175,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12150,
											"end": 12180,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12216,
											"end": 12250,
											"name": "PUSH",
											"source": 11,
											"value": "54726F706879204B696E67204172636164653A20526566756E64206661696C65"
										},
										{
											"begin": 12196,
											"end": 12214,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 12196,
											"end": 12214,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12196,
											"end": 12214,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12189,
											"end": 12251,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3217"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12267,
											"end": 12285,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 12267,
											"end": 12285,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 12267,
											"end": 12285,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12260,
											"end": 12292,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 12309,
											"end": 12328,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 12309,
											"end": 12328,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5648,
											"end": 5791,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 12110,
											"end": 12334,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5648,
											"end": 5791,
											"name": "tag",
											"source": 10,
											"value": "252"
										},
										{
											"begin": 5648,
											"end": 5791,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5835,
											"end": 5854,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5811,
											"end": 5855,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5811,
											"end": 5855,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5811,
											"end": 5855,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 13139,
											"end": 13164,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 13139,
											"end": 13164,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13139,
											"end": 13164,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 13200,
											"end": 13232,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 13200,
											"end": 13232,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 13195,
											"end": 13197,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 13180,
											"end": 13198,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13180,
											"end": 13198,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13173,
											"end": 13233,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 13249,
											"end": 13267,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 13249,
											"end": 13267,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13249,
											"end": 13267,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13242,
											"end": 13276,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 13242,
											"end": 13276,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13242,
											"end": 13276,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 13242,
											"end": 13276,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5811,
											"end": 5855,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 5811,
											"end": 5855,
											"name": "PUSH",
											"source": 10,
											"value": "21E12A7CAD0DA5928167E1084EA4D5FDF8D9AF66657A2543A9AC76A0CA081477"
										},
										{
											"begin": 5811,
											"end": 5855,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5811,
											"end": 5855,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5811,
											"end": 5855,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5811,
											"end": 5855,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 13127,
											"end": 13129,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 5811,
											"end": 5855,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5811,
											"end": 5855,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5811,
											"end": 5855,
											"name": "LOG1",
											"source": 10
										},
										{
											"begin": 5887,
											"end": 5889,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5887,
											"end": 5906,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 5887,
											"end": 5906,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5887,
											"end": 5906,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5870,
											"end": 5872,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5870,
											"end": 5882,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 5870,
											"end": 5882,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5870,
											"end": 5882,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5870,
											"end": 5907,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5870,
											"end": 5907,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5870,
											"end": 5907,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5870,
											"end": 5907,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 5870,
											"end": 5907,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5870,
											"end": 5907,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5870,
											"end": 5907,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 5870,
											"end": 5907,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5870,
											"end": 5907,
											"name": "tag",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 5870,
											"end": 5907,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5870,
											"end": 5907,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5870,
											"end": 5907,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5870,
											"end": 5907,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5922,
											"end": 5936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5922,
											"end": 5936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5939,
											"end": 5940,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5922,
											"end": 5936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5922,
											"end": 5936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5922,
											"end": 5936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5922,
											"end": 5928,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 5922,
											"end": 5928,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5922,
											"end": 5928,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5922,
											"end": 5936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5922,
											"end": 5936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5922,
											"end": 5936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5922,
											"end": 5936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5922,
											"end": 5936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5922,
											"end": 5936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5922,
											"end": 5936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5922,
											"end": 5936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5922,
											"end": 5940,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5922,
											"end": 5940,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5922,
											"end": 5940,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 5954,
											"end": 5961,
											"name": "PUSH",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 5954,
											"end": 5961,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5954,
											"end": 5961,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5954,
											"end": 5969,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5954,
											"end": 5969,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5954,
											"end": 5969,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5954,
											"end": 5969,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5954,
											"end": 5969,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 5954,
											"end": 5973,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5954,
											"end": 5973,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5954,
											"end": 5973,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 6006,
											"end": 6007,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 5987,
											"end": 6002,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5987,
											"end": 6002,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5987,
											"end": 6002,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5987,
											"end": 6007,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5987,
											"end": 6007,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6006,
											"end": 6007,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6006,
											"end": 6007,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5987,
											"end": 6002,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5987,
											"end": 6002,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5987,
											"end": 6007,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "259"
										},
										{
											"begin": 5987,
											"end": 6007,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6006,
											"end": 6007,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6006,
											"end": 6007,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5987,
											"end": 6007,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 5987,
											"end": 6007,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5987,
											"end": 6007,
											"name": "tag",
											"source": 10,
											"value": "259"
										},
										{
											"begin": 5987,
											"end": 6007,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5987,
											"end": 6007,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5987,
											"end": 6007,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5987,
											"end": 6007,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5332,
											"end": 6024,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "tag",
											"source": 10,
											"value": "121"
										},
										{
											"begin": 4971,
											"end": 5260,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "261"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "261"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5056,
											"end": 5077,
											"name": "SELFBALANCE",
											"source": 10
										},
										{
											"begin": 5092,
											"end": 5103,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5092,
											"end": 5103,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5088,
											"end": 5254,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "232"
										},
										{
											"begin": 5088,
											"end": 5254,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5143,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 5138,
											"end": 5143,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 5120,
											"end": 5132,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5120,
											"end": 5132,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5138,
											"end": 5143,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5143,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5157,
											"end": 5164,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5157,
											"end": 5164,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5120,
											"end": 5132,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5120,
											"end": 5132,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5157,
											"end": 5164,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5143,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "PUSH",
											"source": 10,
											"value": "3F"
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "tag",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "tag",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5138,
											"end": 5170,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5119,
											"end": 5170,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5119,
											"end": 5170,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5119,
											"end": 5170,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5192,
											"end": 5199,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5184,
											"end": 5243,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 5184,
											"end": 5243,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5184,
											"end": 5243,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5184,
											"end": 5243,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5184,
											"end": 5243,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5184,
											"end": 5243,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5184,
											"end": 5243,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 5184,
											"end": 5243,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 5184,
											"end": 5243,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 5184,
											"end": 5243,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5184,
											"end": 5243,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "271"
										},
										{
											"begin": 5184,
											"end": 5243,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "tag",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2981,
											"end": 2985,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3016,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3033,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2895,
											"end": 3040,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7421,
											"end": 8287,
											"name": "tag",
											"source": 10,
											"value": "129"
										},
										{
											"begin": 7421,
											"end": 8287,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7502,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7485,
											"end": 7502,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7502,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7502,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7493,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7485,
											"end": 7502,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7485,
											"end": 7502,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7502,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7502,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7502,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7485,
											"end": 7502,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7502,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7502,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7509,
											"end": 7519,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7520,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7520,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7508,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 7485,
											"end": 7508,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7520,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7520,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7520,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7520,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7520,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7485,
											"end": 7520,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7524,
											"end": 7525,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 7485,
											"end": 7525,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 7477,
											"end": 7563,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "274"
										},
										{
											"begin": 7477,
											"end": 7563,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7477,
											"end": 7563,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7477,
											"end": 7563,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7477,
											"end": 7563,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7477,
											"end": 7563,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7477,
											"end": 7563,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7477,
											"end": 7563,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7477,
											"end": 7563,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 7477,
											"end": 7563,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7477,
											"end": 7563,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 7477,
											"end": 7563,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7477,
											"end": 7563,
											"name": "tag",
											"source": 10,
											"value": "274"
										},
										{
											"begin": 7477,
											"end": 7563,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7581,
											"end": 7598,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7581,
											"end": 7598,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7581,
											"end": 7598,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7581,
											"end": 7598,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7581,
											"end": 7589,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7581,
											"end": 7598,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7581,
											"end": 7598,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7581,
											"end": 7598,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7581,
											"end": 7598,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7581,
											"end": 7598,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7581,
											"end": 7605,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7581,
											"end": 7605,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7581,
											"end": 7605,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7609,
											"end": 7610,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 7581,
											"end": 7610,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 7573,
											"end": 7647,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "277"
										},
										{
											"begin": 7573,
											"end": 7647,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7573,
											"end": 7647,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7573,
											"end": 7647,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7573,
											"end": 7647,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7573,
											"end": 7647,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7669,
											"end": 7671,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7573,
											"end": 7647,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7573,
											"end": 7647,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7573,
											"end": 7647,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7651,
											"end": 7672,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7651,
											"end": 7672,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7651,
											"end": 7672,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7688,
											"end": 7706,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 7688,
											"end": 7706,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7688,
											"end": 7706,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7681,
											"end": 7711,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7747,
											"end": 7781,
											"name": "PUSH",
											"source": 11,
											"value": "54726F706879204B696E67204172636164653A2047616D6520636C6F7365642E"
										},
										{
											"begin": 7727,
											"end": 7745,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 7727,
											"end": 7745,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7727,
											"end": 7745,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7720,
											"end": 7782,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7799,
											"end": 7817,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 7799,
											"end": 7817,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7573,
											"end": 7647,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 7641,
											"end": 7823,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7573,
											"end": 7647,
											"name": "tag",
											"source": 10,
											"value": "277"
										},
										{
											"begin": 7573,
											"end": 7647,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7698,
											"end": 7715,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7698,
											"end": 7715,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7698,
											"end": 7715,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7698,
											"end": 7715,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7698,
											"end": 7706,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7698,
											"end": 7715,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7698,
											"end": 7715,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7698,
											"end": 7715,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7698,
											"end": 7715,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7698,
											"end": 7715,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7698,
											"end": 7715,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7698,
											"end": 7715,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7698,
											"end": 7715,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7698,
											"end": 7728,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 7698,
											"end": 7728,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7698,
											"end": 7728,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7698,
											"end": 7728,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7665,
											"end": 7695,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7665,
											"end": 7695,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7665,
											"end": 7695,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7665,
											"end": 7728,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 7657,
											"end": 7775,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "280"
										},
										{
											"begin": 7657,
											"end": 7775,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7657,
											"end": 7775,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7657,
											"end": 7775,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7657,
											"end": 7775,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7657,
											"end": 7775,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7657,
											"end": 7775,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7657,
											"end": 7775,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7657,
											"end": 7775,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 7657,
											"end": 7775,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7657,
											"end": 7775,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "282"
										},
										{
											"begin": 7657,
											"end": 7775,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7657,
											"end": 7775,
											"name": "tag",
											"source": 10,
											"value": "280"
										},
										{
											"begin": 7657,
											"end": 7775,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7810,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7793,
											"end": 7810,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7810,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7810,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7801,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7793,
											"end": 7810,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7793,
											"end": 7810,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7810,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7810,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7810,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7793,
											"end": 7810,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7810,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7810,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7816,
											"end": 7826,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7827,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7827,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7815,
											"name": "PUSH",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 7793,
											"end": 7815,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7827,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7827,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7827,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7827,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7827,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7827,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7793,
											"end": 7832,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7785,
											"end": 7876,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "283"
										},
										{
											"begin": 7785,
											"end": 7876,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7785,
											"end": 7876,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7785,
											"end": 7876,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7785,
											"end": 7876,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7785,
											"end": 7876,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7785,
											"end": 7876,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7785,
											"end": 7876,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7785,
											"end": 7876,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 7785,
											"end": 7876,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7785,
											"end": 7876,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "285"
										},
										{
											"begin": 7785,
											"end": 7876,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7785,
											"end": 7876,
											"name": "tag",
											"source": 10,
											"value": "283"
										},
										{
											"begin": 7785,
											"end": 7876,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7927,
											"end": 7928,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7894,
											"end": 7911,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7894,
											"end": 7911,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7894,
											"end": 7911,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7894,
											"end": 7902,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7894,
											"end": 7911,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7894,
											"end": 7911,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7894,
											"end": 7911,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7894,
											"end": 7911,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7894,
											"end": 7911,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7894,
											"end": 7911,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7894,
											"end": 7911,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7894,
											"end": 7911,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7894,
											"end": 7924,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7894,
											"end": 7924,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7886,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "286"
										},
										{
											"begin": 7886,
											"end": 7968,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7886,
											"end": 7968,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7886,
											"end": 7968,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7886,
											"end": 7968,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7886,
											"end": 7968,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7886,
											"end": 7968,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7886,
											"end": 7968,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7886,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 7886,
											"end": 7968,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7886,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "288"
										},
										{
											"begin": 7886,
											"end": 7968,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7886,
											"end": 7968,
											"name": "tag",
											"source": 10,
											"value": "286"
										},
										{
											"begin": 7886,
											"end": 7968,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8000,
											"end": 8017,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8000,
											"end": 8017,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8000,
											"end": 8017,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8000,
											"end": 8017,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8000,
											"end": 8008,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 8000,
											"end": 8017,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8000,
											"end": 8017,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8000,
											"end": 8017,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8000,
											"end": 8017,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8000,
											"end": 8017,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 8000,
											"end": 8034,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 8000,
											"end": 8034,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8000,
											"end": 8034,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7986,
											"end": 7995,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 7986,
											"end": 8035,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 7978,
											"end": 8088,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 7978,
											"end": 8088,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7978,
											"end": 8088,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7978,
											"end": 8088,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7978,
											"end": 8088,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7978,
											"end": 8088,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10086,
											"end": 10088,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7978,
											"end": 8088,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7978,
											"end": 8088,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7978,
											"end": 8088,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 10068,
											"end": 10089,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10125,
											"end": 10127,
											"name": "PUSH",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 10105,
											"end": 10123,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 10105,
											"end": 10123,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10105,
											"end": 10123,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10098,
											"end": 10128,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10164,
											"end": 10198,
											"name": "PUSH",
											"source": 11,
											"value": "54726F706879204B696E67204172636164653A204D757374206D617463682072"
										},
										{
											"begin": 10144,
											"end": 10162,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 10144,
											"end": 10162,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10144,
											"end": 10162,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10137,
											"end": 10199,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "32B3B4B9BA3930BA34B7B7103332B297"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10215,
											"end": 10233,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 10215,
											"end": 10233,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10215,
											"end": 10233,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10208,
											"end": 10254,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10271,
											"end": 10290,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 10271,
											"end": 10290,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7978,
											"end": 8088,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 10058,
											"end": 10296,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7978,
											"end": 8088,
											"name": "tag",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 7978,
											"end": 8088,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8130,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 8118,
											"end": 8130,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 8100,
											"end": 8112,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8100,
											"end": 8112,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8118,
											"end": 8130,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8130,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8144,
											"end": 8153,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 8144,
											"end": 8153,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8100,
											"end": 8112,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8100,
											"end": 8112,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8144,
											"end": 8153,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8130,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "295"
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "PUSH",
											"source": 10,
											"value": "3F"
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "294"
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "tag",
											"source": 10,
											"value": "295"
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "tag",
											"source": 10,
											"value": "294"
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8118,
											"end": 8159,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8099,
											"end": 8159,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8099,
											"end": 8159,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8099,
											"end": 8159,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 8177,
											"end": 8184,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8169,
											"end": 8228,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "296"
										},
										{
											"begin": 8169,
											"end": 8228,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8169,
											"end": 8228,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8169,
											"end": 8228,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8169,
											"end": 8228,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8169,
											"end": 8228,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8169,
											"end": 8228,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 8169,
											"end": 8228,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8169,
											"end": 8228,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 8169,
											"end": 8228,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8169,
											"end": 8228,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "271"
										},
										{
											"begin": 8169,
											"end": 8228,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 8169,
											"end": 8228,
											"name": "tag",
											"source": 10,
											"value": "296"
										},
										{
											"begin": 8169,
											"end": 8228,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8239,
											"end": 8280,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "232"
										},
										{
											"begin": 8249,
											"end": 8256,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 8258,
											"end": 8268,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 8270,
											"end": 8279,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 8239,
											"end": 8248,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "299"
										},
										{
											"begin": 8239,
											"end": 8280,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "tag",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 9004,
											"end": 9870,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "301"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "301"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9106,
											"end": 9123,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9106,
											"end": 9123,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9106,
											"end": 9123,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9106,
											"end": 9123,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9106,
											"end": 9114,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 9106,
											"end": 9123,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9106,
											"end": 9123,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9106,
											"end": 9123,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9106,
											"end": 9123,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9106,
											"end": 9123,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 9106,
											"end": 9132,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 9106,
											"end": 9132,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 9106,
											"end": 9132,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9102,
											"end": 9835,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "303"
										},
										{
											"begin": 9102,
											"end": 9835,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9183,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9166,
											"end": 9183,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9183,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9183,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9174,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 9166,
											"end": 9183,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9166,
											"end": 9183,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9183,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9183,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9183,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9166,
											"end": 9183,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9183,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9183,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9166,
											"end": 9195,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9195,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9195,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9195,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9187,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 9166,
											"end": 9187,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9195,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9195,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9195,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9195,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9195,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9195,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 9166,
											"end": 9195,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 9162,
											"end": 9196,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9162,
											"end": 9196,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9162,
											"end": 9196,
											"name": "PUSH",
											"source": 10,
											"value": "557809284DA7314475B1582804AE28E5F1349EFC1FE970EA25D50FCE75EB4F43"
										},
										{
											"begin": 9162,
											"end": 9196,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6280,
											"end": 6298,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9162,
											"end": 9196,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9162,
											"end": 9196,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 9162,
											"end": 9196,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9162,
											"end": 9196,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9162,
											"end": 9196,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 9162,
											"end": 9196,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9162,
											"end": 9196,
											"name": "LOG1",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9236,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9219,
											"end": 9236,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9236,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9236,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9227,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 9219,
											"end": 9236,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9219,
											"end": 9236,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9236,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9236,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9236,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9219,
											"end": 9236,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9236,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9236,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9219,
											"end": 9249,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9249,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9249,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9249,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9241,
											"name": "PUSH",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 9219,
											"end": 9241,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9249,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9249,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9249,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9249,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9249,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 9219,
											"end": 9249,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 9253,
											"end": 9254,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 9219,
											"end": 9254,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 9211,
											"end": 9307,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "305"
										},
										{
											"begin": 9211,
											"end": 9307,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9211,
											"end": 9307,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9211,
											"end": 9307,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9211,
											"end": 9307,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9211,
											"end": 9307,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9261,
											"end": 9263,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9211,
											"end": 9307,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 9211,
											"end": 9307,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9211,
											"end": 9307,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9243,
											"end": 9264,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9300,
											"end": 9302,
											"name": "PUSH",
											"source": 11,
											"value": "30"
										},
										{
											"begin": 9280,
											"end": 9298,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 9280,
											"end": 9298,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9280,
											"end": 9298,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9273,
											"end": 9303,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9339,
											"end": 9373,
											"name": "PUSH",
											"source": 11,
											"value": "54726F706879204B696E67204172636164653A204E6F74207265676973746572"
										},
										{
											"begin": 9319,
											"end": 9337,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 9319,
											"end": 9337,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9319,
											"end": 9337,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9312,
											"end": 9374,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "656420666F7220746869732067616D65"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9390,
											"end": 9408,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 9390,
											"end": 9408,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9390,
											"end": 9408,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9383,
											"end": 9429,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9446,
											"end": 9465,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 9446,
											"end": 9465,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9211,
											"end": 9307,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 9233,
											"end": 9471,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9211,
											"end": 9307,
											"name": "tag",
											"source": 10,
											"value": "305"
										},
										{
											"begin": 9211,
											"end": 9307,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9399,
											"end": 9403,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 9399,
											"end": 9403,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 9374,
											"end": 9388,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 9374,
											"end": 9388,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 9322,
											"end": 9340,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9344,
											"end": 9361,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 9344,
											"end": 9361,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9344,
											"end": 9361,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9344,
											"end": 9352,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 9344,
											"end": 9361,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9344,
											"end": 9361,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9344,
											"end": 9361,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9344,
											"end": 9361,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9344,
											"end": 9361,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 9344,
											"end": 9371,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 9344,
											"end": 9371,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9344,
											"end": 9371,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 9322,
											"end": 9340,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9322,
											"end": 9340,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9399,
											"end": 9403,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9399,
											"end": 9403,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9399,
											"end": 9403,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9344,
											"end": 9388,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "308"
										},
										{
											"begin": 9344,
											"end": 9388,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9374,
											"end": 9388,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9344,
											"end": 9388,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "309"
										},
										{
											"begin": 9344,
											"end": 9388,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9344,
											"end": 9388,
											"name": "tag",
											"source": 10,
											"value": "308"
										},
										{
											"begin": 9344,
											"end": 9388,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9343,
											"end": 9396,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "310"
										},
										{
											"begin": 9343,
											"end": 9396,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9343,
											"end": 9396,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9343,
											"end": 9396,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "311"
										},
										{
											"begin": 9343,
											"end": 9396,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9343,
											"end": 9396,
											"name": "tag",
											"source": 10,
											"value": "310"
										},
										{
											"begin": 9343,
											"end": 9396,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9343,
											"end": 9403,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "312"
										},
										{
											"begin": 9343,
											"end": 9403,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9343,
											"end": 9403,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9343,
											"end": 9403,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "311"
										},
										{
											"begin": 9343,
											"end": 9403,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9343,
											"end": 9403,
											"name": "tag",
											"source": 10,
											"value": "312"
										},
										{
											"begin": 9343,
											"end": 9403,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9417,
											"end": 9431,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9434,
											"end": 9451,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 9434,
											"end": 9451,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9434,
											"end": 9451,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9434,
											"end": 9442,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 9434,
											"end": 9451,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9434,
											"end": 9451,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9434,
											"end": 9451,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9434,
											"end": 9451,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9434,
											"end": 9451,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 9434,
											"end": 9461,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 9434,
											"end": 9461,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9434,
											"end": 9461,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 9322,
											"end": 9403,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9322,
											"end": 9403,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9417,
											"end": 9431,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9434,
											"end": 9474,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "313"
										},
										{
											"begin": 9434,
											"end": 9474,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9322,
											"end": 9403,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9322,
											"end": 9403,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9434,
											"end": 9474,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "258"
										},
										{
											"begin": 9434,
											"end": 9474,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9434,
											"end": 9474,
											"name": "tag",
											"source": 10,
											"value": "313"
										},
										{
											"begin": 9434,
											"end": 9474,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9417,
											"end": 9474,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9515,
											"end": 9536,
											"name": "SELFBALANCE",
											"source": 10
										},
										{
											"begin": 9555,
											"end": 9580,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9555,
											"end": 9580,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9555,
											"end": 9580,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 9551,
											"end": 9640,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 9551,
											"end": 9640,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "314"
										},
										{
											"begin": 9551,
											"end": 9640,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9609,
											"end": 9625,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9600,
											"end": 9625,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9600,
											"end": 9625,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9551,
											"end": 9640,
											"name": "tag",
											"source": 10,
											"value": "314"
										},
										{
											"begin": 9551,
											"end": 9640,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9655,
											"end": 9667,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9673,
											"end": 9679,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9673,
											"end": 9684,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9693,
											"end": 9699,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "318"
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "PUSH",
											"source": 10,
											"value": "3F"
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "317"
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "tag",
											"source": 10,
											"value": "318"
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "tag",
											"source": 10,
											"value": "317"
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9673,
											"end": 9705,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9654,
											"end": 9705,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9654,
											"end": 9705,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9654,
											"end": 9705,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9727,
											"end": 9734,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9719,
											"end": 9778,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "319"
										},
										{
											"begin": 9719,
											"end": 9778,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9719,
											"end": 9778,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9719,
											"end": 9778,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9719,
											"end": 9778,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9719,
											"end": 9778,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 9719,
											"end": 9778,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 9719,
											"end": 9778,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9719,
											"end": 9778,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 9719,
											"end": 9778,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9719,
											"end": 9778,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "271"
										},
										{
											"begin": 9719,
											"end": 9778,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 9719,
											"end": 9778,
											"name": "tag",
											"source": 10,
											"value": "319"
										},
										{
											"begin": 9719,
											"end": 9778,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9810,
											"end": 9824,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9810,
											"end": 9824,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9810,
											"end": 9824,
											"name": "PUSH",
											"source": 10,
											"value": "22427047E1A674A9AFF59700A2C8D00EA96E017DDF9236690BDEDF1F21F28D9D"
										},
										{
											"begin": 9810,
											"end": 9824,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6295,
											"end": 6297,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6280,
											"end": 6298,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9810,
											"end": 9824,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 9810,
											"end": 9824,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 9810,
											"end": 9824,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 9810,
											"end": 9824,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 9810,
											"end": 9824,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 9810,
											"end": 9824,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9810,
											"end": 9824,
											"name": "LOG1",
											"source": 10
										},
										{
											"begin": 9102,
											"end": 9835,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9102,
											"end": 9835,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9102,
											"end": 9835,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9102,
											"end": 9835,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 9102,
											"end": 9835,
											"name": "tag",
											"source": 10,
											"value": "303"
										},
										{
											"begin": 9102,
											"end": 9835,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9845,
											"end": 9863,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 9855,
											"end": 9862,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 9845,
											"end": 9854,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 9845,
											"end": 9863,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "tag",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 4618,
											"end": 4899,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "324"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "324"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4726,
											"end": 4743,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4726,
											"end": 4743,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4743,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4743,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4734,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 4726,
											"end": 4743,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4726,
											"end": 4743,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4743,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4743,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4743,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4726,
											"end": 4743,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4743,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4743,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4726,
											"end": 4757,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4757,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4757,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4757,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4749,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 4726,
											"end": 4749,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4757,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4757,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4757,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4757,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4757,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4757,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 4761,
											"end": 4762,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 4726,
											"end": 4762,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 4726,
											"end": 4762,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4718,
											"end": 4802,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "326"
										},
										{
											"begin": 4718,
											"end": 4802,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4718,
											"end": 4802,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4718,
											"end": 4802,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4718,
											"end": 4802,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4718,
											"end": 4802,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8857,
											"end": 8859,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 4718,
											"end": 4802,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 4718,
											"end": 4802,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4718,
											"end": 4802,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8839,
											"end": 8860,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8896,
											"end": 8898,
											"name": "PUSH",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 8876,
											"end": 8894,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 8876,
											"end": 8894,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8876,
											"end": 8894,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8869,
											"end": 8899,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8935,
											"end": 8969,
											"name": "PUSH",
											"source": 11,
											"value": "54726F706879204B696E67204172636164653A20416C72656164792073656174"
										},
										{
											"begin": 8915,
											"end": 8933,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 8915,
											"end": 8933,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8915,
											"end": 8933,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8908,
											"end": 8970,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "32B217"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8986,
											"end": 9004,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 8986,
											"end": 9004,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8986,
											"end": 9004,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8979,
											"end": 9012,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9029,
											"end": 9048,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 9029,
											"end": 9048,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4718,
											"end": 4802,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 8829,
											"end": 9054,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4718,
											"end": 4802,
											"name": "tag",
											"source": 10,
											"value": "326"
										},
										{
											"begin": 4718,
											"end": 4802,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4830,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 4813,
											"end": 4830,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4830,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4830,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4821,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 4813,
											"end": 4830,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4813,
											"end": 4830,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4830,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4830,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4830,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4813,
											"end": 4830,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4830,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4830,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4813,
											"end": 4844,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4844,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4844,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4844,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4844,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4836,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 4813,
											"end": 4836,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4836,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4836,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4844,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4844,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4844,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4844,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4844,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4844,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4847,
											"end": 4848,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 4813,
											"end": 4848,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4813,
											"end": 4848,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4864,
											"end": 4892,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4864,
											"end": 4892,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4674,
											"end": 4725,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4674,
											"end": 4725,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4674,
											"end": 4725,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4741,
											"end": 4759,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4741,
											"end": 4759,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4741,
											"end": 4759,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4734,
											"end": 4768,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 4734,
											"end": 4768,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4734,
											"end": 4768,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4864,
											"end": 4892,
											"name": "PUSH",
											"source": 10,
											"value": "9F2DEEFFF0A36949D580CDD4BA9959B4A94786E786BAD5650001B58B625FBBB1"
										},
										{
											"begin": 4864,
											"end": 4892,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4647,
											"end": 4665,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4864,
											"end": 4892,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 4629,
											"end": 4774,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "tag",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 5149,
											"end": 5296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4465,
											"end": 4472,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4503,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "332"
										},
										{
											"begin": 2516,
											"end": 2520,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "332"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5263,
											"end": 5289,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 5275,
											"end": 5279,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5281,
											"end": 5288,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5263,
											"end": 5274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 5263,
											"end": 5289,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "tag",
											"source": 10,
											"value": "174"
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6581,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6564,
											"end": 6581,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6581,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6581,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6572,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 6564,
											"end": 6581,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6564,
											"end": 6581,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6581,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6581,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6581,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6564,
											"end": 6581,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6581,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6581,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 6588,
											"end": 6598,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6599,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6599,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6587,
											"name": "PUSH",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 6564,
											"end": 6587,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6599,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6599,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6599,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6599,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6599,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 6564,
											"end": 6599,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6603,
											"end": 6604,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 6564,
											"end": 6604,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 6556,
											"end": 6642,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "337"
										},
										{
											"begin": 6556,
											"end": 6642,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6556,
											"end": 6642,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6556,
											"end": 6642,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6556,
											"end": 6642,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6556,
											"end": 6642,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6556,
											"end": 6642,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 6556,
											"end": 6642,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6556,
											"end": 6642,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 6556,
											"end": 6642,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6556,
											"end": 6642,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "276"
										},
										{
											"begin": 6556,
											"end": 6642,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6556,
											"end": 6642,
											"name": "tag",
											"source": 10,
											"value": "337"
										},
										{
											"begin": 6556,
											"end": 6642,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6660,
											"end": 6677,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6660,
											"end": 6677,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6660,
											"end": 6677,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6660,
											"end": 6677,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6660,
											"end": 6668,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 6660,
											"end": 6677,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6660,
											"end": 6677,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6660,
											"end": 6677,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6660,
											"end": 6677,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6660,
											"end": 6677,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 6660,
											"end": 6684,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 6660,
											"end": 6684,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6660,
											"end": 6684,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6688,
											"end": 6689,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 6660,
											"end": 6689,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 6652,
											"end": 6726,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "339"
										},
										{
											"begin": 6652,
											"end": 6726,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6652,
											"end": 6726,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6652,
											"end": 6726,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6652,
											"end": 6726,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6652,
											"end": 6726,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7669,
											"end": 7671,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6652,
											"end": 6726,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 6652,
											"end": 6726,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6652,
											"end": 6726,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7651,
											"end": 7672,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7651,
											"end": 7672,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7651,
											"end": 7672,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7688,
											"end": 7706,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 7688,
											"end": 7706,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7688,
											"end": 7706,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7681,
											"end": 7711,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7747,
											"end": 7781,
											"name": "PUSH",
											"source": 11,
											"value": "54726F706879204B696E67204172636164653A2047616D6520636C6F7365642E"
										},
										{
											"begin": 7727,
											"end": 7745,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 7727,
											"end": 7745,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7727,
											"end": 7745,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7720,
											"end": 7782,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7799,
											"end": 7817,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 7799,
											"end": 7817,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6652,
											"end": 6726,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 7641,
											"end": 7823,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6652,
											"end": 6726,
											"name": "tag",
											"source": 10,
											"value": "339"
										},
										{
											"begin": 6652,
											"end": 6726,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6777,
											"end": 6794,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6777,
											"end": 6794,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6777,
											"end": 6794,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6777,
											"end": 6794,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6777,
											"end": 6785,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 6777,
											"end": 6794,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6777,
											"end": 6794,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6777,
											"end": 6794,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6777,
											"end": 6794,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6777,
											"end": 6794,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6777,
											"end": 6794,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6777,
											"end": 6794,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6777,
											"end": 6794,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 6777,
											"end": 6807,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 6777,
											"end": 6807,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6777,
											"end": 6807,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6777,
											"end": 6807,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6744,
											"end": 6774,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6744,
											"end": 6774,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6744,
											"end": 6774,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6744,
											"end": 6807,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 6736,
											"end": 6854,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "341"
										},
										{
											"begin": 6736,
											"end": 6854,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6736,
											"end": 6854,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6736,
											"end": 6854,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6736,
											"end": 6854,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6736,
											"end": 6854,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6736,
											"end": 6854,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 6736,
											"end": 6854,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6736,
											"end": 6854,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 6736,
											"end": 6854,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6736,
											"end": 6854,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "282"
										},
										{
											"begin": 6736,
											"end": 6854,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6736,
											"end": 6854,
											"name": "tag",
											"source": 10,
											"value": "341"
										},
										{
											"begin": 6736,
											"end": 6854,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6889,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6872,
											"end": 6889,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6889,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6889,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6880,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 6872,
											"end": 6889,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6872,
											"end": 6889,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6889,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6889,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6889,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6872,
											"end": 6889,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6889,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6889,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 6895,
											"end": 6905,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6906,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6906,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6894,
											"name": "PUSH",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 6872,
											"end": 6894,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6906,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6906,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6906,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6906,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6906,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6906,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6872,
											"end": 6911,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 6864,
											"end": 6955,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 6864,
											"end": 6955,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6864,
											"end": 6955,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6864,
											"end": 6955,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6864,
											"end": 6955,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6864,
											"end": 6955,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6864,
											"end": 6955,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 6864,
											"end": 6955,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6864,
											"end": 6955,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 6864,
											"end": 6955,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6864,
											"end": 6955,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "285"
										},
										{
											"begin": 6864,
											"end": 6955,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6864,
											"end": 6955,
											"name": "tag",
											"source": 10,
											"value": "343"
										},
										{
											"begin": 6864,
											"end": 6955,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7006,
											"end": 7007,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6973,
											"end": 6990,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6973,
											"end": 6990,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6973,
											"end": 6990,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6973,
											"end": 6981,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 6973,
											"end": 6990,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6973,
											"end": 6990,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6973,
											"end": 6990,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6973,
											"end": 6990,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6973,
											"end": 6990,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6973,
											"end": 6990,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6973,
											"end": 6990,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6973,
											"end": 6990,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 6973,
											"end": 7003,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6973,
											"end": 7003,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6965,
											"end": 7047,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "345"
										},
										{
											"begin": 6965,
											"end": 7047,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6965,
											"end": 7047,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6965,
											"end": 7047,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6965,
											"end": 7047,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6965,
											"end": 7047,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6965,
											"end": 7047,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 6965,
											"end": 7047,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6965,
											"end": 7047,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 6965,
											"end": 7047,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6965,
											"end": 7047,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "288"
										},
										{
											"begin": 6965,
											"end": 7047,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6965,
											"end": 7047,
											"name": "tag",
											"source": 10,
											"value": "345"
										},
										{
											"begin": 6965,
											"end": 7047,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7119,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7087,
											"end": 7104,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7087,
											"end": 7104,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7087,
											"end": 7104,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7087,
											"end": 7095,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7087,
											"end": 7104,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7087,
											"end": 7104,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7087,
											"end": 7104,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7087,
											"end": 7104,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7087,
											"end": 7104,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7087,
											"end": 7104,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7087,
											"end": 7104,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7087,
											"end": 7104,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7087,
											"end": 7117,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 7087,
											"end": 7117,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7087,
											"end": 7117,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7087,
											"end": 7117,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7087,
											"end": 7117,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7087,
											"end": 7117,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7119,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7119,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7085,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 7065,
											"end": 7119,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7119,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7119,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7119,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7119,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7119,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7132,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7132,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7145,
											"name": "PUSH",
											"source": 10,
											"value": "23B872DD"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 7175,
											"end": 7192,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7175,
											"end": 7192,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7175,
											"end": 7192,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7175,
											"end": 7192,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7175,
											"end": 7183,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7175,
											"end": 7192,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7175,
											"end": 7192,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7175,
											"end": 7192,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7175,
											"end": 7192,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7175,
											"end": 7192,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7175,
											"end": 7192,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7175,
											"end": 7192,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7175,
											"end": 7209,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 7175,
											"end": 7209,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7175,
											"end": 7209,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4293,
											"end": 4308,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4293,
											"end": 4308,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 4293,
											"end": 4308,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 4275,
											"end": 4309,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7168,
											"end": 7172,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 4325,
											"end": 4343,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 4325,
											"end": 4343,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4325,
											"end": 4343,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4318,
											"end": 4361,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4377,
											"end": 4395,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 4377,
											"end": 4395,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4377,
											"end": 4395,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4370,
											"end": 4404,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4210,
											"end": 4228,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 4210,
											"end": 4228,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "EXTCODESIZE",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "tag",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "GAS",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "CALL",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "352"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "RETURNDATACOPY",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "tag",
											"source": 10,
											"value": "352"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "RETURNDATASIZE",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "353"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "204"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "tag",
											"source": 10,
											"value": "353"
										},
										{
											"begin": 7065,
											"end": 7210,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7057,
											"end": 7265,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "354"
										},
										{
											"begin": 7057,
											"end": 7265,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 7057,
											"end": 7265,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7057,
											"end": 7265,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7057,
											"end": 7265,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7057,
											"end": 7265,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8438,
											"end": 8440,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 7057,
											"end": 7265,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 7057,
											"end": 7265,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7057,
											"end": 7265,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8420,
											"end": 8441,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8477,
											"end": 8479,
											"name": "PUSH",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 8457,
											"end": 8475,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 8457,
											"end": 8475,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8457,
											"end": 8475,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8450,
											"end": 8480,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8516,
											"end": 8550,
											"name": "PUSH",
											"source": 11,
											"value": "54726F706879204B696E67204172636164653A204D75737420617070726F7665"
										},
										{
											"begin": 8496,
											"end": 8514,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 8496,
											"end": 8514,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8496,
											"end": 8514,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8489,
											"end": 8551,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "103932B3B4B9BA3930BA34B7B7103332B297"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8567,
											"end": 8585,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 8567,
											"end": 8585,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8567,
											"end": 8585,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8560,
											"end": 8608,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8625,
											"end": 8644,
											"name": "PUSH",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 8625,
											"end": 8644,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7265,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 8410,
											"end": 8650,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 7057,
											"end": 7265,
											"name": "tag",
											"source": 10,
											"value": "354"
										},
										{
											"begin": 7057,
											"end": 7265,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7307,
											"end": 7324,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7307,
											"end": 7324,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7307,
											"end": 7324,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7307,
											"end": 7324,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7307,
											"end": 7315,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 7307,
											"end": 7324,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 7307,
											"end": 7324,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7307,
											"end": 7324,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 7307,
											"end": 7324,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7307,
											"end": 7324,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 7307,
											"end": 7341,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 7307,
											"end": 7341,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7307,
											"end": 7341,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 7276,
											"end": 7342,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "357"
										},
										{
											"begin": 7276,
											"end": 7342,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7286,
											"end": 7293,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7286,
											"end": 7293,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7295,
											"end": 7305,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 7295,
											"end": 7305,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7276,
											"end": 7285,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "299"
										},
										{
											"begin": 7276,
											"end": 7342,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 7276,
											"end": 7342,
											"name": "tag",
											"source": 10,
											"value": "357"
										},
										{
											"begin": 7276,
											"end": 7342,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6504,
											"end": 7349,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "tag",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "359"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "359"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3729,
											"end": 3746,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3729,
											"end": 3746,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3729,
											"end": 3746,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3729,
											"end": 3746,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3729,
											"end": 3737,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 3729,
											"end": 3746,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3729,
											"end": 3746,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3729,
											"end": 3746,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3729,
											"end": 3746,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3729,
											"end": 3746,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3729,
											"end": 3746,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3729,
											"end": 3746,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3729,
											"end": 3746,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3756,
											"end": 3757,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 3729,
											"end": 3753,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 3729,
											"end": 3753,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3729,
											"end": 3753,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3729,
											"end": 3757,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3729,
											"end": 3757,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3729,
											"end": 3757,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 3767,
											"end": 3794,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 3767,
											"end": 3794,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3767,
											"end": 3794,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3767,
											"end": 3798,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3767,
											"end": 3798,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3767,
											"end": 3798,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 3808,
											"end": 3842,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 3808,
											"end": 3842,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3808,
											"end": 3842,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3808,
											"end": 3861,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 3808,
											"end": 3861,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3808,
											"end": 3861,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 3871,
											"end": 3901,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 3871,
											"end": 3901,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3871,
											"end": 3901,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3871,
											"end": 3916,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3871,
											"end": 3916,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3871,
											"end": 3916,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3871,
											"end": 3916,
											"name": "DUP13",
											"source": 10
										},
										{
											"begin": 3871,
											"end": 3916,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3871,
											"end": 3916,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 3871,
											"end": 3916,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3871,
											"end": 3916,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 3926,
											"end": 3956,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3926,
											"end": 3956,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3926,
											"end": 3960,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 3926,
											"end": 3960,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3926,
											"end": 3960,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 3926,
											"end": 3960,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 3970,
											"end": 4000,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3970,
											"end": 4000,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3970,
											"end": 4000,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3970,
											"end": 4015,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3970,
											"end": 4015,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3970,
											"end": 4015,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4025,
											"end": 4062,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 4025,
											"end": 4062,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4025,
											"end": 4062,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 4025,
											"end": 4062,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 4025,
											"end": 4062,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4025,
											"end": 4062,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 4025,
											"end": 4062,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 4025,
											"end": 4062,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4025,
											"end": 4062,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 4025,
											"end": 4062,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 4078,
											"end": 4097,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 4078,
											"end": 4097,
											"name": "PUSH",
											"source": 10,
											"value": "9E5237C6A8BB45DF74799CF138EBDA4FED0574BED906DA41387ACDC4A3CBE3D8"
										},
										{
											"begin": 4078,
											"end": 4097,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6280,
											"end": 6298,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 4078,
											"end": 4097,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 4078,
											"end": 4097,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 4078,
											"end": 4097,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 4078,
											"end": 4097,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 4078,
											"end": 4097,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 4078,
											"end": 4097,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4078,
											"end": 4097,
											"name": "LOG1",
											"source": 10
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3561,
											"end": 4104,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "tag",
											"source": 10,
											"value": "183"
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "363"
										},
										{
											"begin": 2072,
											"end": 2076,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2505,
											"end": 2515,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "tag",
											"source": 0,
											"value": "363"
										},
										{
											"begin": 2505,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8902,
											"end": 8914,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 8902,
											"end": 8925,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8902,
											"end": 8925,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8902,
											"end": 8925,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8902,
											"end": 8925,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8902,
											"end": 8925,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8902,
											"end": 8925,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 8902,
											"end": 8925,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8902,
											"end": 8925,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8902,
											"end": 8925,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8902,
											"end": 8925,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8902,
											"end": 8925,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 8902,
											"end": 8925,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8902,
											"end": 8925,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 8814,
											"end": 8932,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3334,
											"end": 3437,
											"name": "tag",
											"source": 0,
											"value": "186"
										},
										{
											"begin": 3334,
											"end": 3437,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3400,
											"end": 3430,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "357"
										},
										{
											"begin": 3411,
											"end": 3415,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 3400,
											"end": 3410,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "368"
										},
										{
											"begin": 3400,
											"end": 3430,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7244,
											"end": 7477,
											"name": "tag",
											"source": 0,
											"value": "226"
										},
										{
											"begin": 7244,
											"end": 7477,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7327,
											"end": 7349,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "372"
										},
										{
											"begin": 7335,
											"end": 7339,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7341,
											"end": 7348,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7327,
											"end": 7334,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 7327,
											"end": 7349,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7327,
											"end": 7349,
											"name": "tag",
											"source": 0,
											"value": "372"
										},
										{
											"begin": 7327,
											"end": 7349,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7322,
											"end": 7471,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 7322,
											"end": 7471,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7371,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7377,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7394,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7397,
											"end": 7401,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7365,
											"end": 7401,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 7447,
											"end": 7459,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "374"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7447,
											"end": 7459,
											"name": "tag",
											"source": 0,
											"value": "374"
										},
										{
											"begin": 7447,
											"end": 7459,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7438,
											"end": 7445,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7432,
											"end": 7436,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D"
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7420,
											"end": 7460,
											"name": "LOG4",
											"source": 0
										},
										{
											"begin": 7244,
											"end": 7477,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7244,
											"end": 7477,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7244,
											"end": 7477,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7602,
											"end": 7836,
											"name": "tag",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 7602,
											"end": 7836,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7707,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "376"
										},
										{
											"begin": 7693,
											"end": 7697,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7699,
											"end": 7706,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7685,
											"end": 7692,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 7685,
											"end": 7707,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 7685,
											"end": 7707,
											"name": "tag",
											"source": 0,
											"value": "376"
										},
										{
											"begin": 7685,
											"end": 7707,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7681,
											"end": 7830,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7681,
											"end": 7830,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 7681,
											"end": 7830,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 7755,
											"end": 7760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7752,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7760,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7760,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7723,
											"end": 7760,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7760,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7760,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 7779,
											"end": 7819,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 719,
											"end": 729,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 7723,
											"end": 7735,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7779,
											"end": 7819,
											"name": "PUSH",
											"source": 0,
											"value": "F6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B"
										},
										{
											"begin": 7779,
											"end": 7819,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 7755,
											"end": 7760,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 7779,
											"end": 7819,
											"name": "LOG4",
											"source": 0
										},
										{
											"begin": 7602,
											"end": 7836,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7602,
											"end": 7836,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 7602,
											"end": 7836,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 6097,
											"end": 6432,
											"name": "tag",
											"source": 10,
											"value": "299"
										},
										{
											"begin": 6097,
											"end": 6432,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6192,
											"end": 6211,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6214,
											"end": 6231,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6214,
											"end": 6231,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6214,
											"end": 6231,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6214,
											"end": 6222,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 6214,
											"end": 6231,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6214,
											"end": 6231,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6214,
											"end": 6231,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6214,
											"end": 6231,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6214,
											"end": 6231,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 6261,
											"end": 6262,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 6242,
											"end": 6257,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6242,
											"end": 6257,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6242,
											"end": 6257,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6242,
											"end": 6262,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6242,
											"end": 6262,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6214,
											"end": 6231,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6214,
											"end": 6231,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 6261,
											"end": 6262,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6261,
											"end": 6262,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6242,
											"end": 6257,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6242,
											"end": 6257,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6192,
											"end": 6211,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6242,
											"end": 6262,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "380"
										},
										{
											"begin": 6242,
											"end": 6262,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6261,
											"end": 6262,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6261,
											"end": 6262,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6242,
											"end": 6262,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "381"
										},
										{
											"begin": 6242,
											"end": 6262,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6242,
											"end": 6262,
											"name": "tag",
											"source": 10,
											"value": "380"
										},
										{
											"begin": 6242,
											"end": 6262,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6242,
											"end": 6262,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6242,
											"end": 6262,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6242,
											"end": 6262,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6272,
											"end": 6294,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6294,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6294,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6272,
											"end": 6294,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6294,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6294,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6278,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 6272,
											"end": 6278,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6278,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6294,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 6272,
											"end": 6294,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6294,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6294,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6294,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6272,
											"end": 6294,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6294,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6294,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6303,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6303,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6303,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 6313,
											"end": 6320,
											"name": "PUSH",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 6313,
											"end": 6320,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6313,
											"end": 6320,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6313,
											"end": 6336,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6313,
											"end": 6336,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6313,
											"end": 6336,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 6313,
											"end": 6336,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6313,
											"end": 6336,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 6339,
											"end": 6340,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 6313,
											"end": 6340,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6313,
											"end": 6340,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 6350,
											"end": 6362,
											"name": "PUSH",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 6350,
											"end": 6362,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6350,
											"end": 6362,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 6350,
											"end": 6372,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6350,
											"end": 6372,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6297,
											"end": 6303,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6297,
											"end": 6303,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6272,
											"end": 6294,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6350,
											"end": 6372,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "382"
										},
										{
											"begin": 6350,
											"end": 6372,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6297,
											"end": 6303,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 6297,
											"end": 6303,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6350,
											"end": 6372,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "381"
										},
										{
											"begin": 6350,
											"end": 6372,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 6350,
											"end": 6372,
											"name": "tag",
											"source": 10,
											"value": "382"
										},
										{
											"begin": 6350,
											"end": 6372,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6350,
											"end": 6372,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6350,
											"end": 6372,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6350,
											"end": 6372,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6396,
											"end": 6425,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6396,
											"end": 6425,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6307,
											"end": 6332,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6405,
											"end": 6415,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 6405,
											"end": 6415,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6396,
											"end": 6425,
											"name": "PUSH",
											"source": 10,
											"value": "7DC6AB80CC84C043B7B8D4FCAFC802187470087F7EA7FCCD2E17AECD0256A1"
										},
										{
											"begin": 6396,
											"end": 6425,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6295,
											"end": 6297,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6280,
											"end": 6298,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6396,
											"end": 6425,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 6396,
											"end": 6425,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 6396,
											"end": 6425,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6396,
											"end": 6425,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6396,
											"end": 6425,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 6396,
											"end": 6425,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6396,
											"end": 6425,
											"name": "LOG2",
											"source": 10
										},
										{
											"begin": 6097,
											"end": 6432,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6097,
											"end": 6432,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6097,
											"end": 6432,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6097,
											"end": 6432,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6097,
											"end": 6432,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3718,
											"end": 4210,
											"name": "tag",
											"source": 0,
											"value": "368"
										},
										{
											"begin": 3718,
											"end": 4210,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3806,
											"end": 3828,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "385"
										},
										{
											"begin": 3814,
											"end": 3818,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3820,
											"end": 3827,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3806,
											"end": 3813,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 3806,
											"end": 3828,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3806,
											"end": 3828,
											"name": "tag",
											"source": 0,
											"value": "385"
										},
										{
											"begin": 3806,
											"end": 3828,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3801,
											"end": 4204,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 3801,
											"end": 4204,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3989,
											"end": 4030,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "387"
										},
										{
											"begin": 4017,
											"end": 4024,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3989,
											"end": 4030,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 4027,
											"end": 4029,
											"name": "PUSH",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 3989,
											"end": 4008,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "388"
										},
										{
											"begin": 3989,
											"end": 4030,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3989,
											"end": 4030,
											"name": "tag",
											"source": 0,
											"value": "387"
										},
										{
											"begin": 3989,
											"end": 4030,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4101,
											"end": 4139,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "389"
										},
										{
											"begin": 4129,
											"end": 4133,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 4136,
											"end": 4138,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4101,
											"end": 4120,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "388"
										},
										{
											"begin": 4101,
											"end": 4139,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4101,
											"end": 4139,
											"name": "tag",
											"source": 0,
											"value": "389"
										},
										{
											"begin": 4101,
											"end": 4139,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "390"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "391"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "tag",
											"source": 0,
											"value": "390"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3896,
											"end": 4161,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "230"
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "393"
										},
										{
											"begin": 3844,
											"end": 4193,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1588,
											"end": 2029,
											"name": "tag",
											"source": 6,
											"value": "388"
										},
										{
											"begin": 1588,
											"end": 2029,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1663,
											"end": 1676,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 1688,
											"end": 1707,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "395"
										},
										{
											"begin": 1724,
											"end": 1730,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1720,
											"end": 1721,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "309"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "tag",
											"source": 6,
											"value": "395"
										},
										{
											"begin": 1720,
											"end": 1730,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "396"
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1733,
											"end": 1734,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "381"
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "tag",
											"source": 6,
											"value": "396"
										},
										{
											"begin": 1720,
											"end": 1734,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "397"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "tag",
											"source": 6,
											"value": "397"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "398"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "CALLDATACOPY",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "tag",
											"source": 6,
											"value": "398"
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1710,
											"end": 1735,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1688,
											"end": 1735,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1688,
											"end": 1735,
											"name": "POP",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1745,
											"end": 1751,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1752,
											"end": 1753,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "399"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "tag",
											"source": 6,
											"value": "399"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1754,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "BYTE",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "MSTORE8",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1760,
											"name": "POP",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1770,
											"end": 1776,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1777,
											"end": 1778,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "400"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "tag",
											"source": 6,
											"value": "400"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "BYTE",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1770,
											"end": 1785,
											"name": "MSTORE8",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1800,
											"end": 1809,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "404"
										},
										{
											"begin": 1816,
											"end": 1822,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1812,
											"end": 1813,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "309"
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "tag",
											"source": 6,
											"value": "404"
										},
										{
											"begin": 1812,
											"end": 1822,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "405"
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1825,
											"end": 1826,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "381"
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "tag",
											"source": 6,
											"value": "405"
										},
										{
											"begin": 1812,
											"end": 1826,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1800,
											"end": 1826,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1800,
											"end": 1826,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "tag",
											"source": 6,
											"value": "401"
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1832,
											"end": 1833,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1828,
											"end": 1829,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1828,
											"end": 1833,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "402"
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "181899199A1A9B1B9C1CB0B131B232B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1879,
											"end": 1884,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1887,
											"end": 1890,
											"name": "PUSH",
											"source": 6,
											"value": "F"
										},
										{
											"begin": 1879,
											"end": 1890,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "406"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "tag",
											"source": 6,
											"value": "406"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "BYTE",
											"source": 6
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "PUSH",
											"source": 6,
											"value": "F8"
										},
										{
											"begin": 1866,
											"end": 1891,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1860,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1861,
											"end": 1862,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "407"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "tag",
											"source": 6,
											"value": "407"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1863,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "BYTE",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1854,
											"end": 1891,
											"name": "MSTORE8",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1915,
											"end": 1916,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 1905,
											"end": 1916,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "408"
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "409"
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "tag",
											"source": 6,
											"value": "408"
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1835,
											"end": 1838,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "401"
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "tag",
											"source": 6,
											"value": "402"
										},
										{
											"begin": 1795,
											"end": 1927,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1944,
											"end": 1954,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1944,
											"end": 1954,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "410"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7308,
											"end": 7310,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7290,
											"end": 7311,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7290,
											"end": 7311,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7290,
											"end": 7311,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7327,
											"end": 7345,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 7327,
											"end": 7345,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7327,
											"end": 7345,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7320,
											"end": 7350,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7386,
											"end": 7420,
											"name": "PUSH",
											"source": 11,
											"value": "537472696E67733A20686578206C656E67746820696E73756666696369656E74"
										},
										{
											"begin": 7366,
											"end": 7384,
											"name": "PUSH",
											"source": 11,
											"value": "44"
										},
										{
											"begin": 7366,
											"end": 7384,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 7366,
											"end": 7384,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7359,
											"end": 7421,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 7438,
											"end": 7456,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 7438,
											"end": 7456,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "230"
										},
										{
											"begin": 7280,
											"end": 7462,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "tag",
											"source": 6,
											"value": "410"
										},
										{
											"begin": 1936,
											"end": 1991,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2015,
											"end": 2021,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1588,
											"end": 2029,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1588,
											"end": 2029,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "tag",
											"source": 11,
											"value": "414"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 82,
											"end": 102,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 82,
											"end": 102,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 131,
											"end": 162,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 131,
											"end": 162,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 121,
											"end": 163,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 121,
											"end": 163,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 111,
											"end": 113,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "416"
										},
										{
											"begin": 111,
											"end": 113,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 177,
											"end": 178,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 175,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 167,
											"end": 179,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 111,
											"end": 113,
											"name": "tag",
											"source": 11,
											"value": "416"
										},
										{
											"begin": 111,
											"end": 113,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 63,
											"end": 187,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 63,
											"end": 187,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 63,
											"end": 187,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 63,
											"end": 187,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 192,
											"end": 388,
											"name": "tag",
											"source": 11,
											"value": "98"
										},
										{
											"begin": 192,
											"end": 388,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 251,
											"end": 257,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 304,
											"end": 306,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 292,
											"end": 301,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 283,
											"end": 290,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 279,
											"end": 302,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 275,
											"end": 307,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 272,
											"end": 274,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 272,
											"end": 274,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "418"
										},
										{
											"begin": 272,
											"end": 274,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 325,
											"end": 331,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 317,
											"end": 323,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 310,
											"end": 332,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 272,
											"end": 274,
											"name": "tag",
											"source": 11,
											"value": "418"
										},
										{
											"begin": 272,
											"end": 274,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 353,
											"end": 382,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "410"
										},
										{
											"begin": 372,
											"end": 381,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 353,
											"end": 382,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "414"
										},
										{
											"begin": 353,
											"end": 382,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 393,
											"end": 786,
											"name": "tag",
											"source": 11,
											"value": "55"
										},
										{
											"begin": 393,
											"end": 786,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 467,
											"end": 473,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 475,
											"end": 481,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 483,
											"end": 489,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 536,
											"end": 538,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 524,
											"end": 533,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 515,
											"end": 522,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 511,
											"end": 534,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 507,
											"end": 539,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 504,
											"end": 506,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 504,
											"end": 506,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "421"
										},
										{
											"begin": 504,
											"end": 506,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 557,
											"end": 563,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 549,
											"end": 555,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 542,
											"end": 564,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 504,
											"end": 506,
											"name": "tag",
											"source": 11,
											"value": "421"
										},
										{
											"begin": 504,
											"end": 506,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 585,
											"end": 614,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "422"
										},
										{
											"begin": 604,
											"end": 613,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 585,
											"end": 614,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "414"
										},
										{
											"begin": 585,
											"end": 614,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 585,
											"end": 614,
											"name": "tag",
											"source": 11,
											"value": "422"
										},
										{
											"begin": 585,
											"end": 614,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 575,
											"end": 614,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 575,
											"end": 614,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 661,
											"end": 663,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 650,
											"end": 659,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 646,
											"end": 664,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 633,
											"end": 665,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 623,
											"end": 665,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 623,
											"end": 665,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 715,
											"end": 717,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 704,
											"end": 713,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 700,
											"end": 718,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 687,
											"end": 719,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 728,
											"end": 756,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "423"
										},
										{
											"begin": 750,
											"end": 755,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 728,
											"end": 756,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "424"
										},
										{
											"begin": 728,
											"end": 756,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 728,
											"end": 756,
											"name": "tag",
											"source": 11,
											"value": "423"
										},
										{
											"begin": 728,
											"end": 756,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 775,
											"end": 780,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 765,
											"end": 780,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 765,
											"end": 780,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 765,
											"end": 780,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 494,
											"end": 786,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 494,
											"end": 786,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 494,
											"end": 786,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 494,
											"end": 786,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 494,
											"end": 786,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 494,
											"end": 786,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 791,
											"end": 1046,
											"name": "tag",
											"source": 11,
											"value": "204"
										},
										{
											"begin": 791,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 858,
											"end": 864,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 911,
											"end": 913,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 899,
											"end": 908,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 890,
											"end": 897,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 886,
											"end": 909,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 882,
											"end": 914,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 879,
											"end": 881,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 879,
											"end": 881,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "426"
										},
										{
											"begin": 879,
											"end": 881,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 932,
											"end": 938,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 924,
											"end": 930,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 917,
											"end": 939,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 879,
											"end": 881,
											"name": "tag",
											"source": 11,
											"value": "426"
										},
										{
											"begin": 879,
											"end": 881,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 969,
											"end": 978,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 963,
											"end": 979,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1016,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "410"
										},
										{
											"begin": 1010,
											"end": 1015,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 988,
											"end": 1016,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "424"
										},
										{
											"begin": 988,
											"end": 1016,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1051,
											"end": 1241,
											"name": "tag",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 1051,
											"end": 1241,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1110,
											"end": 1116,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1163,
											"end": 1165,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1151,
											"end": 1160,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1142,
											"end": 1149,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1138,
											"end": 1161,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1134,
											"end": 1166,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1131,
											"end": 1133,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1131,
											"end": 1133,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "429"
										},
										{
											"begin": 1131,
											"end": 1133,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1184,
											"end": 1190,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1176,
											"end": 1182,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1169,
											"end": 1191,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1131,
											"end": 1133,
											"name": "tag",
											"source": 11,
											"value": "429"
										},
										{
											"begin": 1131,
											"end": 1133,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1212,
											"end": 1235,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1212,
											"end": 1235,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1241,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1121,
											"end": 1241,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1246,
											"end": 1510,
											"name": "tag",
											"source": 11,
											"value": "84"
										},
										{
											"begin": 1246,
											"end": 1510,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1314,
											"end": 1320,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1322,
											"end": 1328,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1375,
											"end": 1377,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1363,
											"end": 1372,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1354,
											"end": 1361,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 1350,
											"end": 1373,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1346,
											"end": 1378,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1343,
											"end": 1345,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1343,
											"end": 1345,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "431"
										},
										{
											"begin": 1343,
											"end": 1345,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1396,
											"end": 1402,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1388,
											"end": 1394,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1381,
											"end": 1403,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1343,
											"end": 1345,
											"name": "tag",
											"source": 11,
											"value": "431"
										},
										{
											"begin": 1343,
											"end": 1345,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1437,
											"end": 1446,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1424,
											"end": 1447,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 1414,
											"end": 1447,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1414,
											"end": 1447,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1466,
											"end": 1504,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "432"
										},
										{
											"begin": 1500,
											"end": 1502,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1489,
											"end": 1498,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1485,
											"end": 1503,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1466,
											"end": 1504,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "414"
										},
										{
											"begin": 1466,
											"end": 1504,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1466,
											"end": 1504,
											"name": "tag",
											"source": 11,
											"value": "432"
										},
										{
											"begin": 1466,
											"end": 1504,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1456,
											"end": 1504,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1456,
											"end": 1504,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1333,
											"end": 1510,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1333,
											"end": 1510,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1333,
											"end": 1510,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1333,
											"end": 1510,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1333,
											"end": 1510,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1333,
											"end": 1510,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 1515,
											"end": 1821,
											"name": "tag",
											"source": 11,
											"value": "48"
										},
										{
											"begin": 1515,
											"end": 1821,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1573,
											"end": 1579,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1626,
											"end": 1628,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1614,
											"end": 1623,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1605,
											"end": 1612,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 1601,
											"end": 1624,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1597,
											"end": 1629,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 1594,
											"end": 1596,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1594,
											"end": 1596,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "434"
										},
										{
											"begin": 1594,
											"end": 1596,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1647,
											"end": 1653,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1639,
											"end": 1645,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1632,
											"end": 1654,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1594,
											"end": 1596,
											"name": "tag",
											"source": 11,
											"value": "434"
										},
										{
											"begin": 1594,
											"end": 1596,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1678,
											"end": 1701,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1678,
											"end": 1701,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1730,
											"end": 1762,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1730,
											"end": 1762,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1720,
											"end": 1763,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1720,
											"end": 1763,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1710,
											"end": 1712,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "410"
										},
										{
											"begin": 1710,
											"end": 1712,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1782,
											"end": 1788,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1774,
											"end": 1780,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1767,
											"end": 1789,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2290,
											"end": 2821,
											"name": "tag",
											"source": 11,
											"value": "178"
										},
										{
											"begin": 2290,
											"end": 2821,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2382,
											"end": 2388,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2390,
											"end": 2396,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2398,
											"end": 2404,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2406,
											"end": 2412,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2414,
											"end": 2420,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2467,
											"end": 2470,
											"name": "PUSH",
											"source": 11,
											"value": "A0"
										},
										{
											"begin": 2455,
											"end": 2464,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 2446,
											"end": 2453,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 2442,
											"end": 2465,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2438,
											"end": 2471,
											"name": "SLT",
											"source": 11
										},
										{
											"begin": 2435,
											"end": 2437,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2435,
											"end": 2437,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "442"
										},
										{
											"begin": 2435,
											"end": 2437,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2489,
											"end": 2495,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2481,
											"end": 2487,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2474,
											"end": 2496,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 2435,
											"end": 2437,
											"name": "tag",
											"source": 11,
											"value": "442"
										},
										{
											"begin": 2435,
											"end": 2437,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2530,
											"end": 2539,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 2517,
											"end": 2540,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2507,
											"end": 2540,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 2507,
											"end": 2540,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2587,
											"end": 2589,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2576,
											"end": 2585,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 2572,
											"end": 2590,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2559,
											"end": 2591,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2549,
											"end": 2591,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 2549,
											"end": 2591,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2610,
											"end": 2648,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "443"
										},
										{
											"begin": 2644,
											"end": 2646,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2633,
											"end": 2642,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 2629,
											"end": 2647,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2610,
											"end": 2648,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "414"
										},
										{
											"begin": 2610,
											"end": 2648,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2610,
											"end": 2648,
											"name": "tag",
											"source": 11,
											"value": "443"
										},
										{
											"begin": 2610,
											"end": 2648,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2600,
											"end": 2648,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2600,
											"end": 2648,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2695,
											"end": 2697,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 2684,
											"end": 2693,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 2680,
											"end": 2698,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2667,
											"end": 2699,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2657,
											"end": 2699,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2657,
											"end": 2699,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2749,
											"end": 2752,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 2738,
											"end": 2747,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 2734,
											"end": 2753,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2721,
											"end": 2754,
											"name": "CALLDATALOAD",
											"source": 11
										},
										{
											"begin": 2763,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "444"
										},
										{
											"begin": 2785,
											"end": 2790,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2763,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "424"
										},
										{
											"begin": 2763,
											"end": 2791,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2763,
											"end": 2791,
											"name": "tag",
											"source": 11,
											"value": "444"
										},
										{
											"begin": 2763,
											"end": 2791,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2810,
											"end": 2815,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2800,
											"end": 2815,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2800,
											"end": 2815,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2800,
											"end": 2815,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2821,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2821,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2821,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2821,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2821,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2821,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2821,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2821,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2425,
											"end": 2821,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 3036,
											"end": 3822,
											"name": "tag",
											"source": 11,
											"value": "391"
										},
										{
											"begin": 3036,
											"end": 3822,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3447,
											"end": 3472,
											"name": "PUSH",
											"source": 11,
											"value": "416363657373436F6E74726F6C3A206163636F756E7420000000000000000000"
										},
										{
											"begin": 3442,
											"end": 3445,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3435,
											"end": 3473,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3417,
											"end": 3420,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3502,
											"end": 3508,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3496,
											"end": 3509,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3518,
											"end": 3580,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "447"
										},
										{
											"begin": 3573,
											"end": 3579,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3568,
											"end": 3570,
											"name": "PUSH",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 3563,
											"end": 3566,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 3559,
											"end": 3571,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3552,
											"end": 3556,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3544,
											"end": 3550,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 3540,
											"end": 3557,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3518,
											"end": 3580,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "448"
										},
										{
											"begin": 3518,
											"end": 3580,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3518,
											"end": 3580,
											"name": "tag",
											"source": 11,
											"value": "447"
										},
										{
											"begin": 3518,
											"end": 3580,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1034B99036B4B9B9B4B733903937B6329"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3639,
											"end": 3641,
											"name": "PUSH",
											"source": 11,
											"value": "17"
										},
										{
											"begin": 3599,
											"end": 3615,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3599,
											"end": 3615,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3599,
											"end": 3615,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3631,
											"end": 3642,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3631,
											"end": 3642,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3631,
											"end": 3642,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3624,
											"end": 3664,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3689,
											"end": 3702,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3689,
											"end": 3702,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3711,
											"end": 3774,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "449"
										},
										{
											"begin": 3689,
											"end": 3702,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3760,
											"end": 3762,
											"name": "PUSH",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 3752,
											"end": 3763,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3752,
											"end": 3763,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3745,
											"end": 3749,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3733,
											"end": 3750,
											"name": "DUP9",
											"source": 11
										},
										{
											"begin": 3733,
											"end": 3750,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3711,
											"end": 3774,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "448"
										},
										{
											"begin": 3711,
											"end": 3774,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 3711,
											"end": 3774,
											"name": "tag",
											"source": 11,
											"value": "449"
										},
										{
											"begin": 3711,
											"end": 3774,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3794,
											"end": 3811,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3813,
											"end": 3815,
											"name": "PUSH",
											"source": 11,
											"value": "28"
										},
										{
											"begin": 3790,
											"end": 3816,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3790,
											"end": 3816,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 3425,
											"end": 3822,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3425,
											"end": 3822,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 6718,
											"end": 7101,
											"name": "tag",
											"source": 11,
											"value": "393"
										},
										{
											"begin": 6718,
											"end": 7101,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 6867,
											"end": 6869,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6856,
											"end": 6865,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 6849,
											"end": 6870,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6830,
											"end": 6834,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 6899,
											"end": 6905,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 6893,
											"end": 6906,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 6942,
											"end": 6948,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 6937,
											"end": 6939,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6926,
											"end": 6935,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 6922,
											"end": 6940,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6915,
											"end": 6949,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 6958,
											"end": 7024,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "460"
										},
										{
											"begin": 7017,
											"end": 7023,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 7012,
											"end": 7014,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7001,
											"end": 7010,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 6997,
											"end": 7015,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6992,
											"end": 6994,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 6984,
											"end": 6990,
											"name": "DUP8",
											"source": 11
										},
										{
											"begin": 6980,
											"end": 6995,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 6958,
											"end": 7024,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "448"
										},
										{
											"begin": 6958,
											"end": 7024,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 6958,
											"end": 7024,
											"name": "tag",
											"source": 11,
											"value": "460"
										},
										{
											"begin": 6958,
											"end": 7024,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7085,
											"end": 7087,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 7064,
											"end": 7079,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7060,
											"end": 7089,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 7045,
											"end": 7090,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7045,
											"end": 7090,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 7045,
											"end": 7090,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 7045,
											"end": 7090,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7092,
											"end": 7094,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 7041,
											"end": 7095,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 7041,
											"end": 7095,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 6839,
											"end": 7101,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6839,
											"end": 7101,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 7828,
											"end": 8231,
											"name": "tag",
											"source": 11,
											"value": "285"
										},
										{
											"begin": 7828,
											"end": 8231,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8030,
											"end": 8032,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 8012,
											"end": 8033,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 8012,
											"end": 8033,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8012,
											"end": 8033,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8069,
											"end": 8071,
											"name": "PUSH",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 8049,
											"end": 8067,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8049,
											"end": 8067,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8049,
											"end": 8067,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8042,
											"end": 8072,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8108,
											"end": 8142,
											"name": "PUSH",
											"source": 11,
											"value": "54726F706879204B696E67204172636164653A20416C72656164792072656769"
										},
										{
											"begin": 8103,
											"end": 8105,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 8088,
											"end": 8106,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8088,
											"end": 8106,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8081,
											"end": 8143,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "39BA32B932B217"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8174,
											"end": 8176,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 8159,
											"end": 8177,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8159,
											"end": 8177,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8152,
											"end": 8189,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 8221,
											"end": 8224,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 8206,
											"end": 8225,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 8206,
											"end": 8225,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8002,
											"end": 8231,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 9476,
											"end": 9879,
											"name": "tag",
											"source": 11,
											"value": "271"
										},
										{
											"begin": 9476,
											"end": 9879,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 9678,
											"end": 9680,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 9660,
											"end": 9681,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 9660,
											"end": 9681,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9660,
											"end": 9681,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9717,
											"end": 9719,
											"name": "PUSH",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 9697,
											"end": 9715,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9697,
											"end": 9715,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9697,
											"end": 9715,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9690,
											"end": 9720,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9756,
											"end": 9790,
											"name": "PUSH",
											"source": 11,
											"value": "54726F706879204B696E67204172636164653A20556E61626C6520746F207472"
										},
										{
											"begin": 9751,
											"end": 9753,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 9736,
											"end": 9754,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9736,
											"end": 9754,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9729,
											"end": 9791,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "30B739B332B917"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9822,
											"end": 9824,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 9807,
											"end": 9825,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 9807,
											"end": 9825,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9800,
											"end": 9837,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 9869,
											"end": 9872,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 9854,
											"end": 9873,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 9854,
											"end": 9873,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 9650,
											"end": 9879,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 10301,
											"end": 10707,
											"name": "tag",
											"source": 11,
											"value": "282"
										},
										{
											"begin": 10301,
											"end": 10707,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10503,
											"end": 10505,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 10485,
											"end": 10506,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 10485,
											"end": 10506,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10485,
											"end": 10506,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10542,
											"end": 10544,
											"name": "PUSH",
											"source": 11,
											"value": "2A"
										},
										{
											"begin": 10522,
											"end": 10540,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10522,
											"end": 10540,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10522,
											"end": 10540,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10515,
											"end": 10545,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10581,
											"end": 10615,
											"name": "PUSH",
											"source": 11,
											"value": "54726F706879204B696E67204172636164653A2047616D652066756C6C2E2020"
										},
										{
											"begin": 10576,
											"end": 10578,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10561,
											"end": 10579,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10561,
											"end": 10579,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10554,
											"end": 10616,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2A393C9030B3B0B4B717"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10647,
											"end": 10649,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 10632,
											"end": 10650,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10632,
											"end": 10650,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10625,
											"end": 10665,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10697,
											"end": 10700,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 10682,
											"end": 10701,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10682,
											"end": 10701,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10475,
											"end": 10707,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 10712,
											"end": 11111,
											"name": "tag",
											"source": 11,
											"value": "288"
										},
										{
											"begin": 10712,
											"end": 11111,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 10914,
											"end": 10916,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 10896,
											"end": 10917,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 10896,
											"end": 10917,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10896,
											"end": 10917,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10953,
											"end": 10955,
											"name": "PUSH",
											"source": 11,
											"value": "23"
										},
										{
											"begin": 10933,
											"end": 10951,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10933,
											"end": 10951,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10933,
											"end": 10951,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10926,
											"end": 10956,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 10992,
											"end": 11026,
											"name": "PUSH",
											"source": 11,
											"value": "54726F706879204B696E67204172636164653A2047616D65206E6F7420666F75"
										},
										{
											"begin": 10987,
											"end": 10989,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 10972,
											"end": 10990,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 10972,
											"end": 10990,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 10965,
											"end": 11027,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "373217"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11058,
											"end": 11060,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 11043,
											"end": 11061,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11043,
											"end": 11061,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11036,
											"end": 11069,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11101,
											"end": 11104,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 11086,
											"end": 11105,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11086,
											"end": 11105,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 10886,
											"end": 11111,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 11116,
											"end": 11513,
											"name": "tag",
											"source": 11,
											"value": "276"
										},
										{
											"begin": 11116,
											"end": 11513,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 11318,
											"end": 11320,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 11300,
											"end": 11321,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 11300,
											"end": 11321,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11300,
											"end": 11321,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11357,
											"end": 11359,
											"name": "PUSH",
											"source": 11,
											"value": "21"
										},
										{
											"begin": 11337,
											"end": 11355,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11337,
											"end": 11355,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11337,
											"end": 11355,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11330,
											"end": 11360,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11396,
											"end": 11430,
											"name": "PUSH",
											"source": 11,
											"value": "54726F706879204B696E67204172636164653A20556E617574686F72697A6564"
										},
										{
											"begin": 11391,
											"end": 11393,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 11376,
											"end": 11394,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11376,
											"end": 11394,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11369,
											"end": 11431,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "17"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11462,
											"end": 11464,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 11447,
											"end": 11465,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 11447,
											"end": 11465,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11440,
											"end": 11471,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 11503,
											"end": 11506,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 11488,
											"end": 11507,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 11488,
											"end": 11507,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 11290,
											"end": 11513,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 13287,
											"end": 13415,
											"name": "tag",
											"source": 11,
											"value": "381"
										},
										{
											"begin": 13287,
											"end": 13415,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13327,
											"end": 13330,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13358,
											"end": 13359,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13354,
											"end": 13360,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 13351,
											"end": 13352,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13348,
											"end": 13361,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 13345,
											"end": 13347,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 13345,
											"end": 13347,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "479"
										},
										{
											"begin": 13345,
											"end": 13347,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 13364,
											"end": 13382,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "479"
										},
										{
											"begin": 13364,
											"end": 13382,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "480"
										},
										{
											"begin": 13364,
											"end": 13382,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 13364,
											"end": 13382,
											"name": "tag",
											"source": 11,
											"value": "479"
										},
										{
											"begin": 13364,
											"end": 13382,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13400,
											"end": 13409,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13400,
											"end": 13409,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13335,
											"end": 13415,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 13420,
											"end": 13637,
											"name": "tag",
											"source": 11,
											"value": "311"
										},
										{
											"begin": 13420,
											"end": 13637,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13460,
											"end": 13461,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13486,
											"end": 13487,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13476,
											"end": 13478,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "482"
										},
										{
											"begin": 13476,
											"end": 13478,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 13511,
											"end": 13542,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13511,
											"end": 13542,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 13565,
											"end": 13569,
											"name": "PUSH",
											"source": 11,
											"value": "12"
										},
										{
											"begin": 13562,
											"end": 13563,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 13555,
											"end": 13570,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 13593,
											"end": 13597,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 13518,
											"end": 13519,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13583,
											"end": 13598,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 13476,
											"end": 13478,
											"name": "tag",
											"source": 11,
											"value": "482"
										},
										{
											"begin": 13476,
											"end": 13478,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13622,
											"end": 13631,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 13622,
											"end": 13631,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13466,
											"end": 13637,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 13642,
											"end": 13810,
											"name": "tag",
											"source": 11,
											"value": "309"
										},
										{
											"begin": 13642,
											"end": 13810,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13682,
											"end": 13689,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13748,
											"end": 13749,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 13744,
											"end": 13745,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13740,
											"end": 13746,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 13736,
											"end": 13750,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 13733,
											"end": 13734,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 13730,
											"end": 13751,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 13725,
											"end": 13726,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13718,
											"end": 13727,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 13711,
											"end": 13728,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 13707,
											"end": 13752,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 13704,
											"end": 13706,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 13704,
											"end": 13706,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "485"
										},
										{
											"begin": 13704,
											"end": 13706,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 13755,
											"end": 13773,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "485"
										},
										{
											"begin": 13755,
											"end": 13773,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "480"
										},
										{
											"begin": 13755,
											"end": 13773,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 13755,
											"end": 13773,
											"name": "tag",
											"source": 11,
											"value": "485"
										},
										{
											"begin": 13755,
											"end": 13773,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13795,
											"end": 13804,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 13795,
											"end": 13804,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13694,
											"end": 13810,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 13815,
											"end": 13940,
											"name": "tag",
											"source": 11,
											"value": "258"
										},
										{
											"begin": 13815,
											"end": 13940,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13855,
											"end": 13859,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 13883,
											"end": 13884,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13880,
											"end": 13881,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 13877,
											"end": 13885,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 13874,
											"end": 13876,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 13874,
											"end": 13876,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "488"
										},
										{
											"begin": 13874,
											"end": 13876,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 13888,
											"end": 13906,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "488"
										},
										{
											"begin": 13888,
											"end": 13906,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "480"
										},
										{
											"begin": 13888,
											"end": 13906,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 13888,
											"end": 13906,
											"name": "tag",
											"source": 11,
											"value": "488"
										},
										{
											"begin": 13888,
											"end": 13906,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13925,
											"end": 13934,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 13925,
											"end": 13934,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 13864,
											"end": 13940,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 13945,
											"end": 14203,
											"name": "tag",
											"source": 11,
											"value": "448"
										},
										{
											"begin": 13945,
											"end": 14203,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14017,
											"end": 14018,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 14027,
											"end": 14140,
											"name": "tag",
											"source": 11,
											"value": "490"
										},
										{
											"begin": 14027,
											"end": 14140,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14041,
											"end": 14047,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 14038,
											"end": 14039,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14035,
											"end": 14048,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 14027,
											"end": 14140,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 14027,
											"end": 14140,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "492"
										},
										{
											"begin": 14027,
											"end": 14140,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 14117,
											"end": 14128,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14117,
											"end": 14128,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14117,
											"end": 14128,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14111,
											"end": 14129,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 14098,
											"end": 14109,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 14098,
											"end": 14109,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 14098,
											"end": 14109,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14091,
											"end": 14130,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 14063,
											"end": 14065,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 14056,
											"end": 14066,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14027,
											"end": 14140,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "490"
										},
										{
											"begin": 14027,
											"end": 14140,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 14027,
											"end": 14140,
											"name": "tag",
											"source": 11,
											"value": "492"
										},
										{
											"begin": 14027,
											"end": 14140,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14158,
											"end": 14164,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 14155,
											"end": 14156,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14152,
											"end": 14165,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 14149,
											"end": 14151,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 14149,
											"end": 14151,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "493"
										},
										{
											"begin": 14149,
											"end": 14151,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 14193,
											"end": 14194,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 14184,
											"end": 14190,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 14179,
											"end": 14182,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 14175,
											"end": 14191,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14168,
											"end": 14195,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 14149,
											"end": 14151,
											"name": "tag",
											"source": 11,
											"value": "493"
										},
										{
											"begin": 14149,
											"end": 14151,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14149,
											"end": 14151,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13998,
											"end": 14203,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13998,
											"end": 14203,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13998,
											"end": 14203,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 13998,
											"end": 14203,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 14208,
											"end": 14344,
											"name": "tag",
											"source": 11,
											"value": "409"
										},
										{
											"begin": 14208,
											"end": 14344,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14247,
											"end": 14250,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 14275,
											"end": 14280,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14265,
											"end": 14267,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "496"
										},
										{
											"begin": 14265,
											"end": 14267,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 14284,
											"end": 14302,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "496"
										},
										{
											"begin": 14284,
											"end": 14302,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "480"
										},
										{
											"begin": 14284,
											"end": 14302,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 14284,
											"end": 14302,
											"name": "tag",
											"source": 11,
											"value": "496"
										},
										{
											"begin": 14284,
											"end": 14302,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 14320,
											"end": 14338,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 14320,
											"end": 14338,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 14255,
											"end": 14344,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 14349,
											"end": 14476,
											"name": "tag",
											"source": 11,
											"value": "480"
										},
										{
											"begin": 14349,
											"end": 14476,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14410,
											"end": 14420,
											"name": "PUSH",
											"source": 11,
											"value": "4E487B71"
										},
										{
											"begin": 14405,
											"end": 14408,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 14401,
											"end": 14421,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 14398,
											"end": 14399,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 14391,
											"end": 14422,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 14441,
											"end": 14445,
											"name": "PUSH",
											"source": 11,
											"value": "11"
										},
										{
											"begin": 14438,
											"end": 14439,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 14431,
											"end": 14446,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 14465,
											"end": 14469,
											"name": "PUSH",
											"source": 11,
											"value": "24"
										},
										{
											"begin": 14462,
											"end": 14463,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 14455,
											"end": 14470,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 14481,
											"end": 14599,
											"name": "tag",
											"source": 11,
											"value": "424"
										},
										{
											"begin": 14481,
											"end": 14599,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 14567,
											"end": 14572,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14560,
											"end": 14573,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 14553,
											"end": 14574,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 14546,
											"end": 14551,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 14543,
											"end": 14575,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 14533,
											"end": 14535,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "357"
										},
										{
											"begin": 14533,
											"end": 14535,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 14589,
											"end": 14590,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 14586,
											"end": 14587,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 14579,
											"end": 14591,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"DEFAULT_ADMIN_ROLE()": "a217fddf",
							"TREASURER_ROLE()": "f0a3a97c",
							"acceptedArcadeTokens(address)": "b22c376d",
							"addArcadeToken(address,uint256,bool)": "06602a48",
							"closeGame(uint256)": "2d6ef310",
							"createGame(uint256,uint256,address,uint256,bool)": "f336ee3c",
							"decimals()": "313ce567",
							"deleteGame(uint256)": "248a55a1",
							"fee_percentage()": "c46ed45a",
							"gameData(uint256)": "ccaf237f",
							"getRoleAdmin(bytes32)": "248a9ca3",
							"getStablecoin(address)": "4575624b",
							"grantRole(bytes32,address)": "2f2ff15d",
							"hasRole(bytes32,address)": "91d14854",
							"isAccepted(address)": "e6f091f9",
							"market_maker()": "75ca7603",
							"openGame(uint256)": "00f5544f",
							"owner()": "8da5cb5b",
							"placePlayer(uint256,address)": "b9888d89",
							"reconcile()": "8f0d7e35",
							"refund(uint256,address)": "7ad226dc",
							"register(uint256)": "f207564e",
							"removeArcadeToken(address)": "3e16518f",
							"removePlayer(uint256,address)": "2ba67100",
							"renounceRole(bytes32,address)": "36568abe",
							"revokeRole(bytes32,address)": "d547741f",
							"setArcadeFeePercentage(uint256)": "2ac5016f",
							"setMarketMaker(address)": "f54c42d7",
							"setWinner(uint256,address)": "9c623683",
							"supportsInterface(bytes4)": "01ffc9a7",
							"swap(uint256)": "94b918de"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CreateGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"DeleteGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Fee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"OpenGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PlacePlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RemovePlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedArcadeTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"native_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"redemption_rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redemption_rate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"addArcadeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"}],\"name\":\"closeGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registration_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"arcade_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"player_limit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exchange\",\"type\":\"bool\"}],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"}],\"name\":\"deleteGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee_percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exchange\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"player_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"player_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"registration_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"arcade_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"getStablecoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"isAccepted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market_maker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"}],\"name\":\"openGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"placePlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reconcile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"removeArcadeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"removePlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setArcadeFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"incoming\",\"type\":\"address\"}],\"name\":\"setMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"setWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"game_id\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addArcadeToken(address,uint256,bool)\":{\"details\":\"Adds token to {acceptedArcadeTokens} Require `token_address` for proxy balance exchange.   `redemption_rate` is set and determines the rate that proxy balance is exchanged.   Set `active` to reflect status of exchange.\"},\"closeGame(uint256)\":{\"details\":\"Returns {active} for `token_address`.\"},\"createGame(uint256,uint256,address,uint256,bool)\":{\"details\":\"Returns {active} for `token_address`.\"},\"deleteGame(uint256)\":{\"details\":\"Returns {active} for `token_address`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getStablecoin(address)\":{\"details\":\"Returns {Stablecoin} struct for `token_address`.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAccepted(address)\":{\"details\":\"Returns {active} for `token_address`.\"},\"openGame(uint256)\":{\"details\":\"Returns {active} for `token_address`.\"},\"placePlayer(uint256,address)\":{\"details\":\"Returns {active} for `token_address`.\"},\"reconcile()\":{\"details\":\"Returns {active} for `token_address`.\"},\"refund(uint256,address)\":{\"details\":\"Returns {active} for `token_address`.\"},\"register(uint256)\":{\"details\":\"Returns {active} for `token_address`.\"},\"removeArcadeToken(address)\":{\"details\":\"Disable token for proxy balance exchange.\"},\"removePlayer(uint256,address)\":{\"details\":\"Returns {active} for `token_address`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setArcadeFeePercentage(uint256)\":{\"details\":\"Returns {active} for `token_address`.\"},\"setMarketMaker(address)\":{\"details\":\"Returns {active} for `token_address`.\"},\"setWinner(uint256,address)\":{\"details\":\"Returns {active} for `token_address`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"swap(uint256)\":{\"details\":\"Returns {active} for `token_address`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Arcade.sol\":\"Arcade\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@4.6.0/access/AccessControl.sol\":{\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://861c3abaa2b388a0228469080470d2254e8e91fd09aa0abda8b9ef3babf03ee5\",\"dweb:/ipfs/QmZFg88WPesuMo6GMtf3fi9NHQ5tENYLDZsFQSWgoq13TN\"]},\"@openzeppelin/contracts@4.6.0/access/IAccessControl.sol\":{\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb2c137c343ef0c4c7ce7b18c1d108afdc9d315a04e48307288d2d05adcbde3a\",\"dweb:/ipfs/QmUxhrAQM3MM3FF5j7AtcXLXguWCJBHJ14BRdVtuoQc8Fh\"]},\"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12fd1efc9ad061ef675bd50fb0c8e3c6f2952a09f8df0e3c688b8d81b8918838\",\"dweb:/ipfs/QmawN6PjTwy91pU7ANjCSgbsLc8TDA6hwu9GsFFaNSuhb5\"]},\"@openzeppelin/contracts@4.6.0/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts@4.6.0/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts@4.6.0/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts@4.6.0/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts@4.6.0/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts@4.6.0/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"@openzeppelin/contracts@4.6.0/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]},\"contracts/Arcade.sol\":{\"keccak256\":\"0x0675a79ddb767bf769847479a000facdcdfce537af449bd96269755e9571a3ef\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://cf2ca5b925409076148a200dddf617f8ab060b25a86c1c34a4faf92a25f4e7f2\",\"dweb:/ipfs/QmPZvNcWRuJzXpu21i246GFK7VPk844mq8GT2zHmJoNb3r\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 24,
								"contract": "contracts/Arcade.sol:Arcade",
								"label": "_roles",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
							},
							{
								"astId": 1757,
								"contract": "contracts/Arcade.sol:Arcade",
								"label": "acceptedArcadeTokens",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_struct(ArcadeToken)1752_storage)"
							},
							{
								"astId": 1762,
								"contract": "contracts/Arcade.sol:Arcade",
								"label": "gameData",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_struct(GameInfo)1744_storage)"
							},
							{
								"astId": 1765,
								"contract": "contracts/Arcade.sol:Arcade",
								"label": "decimals",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 1767,
								"contract": "contracts/Arcade.sol:Arcade",
								"label": "fee_percentage",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 1776,
								"contract": "contracts/Arcade.sol:Arcade",
								"label": "base",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 1778,
								"contract": "contracts/Arcade.sol:Arcade",
								"label": "market_maker",
								"offset": 0,
								"slot": "6",
								"type": "t_address"
							},
							{
								"astId": 1780,
								"contract": "contracts/Arcade.sol:Arcade",
								"label": "owner",
								"offset": 0,
								"slot": "7",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(IERC20)1056": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_struct(ArcadeToken)1752_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Arcade.ArcadeToken)",
								"numberOfBytes": "32",
								"value": "t_struct(ArcadeToken)1752_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct AccessControl.RoleData)",
								"numberOfBytes": "32",
								"value": "t_struct(RoleData)19_storage"
							},
							"t_mapping(t_uint256,t_struct(GameInfo)1744_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct Arcade.GameInfo)",
								"numberOfBytes": "32",
								"value": "t_struct(GameInfo)1744_storage"
							},
							"t_struct(ArcadeToken)1752_storage": {
								"encoding": "inplace",
								"label": "struct Arcade.ArcadeToken",
								"members": [
									{
										"astId": 1747,
										"contract": "contracts/Arcade.sol:Arcade",
										"label": "native_token",
										"offset": 0,
										"slot": "0",
										"type": "t_contract(IERC20)1056"
									},
									{
										"astId": 1749,
										"contract": "contracts/Arcade.sol:Arcade",
										"label": "active",
										"offset": 20,
										"slot": "0",
										"type": "t_bool"
									},
									{
										"astId": 1751,
										"contract": "contracts/Arcade.sol:Arcade",
										"label": "redemption_rate",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "64"
							},
							"t_struct(GameInfo)1744_storage": {
								"encoding": "inplace",
								"label": "struct Arcade.GameInfo",
								"members": [
									{
										"astId": 1719,
										"contract": "contracts/Arcade.sol:Arcade",
										"label": "exchange",
										"offset": 0,
										"slot": "0",
										"type": "t_bool"
									},
									{
										"astId": 1721,
										"contract": "contracts/Arcade.sol:Arcade",
										"label": "player_count",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 1723,
										"contract": "contracts/Arcade.sol:Arcade",
										"label": "player_limit",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 1725,
										"contract": "contracts/Arcade.sol:Arcade",
										"label": "registration_fee",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 1727,
										"contract": "contracts/Arcade.sol:Arcade",
										"label": "status",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 1729,
										"contract": "contracts/Arcade.sol:Arcade",
										"label": "arcade_token",
										"offset": 0,
										"slot": "5",
										"type": "t_address"
									},
									{
										"astId": 1731,
										"contract": "contracts/Arcade.sol:Arcade",
										"label": "total_fee",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									},
									{
										"astId": 1735,
										"contract": "contracts/Arcade.sol:Arcade",
										"label": "fee",
										"offset": 0,
										"slot": "7",
										"type": "t_mapping(t_address,t_uint256)"
									},
									{
										"astId": 1739,
										"contract": "contracts/Arcade.sol:Arcade",
										"label": "paid",
										"offset": 0,
										"slot": "8",
										"type": "t_mapping(t_address,t_uint256)"
									},
									{
										"astId": 1743,
										"contract": "contracts/Arcade.sol:Arcade",
										"label": "seats",
										"offset": 0,
										"slot": "9",
										"type": "t_mapping(t_address,t_uint256)"
									}
								],
								"numberOfBytes": "320"
							},
							"t_struct(RoleData)19_storage": {
								"encoding": "inplace",
								"label": "struct AccessControl.RoleData",
								"members": [
									{
										"astId": 16,
										"contract": "contracts/Arcade.sol:Arcade",
										"label": "members",
										"offset": 0,
										"slot": "0",
										"type": "t_mapping(t_address,t_bool)"
									},
									{
										"astId": 18,
										"contract": "contracts/Arcade.sol:Arcade",
										"label": "adminRole",
										"offset": 0,
										"slot": "1",
										"type": "t_bytes32"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts@4.6.0/access/AccessControl.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.6.0/access/AccessControl.sol",
					"exportedSymbols": {
						"AccessControl": [
							319
						],
						"Context": [
							1103
						],
						"ERC165": [
							1330
						],
						"IAccessControl": [
							392
						],
						"IERC165": [
							1342
						],
						"Strings": [
							1306
						]
					},
					"id": 320,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.6.0/access/IAccessControl.sol",
							"file": "./IAccessControl.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 320,
							"sourceUnit": 393,
							"src": "133:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.6.0/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 320,
							"sourceUnit": 1104,
							"src": "164:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.6.0/utils/Strings.sol",
							"file": "../utils/Strings.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 320,
							"sourceUnit": 1307,
							"src": "195:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.6.0/utils/introspection/ERC165.sol",
							"file": "../utils/introspection/ERC165.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 320,
							"sourceUnit": 1331,
							"src": "226:43:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1103,
										"src": "1841:7:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "1841:7:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "IAccessControl",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 392,
										"src": "1850:14:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "1850:14:0"
								},
								{
									"baseName": {
										"id": 11,
										"name": "ERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1330,
										"src": "1866:6:0"
									},
									"id": 12,
									"nodeType": "InheritanceSpecifier",
									"src": "1866:6:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "271:1534:0",
								"text": " @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it."
							},
							"fullyImplemented": true,
							"id": 319,
							"linearizedBaseContracts": [
								319,
								1330,
								1342,
								392,
								1103
							],
							"name": "AccessControl",
							"nameLocation": "1824:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "AccessControl.RoleData",
									"id": 19,
									"members": [
										{
											"constant": false,
											"id": 16,
											"mutability": "mutable",
											"name": "members",
											"nameLocation": "1930:7:0",
											"nodeType": "VariableDeclaration",
											"scope": 19,
											"src": "1905:32:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"typeName": {
												"id": 15,
												"keyType": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1913:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1905:24:0",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
													"typeString": "mapping(address => bool)"
												},
												"valueType": {
													"id": 14,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1924:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 18,
											"mutability": "mutable",
											"name": "adminRole",
											"nameLocation": "1955:9:0",
											"nodeType": "VariableDeclaration",
											"scope": 19,
											"src": "1947:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 17,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1947:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "RoleData",
									"nameLocation": "1886:8:0",
									"nodeType": "StructDefinition",
									"scope": 319,
									"src": "1879:92:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 24,
									"mutability": "mutable",
									"name": "_roles",
									"nameLocation": "2014:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 319,
									"src": "1977:43:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
										"typeString": "mapping(bytes32 => struct AccessControl.RoleData)"
									},
									"typeName": {
										"id": 23,
										"keyType": {
											"id": 20,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "1985:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "1977:28:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
											"typeString": "mapping(bytes32 => struct AccessControl.RoleData)"
										},
										"valueType": {
											"id": 22,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 21,
												"name": "RoleData",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 19,
												"src": "1996:8:0"
											},
											"referencedDeclaration": 19,
											"src": "1996:8:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_RoleData_$19_storage_ptr",
												"typeString": "struct AccessControl.RoleData"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"functionSelector": "a217fddf",
									"id": 27,
									"mutability": "constant",
									"name": "DEFAULT_ADMIN_ROLE",
									"nameLocation": "2051:18:0",
									"nodeType": "VariableDeclaration",
									"scope": 319,
									"src": "2027:49:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 25,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2027:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "30783030",
										"id": 26,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2072:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0x00"
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 37,
										"nodeType": "Block",
										"src": "2495:44:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 33,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 30,
															"src": "2516:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 32,
														"name": "_checkRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															92,
															135
														],
														"referencedDeclaration": 92,
														"src": "2505:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32) view"
														}
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2505:16:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 35,
												"nodeType": "ExpressionStatement",
												"src": "2505:16:0"
											},
											{
												"id": 36,
												"nodeType": "PlaceholderStatement",
												"src": "2531:1:0"
											}
										]
									},
									"documentation": {
										"id": 28,
										"nodeType": "StructuredDocumentation",
										"src": "2083:375:0",
										"text": " @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"
									},
									"id": 38,
									"name": "onlyRole",
									"nameLocation": "2472:8:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2489:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 38,
												"src": "2481:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 29,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2481:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2480:14:0"
									},
									"src": "2463:76:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1329
									],
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "2697:111:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 57,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														},
														"id": 52,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 47,
															"name": "interfaceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 41,
															"src": "2714:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 49,
																		"name": "IAccessControl",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 392,
																		"src": "2734:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IAccessControl_$392_$",
																			"typeString": "type(contract IAccessControl)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_contract$_IAccessControl_$392_$",
																			"typeString": "type(contract IAccessControl)"
																		}
																	],
																	"id": 48,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2729:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 50,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2729:20:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_contract$_IAccessControl_$392",
																	"typeString": "type(contract IAccessControl)"
																}
															},
															"id": 51,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "interfaceId",
															"nodeType": "MemberAccess",
															"src": "2729:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														"src": "2714:47:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 55,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 41,
																"src": "2789:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 53,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "2765:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_AccessControl_$319_$",
																	"typeString": "type(contract super AccessControl)"
																}
															},
															"id": 54,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1329,
															"src": "2765:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 56,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2765:36:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2714:87:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 46,
												"id": 58,
												"nodeType": "Return",
												"src": "2707:94:0"
											}
										]
									},
									"documentation": {
										"id": 39,
										"nodeType": "StructuredDocumentation",
										"src": "2545:56:0",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "2615:17:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 43,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2673:8:0"
									},
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "2640:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "2633:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 40,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "2633:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2632:20:0"
									},
									"returnParameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "2691:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 44,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2691:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2690:6:0"
									},
									"scope": 319,
									"src": "2606:202:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										359
									],
									"body": {
										"id": 78,
										"nodeType": "Block",
										"src": "2987:53:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"baseExpression": {
																"id": 71,
																"name": "_roles",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 24,
																"src": "3004:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																	"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																}
															},
															"id": 73,
															"indexExpression": {
																"id": 72,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 63,
																"src": "3011:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3004:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_RoleData_$19_storage",
																"typeString": "struct AccessControl.RoleData storage ref"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "members",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 16,
														"src": "3004:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 76,
													"indexExpression": {
														"id": 75,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 65,
														"src": "3025:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3004:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 70,
												"id": 77,
												"nodeType": "Return",
												"src": "2997:36:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "2814:76:0",
										"text": " @dev Returns `true` if `account` has been granted `role`."
									},
									"functionSelector": "91d14854",
									"id": 79,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasRole",
									"nameLocation": "2904:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 67,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2963:8:0"
									},
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2920:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 79,
												"src": "2912:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 62,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2912:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2934:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 79,
												"src": "2926:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2926:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2911:31:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 79,
												"src": "2981:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 68,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2981:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2980:6:0"
									},
									"scope": 319,
									"src": "2895:145:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 91,
										"nodeType": "Block",
										"src": "3390:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 86,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 82,
															"src": "3411:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 87,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1093,
																"src": "3417:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 88,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3417:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 85,
														"name": "_checkRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															92,
															135
														],
														"referencedDeclaration": 135,
														"src": "3400:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address) view"
														}
													},
													"id": 89,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3400:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 90,
												"nodeType": "ExpressionStatement",
												"src": "3400:30:0"
											}
										]
									},
									"documentation": {
										"id": 80,
										"nodeType": "StructuredDocumentation",
										"src": "3046:283:0",
										"text": " @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"
									},
									"id": 92,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkRole",
									"nameLocation": "3343:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3362:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 92,
												"src": "3354:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 81,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3354:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3353:14:0"
									},
									"returnParameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3390:0:0"
									},
									"scope": 319,
									"src": "3334:103:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 134,
										"nodeType": "Block",
										"src": "3791:419:0",
										"statements": [
											{
												"condition": {
													"id": 104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3805:23:0",
													"subExpression": {
														"arguments": [
															{
																"id": 101,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 95,
																"src": "3814:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 102,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 97,
																"src": "3820:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 100,
															"name": "hasRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 79,
															"src": "3806:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																"typeString": "function (bytes32,address) view returns (bool)"
															}
														},
														"id": 103,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3806:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 133,
												"nodeType": "IfStatement",
												"src": "3801:403:0",
												"trueBody": {
													"id": 132,
													"nodeType": "Block",
													"src": "3830:374:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "416363657373436f6e74726f6c3a206163636f756e7420",
																						"id": 110,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "string",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3938:25:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874",
																							"typeString": "literal_string \"AccessControl: account \""
																						},
																						"value": "AccessControl: account "
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"id": 115,
																										"name": "account",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 97,
																										"src": "4017:7:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									],
																									"id": 114,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "4009:7:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_uint160_$",
																										"typeString": "type(uint160)"
																									},
																									"typeName": {
																										"id": 113,
																										"name": "uint160",
																										"nodeType": "ElementaryTypeName",
																										"src": "4009:7:0",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 116,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "4009:16:0",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint160",
																									"typeString": "uint160"
																								}
																							},
																							{
																								"hexValue": "3230",
																								"id": 117,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "4027:2:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_20_by_1",
																									"typeString": "int_const 20"
																								},
																								"value": "20"
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint160",
																									"typeString": "uint160"
																								},
																								{
																									"typeIdentifier": "t_rational_20_by_1",
																									"typeString": "int_const 20"
																								}
																							],
																							"expression": {
																								"id": 111,
																								"name": "Strings",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1306,
																								"src": "3989:7:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_Strings_$1306_$",
																									"typeString": "type(library Strings)"
																								}
																							},
																							"id": 112,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "toHexString",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1305,
																							"src": "3989:19:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																								"typeString": "function (uint256,uint256) pure returns (string memory)"
																							}
																						},
																						"id": 118,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3989:41:0",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					},
																					{
																						"hexValue": "206973206d697373696e6720726f6c6520",
																						"id": 119,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "string",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "4056:19:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69",
																							"typeString": "literal_string \" is missing role \""
																						},
																						"value": " is missing role "
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"id": 124,
																										"name": "role",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 95,
																										"src": "4129:4:0",
																										"typeDescriptions": {
																											"typeIdentifier": "t_bytes32",
																											"typeString": "bytes32"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_bytes32",
																											"typeString": "bytes32"
																										}
																									],
																									"id": 123,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"lValueRequested": false,
																									"nodeType": "ElementaryTypeNameExpression",
																									"src": "4121:7:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_type$_t_uint256_$",
																										"typeString": "type(uint256)"
																									},
																									"typeName": {
																										"id": 122,
																										"name": "uint256",
																										"nodeType": "ElementaryTypeName",
																										"src": "4121:7:0",
																										"typeDescriptions": {}
																									}
																								},
																								"id": 125,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "typeConversion",
																								"lValueRequested": false,
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "4121:13:0",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							{
																								"hexValue": "3332",
																								"id": 126,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "4136:2:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_32_by_1",
																									"typeString": "int_const 32"
																								},
																								"value": "32"
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								{
																									"typeIdentifier": "t_rational_32_by_1",
																									"typeString": "int_const 32"
																								}
																							],
																							"expression": {
																								"id": 120,
																								"name": "Strings",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1306,
																								"src": "4101:7:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_Strings_$1306_$",
																									"typeString": "type(library Strings)"
																								}
																							},
																							"id": 121,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberName": "toHexString",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1305,
																							"src": "4101:19:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																								"typeString": "function (uint256,uint256) pure returns (string memory)"
																							}
																						},
																						"id": 127,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "4101:38:0",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874",
																							"typeString": "literal_string \"AccessControl: account \""
																						},
																						{
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						},
																						{
																							"typeIdentifier": "t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69",
																							"typeString": "literal_string \" is missing role \""
																						},
																						{
																							"typeIdentifier": "t_string_memory_ptr",
																							"typeString": "string memory"
																						}
																					],
																					"expression": {
																						"id": 108,
																						"name": "abi",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967295,
																						"src": "3896:3:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_abi",
																							"typeString": "abi"
																						}
																					},
																					"id": 109,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberName": "encodePacked",
																					"nodeType": "MemberAccess",
																					"src": "3896:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																						"typeString": "function () pure returns (bytes memory)"
																					}
																				},
																				"id": 128,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3896:265:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			],
																			"id": 107,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3868:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																				"typeString": "type(string storage pointer)"
																			},
																			"typeName": {
																				"id": 106,
																				"name": "string",
																				"nodeType": "ElementaryTypeName",
																				"src": "3868:6:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 129,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3868:311:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 105,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "3844:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 130,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3844:349:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 131,
															"nodeType": "ExpressionStatement",
															"src": "3844:349:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 93,
										"nodeType": "StructuredDocumentation",
										"src": "3443:270:0",
										"text": " @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"
									},
									"id": 135,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkRole",
									"nameLocation": "3727:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "3746:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "3738:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 94,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3738:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3760:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "3752:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 96,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3752:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3737:31:0"
									},
									"returnParameters": {
										"id": 99,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3791:0:0"
									},
									"scope": 319,
									"src": "3718:492:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										367
									],
									"body": {
										"id": 149,
										"nodeType": "Block",
										"src": "4474:46:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 144,
															"name": "_roles",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 24,
															"src": "4491:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
															}
														},
														"id": 146,
														"indexExpression": {
															"id": 145,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 138,
															"src": "4498:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4491:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_RoleData_$19_storage",
															"typeString": "struct AccessControl.RoleData storage ref"
														}
													},
													"id": 147,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "adminRole",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 18,
													"src": "4491:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 143,
												"id": 148,
												"nodeType": "Return",
												"src": "4484:29:0"
											}
										]
									},
									"documentation": {
										"id": 136,
										"nodeType": "StructuredDocumentation",
										"src": "4216:170:0",
										"text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."
									},
									"functionSelector": "248a9ca3",
									"id": 150,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleAdmin",
									"nameLocation": "4400:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 140,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4447:8:0"
									},
									"parameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4421:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 150,
												"src": "4413:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 137,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4413:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4412:14:0"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 150,
												"src": "4465:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 141,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4465:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4464:9:0"
									},
									"scope": 319,
									"src": "4391:129:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										375
									],
									"body": {
										"id": 169,
										"nodeType": "Block",
										"src": "4873:42:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 165,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 153,
															"src": "4894:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 166,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 155,
															"src": "4900:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 164,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 287,
														"src": "4883:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4883:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 168,
												"nodeType": "ExpressionStatement",
												"src": "4883:25:0"
											}
										]
									},
									"documentation": {
										"id": 151,
										"nodeType": "StructuredDocumentation",
										"src": "4526:239:0",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "2f2ff15d",
									"id": 170,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 160,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 153,
															"src": "4866:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 159,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 150,
														"src": "4853:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4853:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 162,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 158,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "4844:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "4844:28:0"
										}
									],
									"name": "grantRole",
									"nameLocation": "4779:9:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 157,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4835:8:0"
									},
									"parameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "4797:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "4789:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 152,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4789:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4811:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "4803:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 154,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4803:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4788:31:0"
									},
									"returnParameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4873:0:0"
									},
									"scope": 319,
									"src": "4770:145:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										383
									],
									"body": {
										"id": 189,
										"nodeType": "Block",
										"src": "5253:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 185,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "5275:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 186,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 175,
															"src": "5281:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 184,
														"name": "_revokeRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 318,
														"src": "5263:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5263:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 188,
												"nodeType": "ExpressionStatement",
												"src": "5263:26:0"
											}
										]
									},
									"documentation": {
										"id": 171,
										"nodeType": "StructuredDocumentation",
										"src": "4921:223:0",
										"text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "d547741f",
									"id": 190,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 180,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "5246:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 179,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 150,
														"src": "5233:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5233:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 182,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 178,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "5224:8:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "5224:28:0"
										}
									],
									"name": "revokeRole",
									"nameLocation": "5158:10:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 177,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5215:8:0"
									},
									"parameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "5177:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "5169:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 172,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5169:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "5191:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "5183:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 174,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5183:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5168:31:0"
									},
									"returnParameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5253:0:0"
									},
									"scope": 319,
									"src": "5149:147:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										391
									],
									"body": {
										"id": 212,
										"nodeType": "Block",
										"src": "5864:137:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 203,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 200,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 195,
																"src": "5882:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 201,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1093,
																	"src": "5893:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 202,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5893:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "5882:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66",
															"id": 204,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5907:49:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b",
																"typeString": "literal_string \"AccessControl: can only renounce roles for self\""
															},
															"value": "AccessControl: can only renounce roles for self"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b",
																"typeString": "literal_string \"AccessControl: can only renounce roles for self\""
															}
														],
														"id": 199,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5874:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5874:83:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 206,
												"nodeType": "ExpressionStatement",
												"src": "5874:83:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 208,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 193,
															"src": "5980:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 209,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 195,
															"src": "5986:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 207,
														"name": "_revokeRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 318,
														"src": "5968:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5968:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 211,
												"nodeType": "ExpressionStatement",
												"src": "5968:26:0"
											}
										]
									},
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "5302:480:0",
										"text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."
									},
									"functionSelector": "36568abe",
									"id": 213,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "renounceRole",
									"nameLocation": "5796:12:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 197,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5855:8:0"
									},
									"parameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "5817:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "5809:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 192,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5809:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "5831:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "5823:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5823:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5808:31:0"
									},
									"returnParameters": {
										"id": 198,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5864:0:0"
									},
									"scope": 319,
									"src": "5787:214:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 226,
										"nodeType": "Block",
										"src": "6708:42:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 222,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 216,
															"src": "6729:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 223,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "6735:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 221,
														"name": "_grantRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 287,
														"src": "6718:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$",
															"typeString": "function (bytes32,address)"
														}
													},
													"id": 224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6718:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 225,
												"nodeType": "ExpressionStatement",
												"src": "6718:25:0"
											}
										]
									},
									"documentation": {
										"id": 214,
										"nodeType": "StructuredDocumentation",
										"src": "6007:628:0",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."
									},
									"id": 227,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setupRole",
									"nameLocation": "6649:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "6668:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "6660:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 215,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6660:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6682:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "6674:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6674:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6659:31:0"
									},
									"returnParameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6708:0:0"
									},
									"scope": 319,
									"src": "6640:110:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 254,
										"nodeType": "Block",
										"src": "6948:174:0",
										"statements": [
											{
												"assignments": [
													236
												],
												"declarations": [
													{
														"constant": false,
														"id": 236,
														"mutability": "mutable",
														"name": "previousAdminRole",
														"nameLocation": "6966:17:0",
														"nodeType": "VariableDeclaration",
														"scope": 254,
														"src": "6958:25:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 235,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "6958:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 240,
												"initialValue": {
													"arguments": [
														{
															"id": 238,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 230,
															"src": "6999:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 237,
														"name": "getRoleAdmin",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 150,
														"src": "6986:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6986:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6958:46:0"
											},
											{
												"expression": {
													"id": 246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 241,
																"name": "_roles",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 24,
																"src": "7014:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																	"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																}
															},
															"id": 243,
															"indexExpression": {
																"id": 242,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 230,
																"src": "7021:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7014:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_RoleData_$19_storage",
																"typeString": "struct AccessControl.RoleData storage ref"
															}
														},
														"id": 244,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "adminRole",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 18,
														"src": "7014:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 245,
														"name": "adminRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 232,
														"src": "7039:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "7014:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 247,
												"nodeType": "ExpressionStatement",
												"src": "7014:34:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 249,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 230,
															"src": "7080:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 250,
															"name": "previousAdminRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 236,
															"src": "7086:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 251,
															"name": "adminRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 232,
															"src": "7105:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 248,
														"name": "RoleAdminChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 331,
														"src": "7063:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32,bytes32,bytes32)"
														}
													},
													"id": 252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7063:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 253,
												"nodeType": "EmitStatement",
												"src": "7058:57:0"
											}
										]
									},
									"documentation": {
										"id": 228,
										"nodeType": "StructuredDocumentation",
										"src": "6756:114:0",
										"text": " @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."
									},
									"id": 255,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setRoleAdmin",
									"nameLocation": "6884:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "6906:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "6898:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 229,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6898:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "adminRole",
												"nameLocation": "6920:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "6912:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 231,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6912:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6897:33:0"
									},
									"returnParameters": {
										"id": 234,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6948:0:0"
									},
									"scope": 319,
									"src": "6875:247:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 286,
										"nodeType": "Block",
										"src": "7312:165:0",
										"statements": [
											{
												"condition": {
													"id": 267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7326:23:0",
													"subExpression": {
														"arguments": [
															{
																"id": 264,
																"name": "role",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 258,
																"src": "7335:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 265,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 260,
																"src": "7341:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 263,
															"name": "hasRole",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 79,
															"src": "7327:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																"typeString": "function (bytes32,address) view returns (bool)"
															}
														},
														"id": 266,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7327:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 285,
												"nodeType": "IfStatement",
												"src": "7322:149:0",
												"trueBody": {
													"id": 284,
													"nodeType": "Block",
													"src": "7351:120:0",
													"statements": [
														{
															"expression": {
																"id": 275,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 268,
																				"name": "_roles",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 24,
																				"src": "7365:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																					"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																				}
																			},
																			"id": 270,
																			"indexExpression": {
																				"id": 269,
																				"name": "role",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 258,
																				"src": "7372:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7365:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_RoleData_$19_storage",
																				"typeString": "struct AccessControl.RoleData storage ref"
																			}
																		},
																		"id": 271,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "members",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 16,
																		"src": "7365:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 273,
																	"indexExpression": {
																		"id": 272,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 260,
																		"src": "7386:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "7365:29:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 274,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7397:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "7365:36:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 276,
															"nodeType": "ExpressionStatement",
															"src": "7365:36:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 278,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 258,
																		"src": "7432:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 279,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 260,
																		"src": "7438:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 280,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1093,
																			"src": "7447:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 281,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7447:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 277,
																	"name": "RoleGranted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 340,
																	"src": "7420:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (bytes32,address,address)"
																	}
																},
																"id": 282,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7420:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 283,
															"nodeType": "EmitStatement",
															"src": "7415:45:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 256,
										"nodeType": "StructuredDocumentation",
										"src": "7128:111:0",
										"text": " @dev Grants `role` to `account`.\n Internal function without access restriction."
									},
									"id": 287,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_grantRole",
									"nameLocation": "7253:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "7272:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "7264:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 257,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7264:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7286:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "7278:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7278:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7263:31:0"
									},
									"returnParameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7312:0:0"
									},
									"scope": 319,
									"src": "7244:233:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 317,
										"nodeType": "Block",
										"src": "7671:165:0",
										"statements": [
											{
												"condition": {
													"arguments": [
														{
															"id": 296,
															"name": "role",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 290,
															"src": "7693:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 297,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 292,
															"src": "7699:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 295,
														"name": "hasRole",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 79,
														"src": "7685:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address) view returns (bool)"
														}
													},
													"id": 298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7685:22:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 316,
												"nodeType": "IfStatement",
												"src": "7681:149:0",
												"trueBody": {
													"id": 315,
													"nodeType": "Block",
													"src": "7709:121:0",
													"statements": [
														{
															"expression": {
																"id": 306,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 299,
																				"name": "_roles",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 24,
																				"src": "7723:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$",
																					"typeString": "mapping(bytes32 => struct AccessControl.RoleData storage ref)"
																				}
																			},
																			"id": 301,
																			"indexExpression": {
																				"id": 300,
																				"name": "role",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 290,
																				"src": "7730:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "7723:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_RoleData_$19_storage",
																				"typeString": "struct AccessControl.RoleData storage ref"
																			}
																		},
																		"id": 302,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "members",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 16,
																		"src": "7723:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 304,
																	"indexExpression": {
																		"id": 303,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 292,
																		"src": "7744:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "7723:29:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 305,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7755:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "7723:37:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 307,
															"nodeType": "ExpressionStatement",
															"src": "7723:37:0"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 309,
																		"name": "role",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 290,
																		"src": "7791:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 310,
																		"name": "account",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 292,
																		"src": "7797:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 311,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1093,
																			"src": "7806:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 312,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7806:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 308,
																	"name": "RoleRevoked",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 349,
																	"src": "7779:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (bytes32,address,address)"
																	}
																},
																"id": 313,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7779:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 314,
															"nodeType": "EmitStatement",
															"src": "7774:45:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "7483:114:0",
										"text": " @dev Revokes `role` from `account`.\n Internal function without access restriction."
									},
									"id": 318,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revokeRole",
									"nameLocation": "7611:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "7631:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "7623:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 289,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7623:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7645:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "7637:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7637:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7622:31:0"
									},
									"returnParameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7671:0:0"
									},
									"scope": 319,
									"src": "7602:234:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 320,
							"src": "1806:6032:0",
							"usedErrors": []
						}
					],
					"src": "108:7731:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts@4.6.0/access/IAccessControl.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.6.0/access/IAccessControl.sol",
					"exportedSymbols": {
						"IAccessControl": [
							392
						]
					},
					"id": 393,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 321,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "94:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 322,
								"nodeType": "StructuredDocumentation",
								"src": "119:89:1",
								"text": " @dev External interface of AccessControl declared to support ERC165 detection."
							},
							"fullyImplemented": false,
							"id": 392,
							"linearizedBaseContracts": [
								392
							],
							"name": "IAccessControl",
							"nameLocation": "219:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 323,
										"nodeType": "StructuredDocumentation",
										"src": "240:292:1",
										"text": " @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"
									},
									"id": 331,
									"name": "RoleAdminChanged",
									"nameLocation": "543:16:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 330,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 325,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "576:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "560:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 324,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "560:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 327,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousAdminRole",
												"nameLocation": "598:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "582:33:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 326,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "582:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 329,
												"indexed": true,
												"mutability": "mutable",
												"name": "newAdminRole",
												"nameLocation": "633:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "617:28:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 328,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "617:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "559:87:1"
									},
									"src": "537:110:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 332,
										"nodeType": "StructuredDocumentation",
										"src": "653:212:1",
										"text": " @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."
									},
									"id": 340,
									"name": "RoleGranted",
									"nameLocation": "876:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 339,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 334,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "904:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 340,
												"src": "888:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 333,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "888:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 336,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "926:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 340,
												"src": "910:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 335,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "910:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 338,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "951:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 340,
												"src": "935:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 337,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "887:71:1"
									},
									"src": "870:89:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 341,
										"nodeType": "StructuredDocumentation",
										"src": "965:275:1",
										"text": " @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
									},
									"id": 349,
									"name": "RoleRevoked",
									"nameLocation": "1251:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 343,
												"indexed": true,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1279:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "1263:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 342,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1263:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 345,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1301:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "1285:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 344,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1285:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 347,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "1326:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "1310:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1310:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1262:71:1"
									},
									"src": "1245:89:1"
								},
								{
									"documentation": {
										"id": 350,
										"nodeType": "StructuredDocumentation",
										"src": "1340:76:1",
										"text": " @dev Returns `true` if `account` has been granted `role`."
									},
									"functionSelector": "91d14854",
									"id": 359,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasRole",
									"nameLocation": "1430:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1446:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "1438:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 351,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1438:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1460:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "1452:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1452:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1437:31:1"
									},
									"returnParameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "1492:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 356,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1492:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1491:6:1"
									},
									"scope": 392,
									"src": "1421:77:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 360,
										"nodeType": "StructuredDocumentation",
										"src": "1504:184:1",
										"text": " @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."
									},
									"functionSelector": "248a9ca3",
									"id": 367,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getRoleAdmin",
									"nameLocation": "1702:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "1723:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "1715:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 361,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1715:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1714:14:1"
									},
									"returnParameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 365,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "1752:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 364,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1752:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1751:9:1"
									},
									"scope": 392,
									"src": "1693:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 368,
										"nodeType": "StructuredDocumentation",
										"src": "1767:239:1",
										"text": " @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "2f2ff15d",
									"id": 375,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "grantRole",
									"nameLocation": "2020:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2038:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "2030:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 369,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2030:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2052:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 375,
												"src": "2044:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 371,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2044:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2029:31:1"
									},
									"returnParameters": {
										"id": 374,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2069:0:1"
									},
									"scope": 392,
									"src": "2011:59:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 376,
										"nodeType": "StructuredDocumentation",
										"src": "2076:223:1",
										"text": " @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."
									},
									"functionSelector": "d547741f",
									"id": 383,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "revokeRole",
									"nameLocation": "2313:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2332:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "2324:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 377,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2324:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 380,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2346:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "2338:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 379,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2338:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2323:31:1"
									},
									"returnParameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2363:0:1"
									},
									"scope": 392,
									"src": "2304:60:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 384,
										"nodeType": "StructuredDocumentation",
										"src": "2370:480:1",
										"text": " @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."
									},
									"functionSelector": "36568abe",
									"id": 391,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "renounceRole",
									"nameLocation": "2864:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "role",
												"nameLocation": "2885:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "2877:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 385,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2877:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2899:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "2891:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2891:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2876:31:1"
									},
									"returnParameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2916:0:1"
									},
									"scope": 392,
									"src": "2855:62:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 393,
							"src": "209:2710:1",
							"usedErrors": []
						}
					],
					"src": "94:2826:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1103
						],
						"ERC20": [
							978
						],
						"IERC20": [
							1056
						],
						"IERC20Metadata": [
							1081
						]
					},
					"id": 979,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 394,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.6.0/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 395,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 979,
							"sourceUnit": 1057,
							"src": "130:22:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.6.0/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 396,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 979,
							"sourceUnit": 1082,
							"src": "153:41:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.6.0/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 397,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 979,
							"sourceUnit": 1104,
							"src": "195:33:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 399,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1103,
										"src": "1421:7:2"
									},
									"id": 400,
									"nodeType": "InheritanceSpecifier",
									"src": "1421:7:2"
								},
								{
									"baseName": {
										"id": 401,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1056,
										"src": "1430:6:2"
									},
									"id": 402,
									"nodeType": "InheritanceSpecifier",
									"src": "1430:6:2"
								},
								{
									"baseName": {
										"id": 403,
										"name": "IERC20Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1081,
										"src": "1438:14:2"
									},
									"id": 404,
									"nodeType": "InheritanceSpecifier",
									"src": "1438:14:2"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 398,
								"nodeType": "StructuredDocumentation",
								"src": "230:1172:2",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 978,
							"linearizedBaseContracts": [
								978,
								1081,
								1056,
								1103
							],
							"name": "ERC20",
							"nameLocation": "1412:5:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 408,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1495:9:2",
									"nodeType": "VariableDeclaration",
									"scope": 978,
									"src": "1459:45:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 407,
										"keyType": {
											"id": 405,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1467:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1459:27:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 406,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1478:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 414,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1567:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 978,
									"src": "1511:67:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 413,
										"keyType": {
											"id": 409,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1519:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1511:47:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 412,
											"keyType": {
												"id": 410,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1538:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1530:27:2",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 411,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1549:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 416,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1601:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 978,
									"src": "1585:28:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 415,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1585:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 418,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1635:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 978,
									"src": "1620:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 417,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1620:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 420,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1661:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 978,
									"src": "1646:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 419,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1646:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 436,
										"nodeType": "Block",
										"src": "2034:57:2",
										"statements": [
											{
												"expression": {
													"id": 430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 428,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 418,
														"src": "2044:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 429,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 423,
														"src": "2052:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2044:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 431,
												"nodeType": "ExpressionStatement",
												"src": "2044:13:2"
											},
											{
												"expression": {
													"id": 434,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 432,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 420,
														"src": "2067:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 433,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 425,
														"src": "2077:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2067:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 435,
												"nodeType": "ExpressionStatement",
												"src": "2067:17:2"
											}
										]
									},
									"documentation": {
										"id": 421,
										"nodeType": "StructuredDocumentation",
										"src": "1675:298:2",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 437,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2004:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "1990:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 422,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1990:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2025:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 437,
												"src": "2011:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 424,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2011:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1989:44:2"
									},
									"returnParameters": {
										"id": 427,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2034:0:2"
									},
									"scope": 978,
									"src": "1978:113:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1068
									],
									"body": {
										"id": 446,
										"nodeType": "Block",
										"src": "2225:29:2",
										"statements": [
											{
												"expression": {
													"id": 444,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 418,
													"src": "2242:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 443,
												"id": 445,
												"nodeType": "Return",
												"src": "2235:12:2"
											}
										]
									},
									"documentation": {
										"id": 438,
										"nodeType": "StructuredDocumentation",
										"src": "2097:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 447,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2165:4:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 440,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2192:8:2"
									},
									"parameters": {
										"id": 439,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2169:2:2"
									},
									"returnParameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 442,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "2210:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 441,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2210:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2209:15:2"
									},
									"scope": 978,
									"src": "2156:98:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1074
									],
									"body": {
										"id": 456,
										"nodeType": "Block",
										"src": "2438:31:2",
										"statements": [
											{
												"expression": {
													"id": 454,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 420,
													"src": "2455:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 453,
												"id": 455,
												"nodeType": "Return",
												"src": "2448:14:2"
											}
										]
									},
									"documentation": {
										"id": 448,
										"nodeType": "StructuredDocumentation",
										"src": "2260:102:2",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 457,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2376:6:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 450,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2405:8:2"
									},
									"parameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2382:2:2"
									},
									"returnParameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 457,
												"src": "2423:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 451,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2423:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2422:15:2"
									},
									"scope": 978,
									"src": "2367:102:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1080
									],
									"body": {
										"id": 466,
										"nodeType": "Block",
										"src": "3158:26:2",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3175:2:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 463,
												"id": 465,
												"nodeType": "Return",
												"src": "3168:9:2"
											}
										]
									},
									"documentation": {
										"id": 458,
										"nodeType": "StructuredDocumentation",
										"src": "2475:613:2",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 467,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3102:8:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 460,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3133:8:2"
									},
									"parameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3110:2:2"
									},
									"returnParameters": {
										"id": 463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "3151:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 461,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3151:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3150:7:2"
									},
									"scope": 978,
									"src": "3093:91:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1005
									],
									"body": {
										"id": 476,
										"nodeType": "Block",
										"src": "3314:36:2",
										"statements": [
											{
												"expression": {
													"id": 474,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 416,
													"src": "3331:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 473,
												"id": 475,
												"nodeType": "Return",
												"src": "3324:19:2"
											}
										]
									},
									"documentation": {
										"id": 468,
										"nodeType": "StructuredDocumentation",
										"src": "3190:49:2",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 477,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3253:11:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 470,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3287:8:2"
									},
									"parameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3264:2:2"
									},
									"returnParameters": {
										"id": 473,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 477,
												"src": "3305:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 471,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3305:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3304:9:2"
									},
									"scope": 978,
									"src": "3244:106:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1013
									],
									"body": {
										"id": 490,
										"nodeType": "Block",
										"src": "3491:42:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 486,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 408,
														"src": "3508:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 488,
													"indexExpression": {
														"id": 487,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 480,
														"src": "3518:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3508:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 485,
												"id": 489,
												"nodeType": "Return",
												"src": "3501:25:2"
											}
										]
									},
									"documentation": {
										"id": 478,
										"nodeType": "StructuredDocumentation",
										"src": "3356:47:2",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 491,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3417:9:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 482,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3464:8:2"
									},
									"parameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3435:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "3427:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 479,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3427:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3426:17:2"
									},
									"returnParameters": {
										"id": 485,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 484,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "3482:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 483,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3482:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3481:9:2"
									},
									"scope": 978,
									"src": "3408:125:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1023
									],
									"body": {
										"id": 515,
										"nodeType": "Block",
										"src": "3814:104:2",
										"statements": [
											{
												"assignments": [
													503
												],
												"declarations": [
													{
														"constant": false,
														"id": 503,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3832:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 515,
														"src": "3824:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 502,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3824:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 506,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 504,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1093,
														"src": "3840:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3840:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3824:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 508,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 503,
															"src": "3872:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 509,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 494,
															"src": "3879:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 510,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 496,
															"src": "3883:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 507,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 739,
														"src": "3862:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 511,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3862:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 512,
												"nodeType": "ExpressionStatement",
												"src": "3862:28:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 513,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3907:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 501,
												"id": 514,
												"nodeType": "Return",
												"src": "3900:11:2"
											}
										]
									},
									"documentation": {
										"id": 492,
										"nodeType": "StructuredDocumentation",
										"src": "3539:185:2",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 516,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3738:8:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 498,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3790:8:2"
									},
									"parameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 494,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3755:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "3747:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3747:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3767:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "3759:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 495,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3759:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3746:28:2"
									},
									"returnParameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "3808:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 499,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3808:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3807:6:2"
									},
									"scope": 978,
									"src": "3729:189:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1033
									],
									"body": {
										"id": 533,
										"nodeType": "Block",
										"src": "4074:51:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 527,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 414,
															"src": "4091:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 529,
														"indexExpression": {
															"id": 528,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 519,
															"src": "4103:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4091:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 531,
													"indexExpression": {
														"id": 530,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 521,
														"src": "4110:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4091:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 526,
												"id": 532,
												"nodeType": "Return",
												"src": "4084:34:2"
											}
										]
									},
									"documentation": {
										"id": 517,
										"nodeType": "StructuredDocumentation",
										"src": "3924:47:2",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 534,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3985:9:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 523,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4047:8:2"
									},
									"parameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4003:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 534,
												"src": "3995:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 518,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3995:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4018:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 534,
												"src": "4010:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 520,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4010:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3994:32:2"
									},
									"returnParameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 534,
												"src": "4065:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 524,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4065:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4064:9:2"
									},
									"scope": 978,
									"src": "3976:149:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1043
									],
									"body": {
										"id": 558,
										"nodeType": "Block",
										"src": "4522:108:2",
										"statements": [
											{
												"assignments": [
													546
												],
												"declarations": [
													{
														"constant": false,
														"id": 546,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4540:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 558,
														"src": "4532:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 545,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4532:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 549,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 547,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1093,
														"src": "4548:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 548,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4548:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4532:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 551,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 546,
															"src": "4579:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 552,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 537,
															"src": "4586:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 553,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 539,
															"src": "4595:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 550,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 912,
														"src": "4570:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 554,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4570:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 555,
												"nodeType": "ExpressionStatement",
												"src": "4570:32:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 556,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4619:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 544,
												"id": 557,
												"nodeType": "Return",
												"src": "4612:11:2"
											}
										]
									},
									"documentation": {
										"id": 535,
										"nodeType": "StructuredDocumentation",
										"src": "4131:297:2",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 559,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4442:7:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 541,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4498:8:2"
									},
									"parameters": {
										"id": 540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 537,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4458:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "4450:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 536,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4450:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 539,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4475:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "4467:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 538,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4467:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4449:33:2"
									},
									"returnParameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 543,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "4516:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 542,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4516:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4515:6:2"
									},
									"scope": 978,
									"src": "4433:197:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1055
									],
									"body": {
										"id": 591,
										"nodeType": "Block",
										"src": "5325:153:2",
										"statements": [
											{
												"assignments": [
													573
												],
												"declarations": [
													{
														"constant": false,
														"id": 573,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5343:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 591,
														"src": "5335:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 572,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5335:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 576,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 574,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1093,
														"src": "5353:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 575,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5353:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5335:30:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 578,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 562,
															"src": "5391:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 579,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 573,
															"src": "5397:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 580,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 566,
															"src": "5406:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 577,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 955,
														"src": "5375:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 581,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5375:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 582,
												"nodeType": "ExpressionStatement",
												"src": "5375:38:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 584,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 562,
															"src": "5433:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 585,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 564,
															"src": "5439:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 586,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 566,
															"src": "5443:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 583,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 739,
														"src": "5423:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 587,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5423:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 588,
												"nodeType": "ExpressionStatement",
												"src": "5423:27:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 589,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5467:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 571,
												"id": 590,
												"nodeType": "Return",
												"src": "5460:11:2"
											}
										]
									},
									"documentation": {
										"id": 560,
										"nodeType": "StructuredDocumentation",
										"src": "4636:551:2",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 592,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5201:12:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 568,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5301:8:2"
									},
									"parameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5231:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "5223:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 561,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5223:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5253:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "5245:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 563,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5245:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5273:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "5265:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 565,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5265:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5213:72:2"
									},
									"returnParameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 570,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 592,
												"src": "5319:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 569,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5319:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5318:6:2"
									},
									"scope": 978,
									"src": "5192:286:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 620,
										"nodeType": "Block",
										"src": "5967:140:2",
										"statements": [
											{
												"assignments": [
													603
												],
												"declarations": [
													{
														"constant": false,
														"id": 603,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "5985:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 620,
														"src": "5977:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 602,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5977:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 606,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 604,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1093,
														"src": "5993:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5993:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5977:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 608,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 603,
															"src": "6024:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 609,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 595,
															"src": "6031:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 615,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 611,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 603,
																		"src": "6050:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 612,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 595,
																		"src": "6057:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 610,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 534,
																	"src": "6040:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 613,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6040:25:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 614,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 597,
																"src": "6068:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6040:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 607,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 912,
														"src": "6015:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6015:64:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 617,
												"nodeType": "ExpressionStatement",
												"src": "6015:64:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 618,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6096:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 601,
												"id": 619,
												"nodeType": "Return",
												"src": "6089:11:2"
											}
										]
									},
									"documentation": {
										"id": 593,
										"nodeType": "StructuredDocumentation",
										"src": "5484:384:2",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 621,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "5882:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 598,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 595,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5908:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "5900:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 594,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5900:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 597,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "5925:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "5917:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 596,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5917:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5899:37:2"
									},
									"returnParameters": {
										"id": 601,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 600,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 621,
												"src": "5961:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 599,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5961:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5960:6:2"
									},
									"scope": 978,
									"src": "5873:234:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 661,
										"nodeType": "Block",
										"src": "6693:328:2",
										"statements": [
											{
												"assignments": [
													632
												],
												"declarations": [
													{
														"constant": false,
														"id": 632,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6711:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 661,
														"src": "6703:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 631,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6703:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 635,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 633,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1093,
														"src": "6719:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6719:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6703:28:2"
											},
											{
												"assignments": [
													637
												],
												"declarations": [
													{
														"constant": false,
														"id": 637,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "6749:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 661,
														"src": "6741:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 636,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6741:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 642,
												"initialValue": {
													"arguments": [
														{
															"id": 639,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 632,
															"src": "6778:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 640,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 624,
															"src": "6785:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 638,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "6768:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 641,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6768:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6741:52:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 646,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 644,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 637,
																"src": "6811:16:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 645,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 626,
																"src": "6831:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6811:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 647,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6848:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 643,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6803:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6803:85:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 649,
												"nodeType": "ExpressionStatement",
												"src": "6803:85:2"
											},
											{
												"id": 658,
												"nodeType": "UncheckedBlock",
												"src": "6898:95:2",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 651,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 632,
																	"src": "6931:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 652,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 624,
																	"src": "6938:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 655,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 653,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 637,
																		"src": "6947:16:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 654,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 626,
																		"src": "6966:15:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6947:34:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 650,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 912,
																"src": "6922:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 656,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6922:60:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 657,
														"nodeType": "ExpressionStatement",
														"src": "6922:60:2"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 659,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7010:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 630,
												"id": 660,
												"nodeType": "Return",
												"src": "7003:11:2"
											}
										]
									},
									"documentation": {
										"id": 622,
										"nodeType": "StructuredDocumentation",
										"src": "6113:476:2",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 662,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6603:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 624,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6629:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "6621:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 623,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6621:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6646:15:2",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "6638:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 625,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6638:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6620:42:2"
									},
									"returnParameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "6687:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 628,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6687:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6686:6:2"
									},
									"scope": 978,
									"src": "6594:427:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 738,
										"nodeType": "Block",
										"src": "7592:543:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 678,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 673,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 665,
																"src": "7610:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 676,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7626:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 675,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7618:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 674,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7618:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 677,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7618:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7610:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 679,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7630:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 672,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7602:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 680,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7602:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 681,
												"nodeType": "ExpressionStatement",
												"src": "7602:68:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 688,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 683,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 667,
																"src": "7688:2:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 686,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7702:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 685,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7694:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 684,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7694:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 687,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7694:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7688:16:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 689,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7706:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 682,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7680:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 690,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7680:64:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 691,
												"nodeType": "ExpressionStatement",
												"src": "7680:64:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 693,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 665,
															"src": "7776:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 694,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "7782:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 695,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 669,
															"src": "7786:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 692,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 966,
														"src": "7755:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7755:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 697,
												"nodeType": "ExpressionStatement",
												"src": "7755:38:2"
											},
											{
												"assignments": [
													699
												],
												"declarations": [
													{
														"constant": false,
														"id": 699,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "7812:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 738,
														"src": "7804:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 698,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7804:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 703,
												"initialValue": {
													"baseExpression": {
														"id": 700,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 408,
														"src": "7826:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 702,
													"indexExpression": {
														"id": 701,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 665,
														"src": "7836:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7826:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7804:37:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 707,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 705,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 699,
																"src": "7859:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 706,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 669,
																"src": "7874:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7859:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 708,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7882:40:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 704,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7851:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 709,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7851:72:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 710,
												"nodeType": "ExpressionStatement",
												"src": "7851:72:2"
											},
											{
												"id": 719,
												"nodeType": "UncheckedBlock",
												"src": "7933:73:2",
												"statements": [
													{
														"expression": {
															"id": 717,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 711,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 408,
																	"src": "7957:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 713,
																"indexExpression": {
																	"id": 712,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 665,
																	"src": "7967:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "7957:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 716,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 714,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 699,
																	"src": "7975:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 715,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 669,
																	"src": "7989:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7975:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7957:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 718,
														"nodeType": "ExpressionStatement",
														"src": "7957:38:2"
													}
												]
											},
											{
												"expression": {
													"id": 724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 720,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 408,
															"src": "8015:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 722,
														"indexExpression": {
															"id": 721,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "8025:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8015:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 723,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 669,
														"src": "8032:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8015:23:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 725,
												"nodeType": "ExpressionStatement",
												"src": "8015:23:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 727,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 665,
															"src": "8063:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 728,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "8069:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 729,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 669,
															"src": "8073:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 726,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 990,
														"src": "8054:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 730,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8054:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 731,
												"nodeType": "EmitStatement",
												"src": "8049:31:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 733,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 665,
															"src": "8111:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 734,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "8117:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 735,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 669,
															"src": "8121:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 732,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 977,
														"src": "8091:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 736,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8091:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 737,
												"nodeType": "ExpressionStatement",
												"src": "8091:37:2"
											}
										]
									},
									"documentation": {
										"id": 663,
										"nodeType": "StructuredDocumentation",
										"src": "7027:452:2",
										"text": " @dev Moves `amount` of tokens from `sender` to `recipient`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 739,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7493:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7520:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "7512:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 664,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7512:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7542:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "7534:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7534:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7562:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "7554:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 668,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7554:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7502:72:2"
									},
									"returnParameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7592:0:2"
									},
									"scope": 978,
									"src": "7484:651:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 794,
										"nodeType": "Block",
										"src": "8476:324:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 753,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 748,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 742,
																"src": "8494:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 751,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8513:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 750,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8505:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 749,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8505:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 752,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8505:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8494:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 754,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8517:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 747,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8486:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 755,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8486:65:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 756,
												"nodeType": "ExpressionStatement",
												"src": "8486:65:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 760,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8591:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 759,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8583:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 758,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8583:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 761,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8583:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 762,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 742,
															"src": "8595:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 763,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "8604:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 757,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 966,
														"src": "8562:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 764,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8562:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 765,
												"nodeType": "ExpressionStatement",
												"src": "8562:49:2"
											},
											{
												"expression": {
													"id": 768,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 766,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 416,
														"src": "8622:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 767,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 744,
														"src": "8638:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8622:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 769,
												"nodeType": "ExpressionStatement",
												"src": "8622:22:2"
											},
											{
												"expression": {
													"id": 774,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 770,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 408,
															"src": "8654:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 772,
														"indexExpression": {
															"id": 771,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 742,
															"src": "8664:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8654:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 773,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 744,
														"src": "8676:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8654:28:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 775,
												"nodeType": "ExpressionStatement",
												"src": "8654:28:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 779,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8714:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 778,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8706:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 777,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8706:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 780,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8706:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 781,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 742,
															"src": "8718:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 782,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "8727:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 776,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 990,
														"src": "8697:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 783,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8697:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 784,
												"nodeType": "EmitStatement",
												"src": "8692:42:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 788,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8773:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 787,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8765:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 786,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8765:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 789,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8765:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 790,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 742,
															"src": "8777:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 791,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "8786:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 785,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 977,
														"src": "8745:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 792,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8745:48:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 793,
												"nodeType": "ExpressionStatement",
												"src": "8745:48:2"
											}
										]
									},
									"documentation": {
										"id": 740,
										"nodeType": "StructuredDocumentation",
										"src": "8141:265:2",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 795,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8420:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8434:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 795,
												"src": "8426:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 741,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8426:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8451:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 795,
												"src": "8443:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 743,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8443:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8425:33:2"
									},
									"returnParameters": {
										"id": 746,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8476:0:2"
									},
									"scope": 978,
									"src": "8411:389:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 866,
										"nodeType": "Block",
										"src": "9185:511:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 809,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 804,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 798,
																"src": "9203:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 807,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9222:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 806,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9214:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 805,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9214:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 808,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9214:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9203:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 810,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9226:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 803,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9195:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 811,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9195:67:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 812,
												"nodeType": "ExpressionStatement",
												"src": "9195:67:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 814,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 798,
															"src": "9294:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 817,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9311:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 816,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9303:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 815,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9303:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 818,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9303:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 819,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 800,
															"src": "9315:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 813,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 966,
														"src": "9273:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 820,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9273:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 821,
												"nodeType": "ExpressionStatement",
												"src": "9273:49:2"
											},
											{
												"assignments": [
													823
												],
												"declarations": [
													{
														"constant": false,
														"id": 823,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9341:14:2",
														"nodeType": "VariableDeclaration",
														"scope": 866,
														"src": "9333:22:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 822,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9333:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 827,
												"initialValue": {
													"baseExpression": {
														"id": 824,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 408,
														"src": "9358:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 826,
													"indexExpression": {
														"id": 825,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 798,
														"src": "9368:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9358:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9333:43:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 831,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 829,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 823,
																"src": "9394:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 830,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 800,
																"src": "9412:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9394:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 832,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9420:36:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 828,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9386:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 833,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9386:71:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 834,
												"nodeType": "ExpressionStatement",
												"src": "9386:71:2"
											},
											{
												"id": 843,
												"nodeType": "UncheckedBlock",
												"src": "9467:79:2",
												"statements": [
													{
														"expression": {
															"id": 841,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 835,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 408,
																	"src": "9491:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 837,
																"indexExpression": {
																	"id": 836,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 798,
																	"src": "9501:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9491:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 840,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 838,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 823,
																	"src": "9512:14:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 839,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 800,
																	"src": "9529:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9512:23:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9491:44:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 842,
														"nodeType": "ExpressionStatement",
														"src": "9491:44:2"
													}
												]
											},
											{
												"expression": {
													"id": 846,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 844,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 416,
														"src": "9555:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 845,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 800,
														"src": "9571:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9555:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 847,
												"nodeType": "ExpressionStatement",
												"src": "9555:22:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 849,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 798,
															"src": "9602:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 852,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9619:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 851,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9611:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 850,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9611:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 853,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9611:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 854,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 800,
															"src": "9623:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 848,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 990,
														"src": "9593:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 855,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9593:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 856,
												"nodeType": "EmitStatement",
												"src": "9588:42:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 858,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 798,
															"src": "9661:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 861,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9678:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 860,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9670:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 859,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9670:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 862,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9670:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 863,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 800,
															"src": "9682:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 857,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 977,
														"src": "9641:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 864,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9641:48:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 865,
												"nodeType": "ExpressionStatement",
												"src": "9641:48:2"
											}
										]
									},
									"documentation": {
										"id": 796,
										"nodeType": "StructuredDocumentation",
										"src": "8806:309:2",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 867,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9129:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 801,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 798,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9143:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 867,
												"src": "9135:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 797,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9135:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 800,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9160:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 867,
												"src": "9152:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 799,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9152:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9134:33:2"
									},
									"returnParameters": {
										"id": 802,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9185:0:2"
									},
									"scope": 978,
									"src": "9120:576:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 911,
										"nodeType": "Block",
										"src": "10232:257:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 883,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 878,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 870,
																"src": "10250:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 881,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10267:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 880,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10259:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 879,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10259:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 882,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10259:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10250:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 884,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10271:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 877,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10242:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 885,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10242:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 886,
												"nodeType": "ExpressionStatement",
												"src": "10242:68:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 893,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 888,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 872,
																"src": "10328:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 891,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10347:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 890,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10339:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 889,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10339:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 892,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10339:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10328:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 894,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10351:36:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 887,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10320:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 895,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10320:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 896,
												"nodeType": "ExpressionStatement",
												"src": "10320:68:2"
											},
											{
												"expression": {
													"id": 903,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 897,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 414,
																"src": "10399:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 900,
															"indexExpression": {
																"id": 898,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 870,
																"src": "10411:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10399:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 901,
														"indexExpression": {
															"id": 899,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 872,
															"src": "10418:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10399:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 902,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 874,
														"src": "10429:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10399:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 904,
												"nodeType": "ExpressionStatement",
												"src": "10399:36:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 906,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 870,
															"src": "10459:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 907,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 872,
															"src": "10466:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 908,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 874,
															"src": "10475:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 905,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 999,
														"src": "10450:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 909,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10450:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 910,
												"nodeType": "EmitStatement",
												"src": "10445:37:2"
											}
										]
									},
									"documentation": {
										"id": 868,
										"nodeType": "StructuredDocumentation",
										"src": "9702:412:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 912,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10128:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 870,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10154:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 912,
												"src": "10146:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 869,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10146:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 872,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10177:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 912,
												"src": "10169:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 871,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10169:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10202:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 912,
												"src": "10194:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 873,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10194:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10136:78:2"
									},
									"returnParameters": {
										"id": 876,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10232:0:2"
									},
									"scope": 978,
									"src": "10119:370:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 954,
										"nodeType": "Block",
										"src": "10890:321:2",
										"statements": [
											{
												"assignments": [
													923
												],
												"declarations": [
													{
														"constant": false,
														"id": 923,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10908:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 954,
														"src": "10900:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 922,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10900:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 928,
												"initialValue": {
													"arguments": [
														{
															"id": 925,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 915,
															"src": "10937:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 926,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 917,
															"src": "10944:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 924,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "10927:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 927,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10927:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10900:52:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 935,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 929,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 923,
														"src": "10966:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 932,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10991:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 931,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10991:7:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 930,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10986:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 933,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10986:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 934,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10986:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10966:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 953,
												"nodeType": "IfStatement",
												"src": "10962:243:2",
												"trueBody": {
													"id": 952,
													"nodeType": "Block",
													"src": "11005:200:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 939,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 937,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 923,
																			"src": "11027:16:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 938,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 919,
																			"src": "11047:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11027:26:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 940,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11055:31:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 936,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11019:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 941,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11019:68:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 942,
															"nodeType": "ExpressionStatement",
															"src": "11019:68:2"
														},
														{
															"id": 951,
															"nodeType": "UncheckedBlock",
															"src": "11101:94:2",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 944,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 915,
																				"src": "11138:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 945,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 917,
																				"src": "11145:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 948,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 946,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 923,
																					"src": "11154:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 947,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 919,
																					"src": "11173:6:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11154:25:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 943,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 912,
																			"src": "11129:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 949,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11129:51:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 950,
																	"nodeType": "ExpressionStatement",
																	"src": "11129:51:2"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 913,
										"nodeType": "StructuredDocumentation",
										"src": "10495:270:2",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 955,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10779:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 920,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 915,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10812:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 955,
												"src": "10804:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 914,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10804:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 917,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10835:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 955,
												"src": "10827:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 916,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10827:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 919,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10860:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 955,
												"src": "10852:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 918,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10852:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10794:78:2"
									},
									"returnParameters": {
										"id": 921,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10890:0:2"
									},
									"scope": 978,
									"src": "10770:441:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 965,
										"nodeType": "Block",
										"src": "11914:2:2",
										"statements": []
									},
									"documentation": {
										"id": 956,
										"nodeType": "StructuredDocumentation",
										"src": "11217:573:2",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 966,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "11804:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 963,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 958,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "11842:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 966,
												"src": "11834:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 957,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11834:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11864:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 966,
												"src": "11856:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 959,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11856:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 962,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11884:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 966,
												"src": "11876:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 961,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11876:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11824:72:2"
									},
									"returnParameters": {
										"id": 964,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11914:0:2"
									},
									"scope": 978,
									"src": "11795:121:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 976,
										"nodeType": "Block",
										"src": "12622:2:2",
										"statements": []
									},
									"documentation": {
										"id": 967,
										"nodeType": "StructuredDocumentation",
										"src": "11922:577:2",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 977,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "12513:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 974,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 969,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12550:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "12542:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 968,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12542:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 971,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12572:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "12564:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 970,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12564:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 973,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12592:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "12584:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 972,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12584:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12532:72:2"
									},
									"returnParameters": {
										"id": 975,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12622:0:2"
									},
									"scope": 978,
									"src": "12504:120:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 979,
							"src": "1403:11223:2",
							"usedErrors": []
						}
					],
					"src": "105:12522:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts@4.6.0/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.6.0/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							1056
						]
					},
					"id": 1057,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 980,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 981,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 1056,
							"linearizedBaseContracts": [
								1056
							],
							"name": "IERC20",
							"nameLocation": "212:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 982,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 990,
									"name": "Transfer",
									"nameLocation": "394:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 984,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 990,
												"src": "403:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 983,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 986,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 990,
												"src": "425:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 985,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 988,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 990,
												"src": "445:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 987,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:3"
									},
									"src": "388:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 991,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 999,
									"name": "Approval",
									"nameLocation": "625:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 998,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 993,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 999,
												"src": "634:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 992,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 995,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 999,
												"src": "657:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 994,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 997,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 999,
												"src": "682:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 996,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:3"
									},
									"src": "619:78:3"
								},
								{
									"documentation": {
										"id": 1000,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:3",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 1005,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1001,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:3"
									},
									"returnParameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1005,
												"src": "820:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1002,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:3"
									},
									"scope": 1056,
									"src": "774:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1006,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:3",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 1013,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1008,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "931:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1007,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:3"
									},
									"returnParameters": {
										"id": 1012,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1011,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "971:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1010,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:3"
									},
									"scope": 1056,
									"src": "912:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1014,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:3",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 1023,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1016,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "1211:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1015,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1018,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "1223:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1017,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:3"
									},
									"returnParameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "1257:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1020,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:3"
									},
									"scope": 1056,
									"src": "1193:70:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1024,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 1033,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1029,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1026,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "1557:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1025,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1028,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "1572:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1027,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:3"
									},
									"returnParameters": {
										"id": 1032,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1031,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "1612:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1030,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:3"
									},
									"scope": 1056,
									"src": "1538:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1034,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:3",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1043,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1036,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1043,
												"src": "2291:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1035,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1043,
												"src": "2308:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1037,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:3"
									},
									"returnParameters": {
										"id": 1042,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1041,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1043,
												"src": "2342:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1040,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:3"
									},
									"scope": 1056,
									"src": "2274:74:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1044,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:3",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1055,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1051,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1046,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2685:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1055,
												"src": "2677:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1045,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1048,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2707:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 1055,
												"src": "2699:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1047,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1050,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2727:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 1055,
												"src": "2719:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1049,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:3"
									},
									"returnParameters": {
										"id": 1054,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1053,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1055,
												"src": "2758:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1052,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:3"
									},
									"scope": 1056,
									"src": "2646:118:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1057,
							"src": "202:2564:3",
							"usedErrors": []
						}
					],
					"src": "106:2661:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts@4.6.0/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.6.0/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							1056
						],
						"IERC20Metadata": [
							1081
						]
					},
					"id": 1082,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1058,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.6.0/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1059,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1082,
							"sourceUnit": 1057,
							"src": "135:23:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1061,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1056,
										"src": "305:6:4"
									},
									"id": 1062,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:4"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1060,
								"nodeType": "StructuredDocumentation",
								"src": "160:116:4",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 1081,
							"linearizedBaseContracts": [
								1081,
								1056
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1063,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:4",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1068,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1064,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:4"
									},
									"returnParameters": {
										"id": 1067,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1066,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1068,
												"src": "416:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1065,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:4"
									},
									"scope": 1081,
									"src": "377:54:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1069,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:4",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1074,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1070,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:4"
									},
									"returnParameters": {
										"id": 1073,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1072,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1074,
												"src": "539:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1071,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:4"
									},
									"scope": 1081,
									"src": "498:56:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1075,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:4",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1080,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1076,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:4"
									},
									"returnParameters": {
										"id": 1079,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1078,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1080,
												"src": "673:5:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1077,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:4"
									},
									"scope": 1081,
									"src": "630:50:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1082,
							"src": "277:405:4",
							"usedErrors": []
						}
					],
					"src": "110:573:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts@4.6.0/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.6.0/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1103
						]
					},
					"id": 1104,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1083,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1084,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1103,
							"linearizedBaseContracts": [
								1103
							],
							"name": "Context",
							"nameLocation": "626:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1092,
										"nodeType": "Block",
										"src": "702:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1089,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1090,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1088,
												"id": 1091,
												"nodeType": "Return",
												"src": "712:17:5"
											}
										]
									},
									"id": 1093,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1085,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:5"
									},
									"returnParameters": {
										"id": 1088,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1087,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "693:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1086,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:5"
									},
									"scope": 1103,
									"src": "640:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1101,
										"nodeType": "Block",
										"src": "809:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1098,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1099,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1097,
												"id": 1100,
												"nodeType": "Return",
												"src": "819:15:5"
											}
										]
									},
									"id": 1102,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1094,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"returnParameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1096,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1102,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1095,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:5"
									},
									"scope": 1103,
									"src": "742:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1104,
							"src": "608:235:5",
							"usedErrors": []
						}
					],
					"src": "86:758:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts@4.6.0/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.6.0/utils/Strings.sol",
					"exportedSymbols": {
						"Strings": [
							1306
						]
					},
					"id": 1307,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1105,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1106,
								"nodeType": "StructuredDocumentation",
								"src": "111:34:6",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1306,
							"linearizedBaseContracts": [
								1306
							],
							"name": "Strings",
							"nameLocation": "154:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1109,
									"mutability": "constant",
									"name": "_HEX_SYMBOLS",
									"nameLocation": "193:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 1306,
									"src": "168:58:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1107,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "168:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1108,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "208:18:6",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1187,
										"nodeType": "Block",
										"src": "399:632:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1119,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1117,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1112,
														"src": "601:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1118,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "610:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "601:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1123,
												"nodeType": "IfStatement",
												"src": "597:51:6",
												"trueBody": {
													"id": 1122,
													"nodeType": "Block",
													"src": "613:35:6",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1120,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "634:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																	"typeString": "literal_string \"0\""
																},
																"value": "0"
															},
															"functionReturnParameters": 1116,
															"id": 1121,
															"nodeType": "Return",
															"src": "627:10:6"
														}
													]
												}
											},
											{
												"assignments": [
													1125
												],
												"declarations": [
													{
														"constant": false,
														"id": 1125,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "665:4:6",
														"nodeType": "VariableDeclaration",
														"scope": 1187,
														"src": "657:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1124,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "657:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1127,
												"initialValue": {
													"id": 1126,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1112,
													"src": "672:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "657:20:6"
											},
											{
												"assignments": [
													1129
												],
												"declarations": [
													{
														"constant": false,
														"id": 1129,
														"mutability": "mutable",
														"name": "digits",
														"nameLocation": "695:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1187,
														"src": "687:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1128,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "687:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1130,
												"nodeType": "VariableDeclarationStatement",
												"src": "687:14:6"
											},
											{
												"body": {
													"id": 1141,
													"nodeType": "Block",
													"src": "729:57:6",
													"statements": [
														{
															"expression": {
																"id": 1135,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "743:8:6",
																"subExpression": {
																	"id": 1134,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1129,
																	"src": "743:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1136,
															"nodeType": "ExpressionStatement",
															"src": "743:8:6"
														},
														{
															"expression": {
																"id": 1139,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1137,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1125,
																	"src": "765:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 1138,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "773:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "765:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1140,
															"nodeType": "ExpressionStatement",
															"src": "765:10:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1133,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1131,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1125,
														"src": "718:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1132,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "726:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "718:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1142,
												"nodeType": "WhileStatement",
												"src": "711:75:6"
											},
											{
												"assignments": [
													1144
												],
												"declarations": [
													{
														"constant": false,
														"id": 1144,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "808:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1187,
														"src": "795:19:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1143,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "795:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1149,
												"initialValue": {
													"arguments": [
														{
															"id": 1147,
															"name": "digits",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1129,
															"src": "827:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1146,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "817:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1145,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "821:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1148,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "817:17:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "795:39:6"
											},
											{
												"body": {
													"id": 1180,
													"nodeType": "Block",
													"src": "863:131:6",
													"statements": [
														{
															"expression": {
																"id": 1155,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1153,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1129,
																	"src": "877:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 1154,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "887:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "877:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1156,
															"nodeType": "ExpressionStatement",
															"src": "877:11:6"
														},
														{
															"expression": {
																"id": 1174,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1157,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1144,
																		"src": "902:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1159,
																	"indexExpression": {
																		"id": 1158,
																		"name": "digits",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1129,
																		"src": "909:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "902:14:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1171,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3438",
																						"id": 1164,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "932:2:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1169,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1167,
																									"name": "value",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1112,
																									"src": "945:5:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "%",
																								"rightExpression": {
																									"hexValue": "3130",
																									"id": 1168,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "953:2:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_10_by_1",
																										"typeString": "int_const 10"
																									},
																									"value": "10"
																								},
																								"src": "945:10:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"id": 1166,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "937:7:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint256_$",
																								"typeString": "type(uint256)"
																							},
																							"typeName": {
																								"id": 1165,
																								"name": "uint256",
																								"nodeType": "ElementaryTypeName",
																								"src": "937:7:6",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 1170,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "937:19:6",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "932:24:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1163,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "926:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 1162,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "926:5:6",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1172,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "926:31:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 1161,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "919:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes1_$",
																			"typeString": "type(bytes1)"
																		},
																		"typeName": {
																			"id": 1160,
																			"name": "bytes1",
																			"nodeType": "ElementaryTypeName",
																			"src": "919:6:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1173,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "919:39:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "902:56:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1175,
															"nodeType": "ExpressionStatement",
															"src": "902:56:6"
														},
														{
															"expression": {
																"id": 1178,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1176,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1112,
																	"src": "972:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 1177,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "981:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "972:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1179,
															"nodeType": "ExpressionStatement",
															"src": "972:11:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1152,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1150,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1112,
														"src": "851:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1151,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "860:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "851:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1181,
												"nodeType": "WhileStatement",
												"src": "844:150:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1184,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1144,
															"src": "1017:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1183,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1010:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1182,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1010:6:6",
															"typeDescriptions": {}
														}
													},
													"id": 1185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1010:14:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1116,
												"id": 1186,
												"nodeType": "Return",
												"src": "1003:21:6"
											}
										]
									},
									"documentation": {
										"id": 1110,
										"nodeType": "StructuredDocumentation",
										"src": "233:90:6",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1188,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "337:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1112,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "354:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "346:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1111,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "346:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "345:15:6"
									},
									"returnParameters": {
										"id": 1116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "384:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1114,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "384:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "383:15:6"
									},
									"scope": 1306,
									"src": "328:703:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1228,
										"nodeType": "Block",
										"src": "1210:255:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1196,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1191,
														"src": "1224:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1197,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1233:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1224:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1202,
												"nodeType": "IfStatement",
												"src": "1220:54:6",
												"trueBody": {
													"id": 1201,
													"nodeType": "Block",
													"src": "1236:38:6",
													"statements": [
														{
															"expression": {
																"hexValue": "30783030",
																"id": 1199,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1257:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4",
																	"typeString": "literal_string \"0x00\""
																},
																"value": "0x00"
															},
															"functionReturnParameters": 1195,
															"id": 1200,
															"nodeType": "Return",
															"src": "1250:13:6"
														}
													]
												}
											},
											{
												"assignments": [
													1204
												],
												"declarations": [
													{
														"constant": false,
														"id": 1204,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "1291:4:6",
														"nodeType": "VariableDeclaration",
														"scope": 1228,
														"src": "1283:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1203,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1283:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1206,
												"initialValue": {
													"id": 1205,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1191,
													"src": "1298:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1283:20:6"
											},
											{
												"assignments": [
													1208
												],
												"declarations": [
													{
														"constant": false,
														"id": 1208,
														"mutability": "mutable",
														"name": "length",
														"nameLocation": "1321:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1228,
														"src": "1313:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1207,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1313:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1210,
												"initialValue": {
													"hexValue": "30",
													"id": 1209,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1330:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1313:18:6"
											},
											{
												"body": {
													"id": 1221,
													"nodeType": "Block",
													"src": "1359:57:6",
													"statements": [
														{
															"expression": {
																"id": 1215,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "1373:8:6",
																"subExpression": {
																	"id": 1214,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1208,
																	"src": "1373:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1216,
															"nodeType": "ExpressionStatement",
															"src": "1373:8:6"
														},
														{
															"expression": {
																"id": 1219,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1217,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1204,
																	"src": "1395:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 1218,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1404:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "1395:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1220,
															"nodeType": "ExpressionStatement",
															"src": "1395:10:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1211,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1204,
														"src": "1348:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1212,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1356:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1348:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1222,
												"nodeType": "WhileStatement",
												"src": "1341:75:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1224,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1191,
															"src": "1444:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1225,
															"name": "length",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1208,
															"src": "1451:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1223,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1229,
															1305
														],
														"referencedDeclaration": 1305,
														"src": "1432:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 1226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1432:26:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1195,
												"id": 1227,
												"nodeType": "Return",
												"src": "1425:33:6"
											}
										]
									},
									"documentation": {
										"id": 1189,
										"nodeType": "StructuredDocumentation",
										"src": "1037:94:6",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1229,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1145:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1191,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1165:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "1157:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1190,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:15:6"
									},
									"returnParameters": {
										"id": 1195,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1194,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "1195:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1193,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1195:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:15:6"
									},
									"scope": 1306,
									"src": "1136:329:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1304,
										"nodeType": "Block",
										"src": "1678:351:6",
										"statements": [
											{
												"assignments": [
													1240
												],
												"declarations": [
													{
														"constant": false,
														"id": 1240,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1701:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1304,
														"src": "1688:19:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1239,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1688:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1249,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1247,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1245,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1243,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1720:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1244,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1234,
																	"src": "1724:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1720:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1246,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1733:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1720:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1242,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1710:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1241,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1714:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1710:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1688:47:6"
											},
											{
												"expression": {
													"id": 1254,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1250,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1240,
															"src": "1745:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1252,
														"indexExpression": {
															"hexValue": "30",
															"id": 1251,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1752:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1745:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1253,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1757:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1745:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1255,
												"nodeType": "ExpressionStatement",
												"src": "1745:15:6"
											},
											{
												"expression": {
													"id": 1260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1256,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1240,
															"src": "1770:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1258,
														"indexExpression": {
															"hexValue": "31",
															"id": 1257,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1777:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1770:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1259,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1782:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1770:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1261,
												"nodeType": "ExpressionStatement",
												"src": "1770:15:6"
											},
											{
												"body": {
													"id": 1290,
													"nodeType": "Block",
													"src": "1840:87:6",
													"statements": [
														{
															"expression": {
																"id": 1284,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1276,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1240,
																		"src": "1854:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1278,
																	"indexExpression": {
																		"id": 1277,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1263,
																		"src": "1861:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1854:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1279,
																		"name": "_HEX_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1109,
																		"src": "1866:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1283,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1282,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1280,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1232,
																			"src": "1879:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1281,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1887:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1879:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1866:25:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1854:37:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1285,
															"nodeType": "ExpressionStatement",
															"src": "1854:37:6"
														},
														{
															"expression": {
																"id": 1288,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1286,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1232,
																	"src": "1905:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1287,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1915:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1905:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1289,
															"nodeType": "ExpressionStatement",
															"src": "1905:11:6"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1270,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1263,
														"src": "1828:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1271,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1832:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1828:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1291,
												"initializationExpression": {
													"assignments": [
														1263
													],
													"declarations": [
														{
															"constant": false,
															"id": 1263,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1808:1:6",
															"nodeType": "VariableDeclaration",
															"scope": 1291,
															"src": "1800:9:6",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1262,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1800:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1269,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1268,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1266,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1264,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1812:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1265,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1234,
																"src": "1816:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1812:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1267,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1825:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1812:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1800:26:6"
												},
												"loopExpression": {
													"expression": {
														"id": 1274,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1835:3:6",
														"subExpression": {
															"id": 1273,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1263,
															"src": "1837:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1275,
													"nodeType": "ExpressionStatement",
													"src": "1835:3:6"
												},
												"nodeType": "ForStatement",
												"src": "1795:132:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1293,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1232,
																"src": "1944:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1294,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1953:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1944:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 1296,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1956:34:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 1292,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1936:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1936:55:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1298,
												"nodeType": "ExpressionStatement",
												"src": "1936:55:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1301,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1240,
															"src": "2015:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1300,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2008:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1299,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2008:6:6",
															"typeDescriptions": {}
														}
													},
													"id": 1302,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2008:14:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1238,
												"id": 1303,
												"nodeType": "Return",
												"src": "2001:21:6"
											}
										]
									},
									"documentation": {
										"id": 1230,
										"nodeType": "StructuredDocumentation",
										"src": "1471:112:6",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1305,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1597:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1232,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1617:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1305,
												"src": "1609:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1231,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1609:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1234,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1632:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1305,
												"src": "1624:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1233,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1624:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1608:31:6"
									},
									"returnParameters": {
										"id": 1238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1237,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1305,
												"src": "1663:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1236,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1663:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1662:15:6"
									},
									"scope": 1306,
									"src": "1588:441:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1307,
							"src": "146:1885:6",
							"usedErrors": []
						}
					],
					"src": "86:1946:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts@4.6.0/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.6.0/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							1330
						],
						"IERC165": [
							1342
						]
					},
					"id": 1331,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1308,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "99:23:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.6.0/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 1309,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1331,
							"sourceUnit": 1343,
							"src": "124:23:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1311,
										"name": "IERC165",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1342,
										"src": "754:7:7"
									},
									"id": 1312,
									"nodeType": "InheritanceSpecifier",
									"src": "754:7:7"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1310,
								"nodeType": "StructuredDocumentation",
								"src": "149:576:7",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
							},
							"fullyImplemented": true,
							"id": 1330,
							"linearizedBaseContracts": [
								1330,
								1342
							],
							"name": "ERC165",
							"nameLocation": "744:6:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										1341
									],
									"body": {
										"id": 1328,
										"nodeType": "Block",
										"src": "920:64:7",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 1326,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1321,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1315,
														"src": "937:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1323,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1342,
																	"src": "957:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$1342_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$1342_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 1322,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "952:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1324,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "952:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$1342",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 1325,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "952:25:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "937:40:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1320,
												"id": 1327,
												"nodeType": "Return",
												"src": "930:47:7"
											}
										]
									},
									"documentation": {
										"id": 1313,
										"nodeType": "StructuredDocumentation",
										"src": "768:56:7",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 1329,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "838:17:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1317,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "896:8:7"
									},
									"parameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1315,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "863:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1329,
												"src": "856:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1314,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "856:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "855:20:7"
									},
									"returnParameters": {
										"id": 1320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1319,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1329,
												"src": "914:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1318,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "914:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "913:6:7"
									},
									"scope": 1330,
									"src": "829:155:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 1331,
							"src": "726:260:7",
							"usedErrors": []
						}
					],
					"src": "99:888:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts@4.6.0/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.6.0/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1342
						]
					},
					"id": 1343,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1332,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1333,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:8",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 1342,
							"linearizedBaseContracts": [
								1342
							],
							"name": "IERC165",
							"nameLocation": "415:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1334,
										"nodeType": "StructuredDocumentation",
										"src": "429:340:8",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1341,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "783:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1336,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "808:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "801:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1335,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "801:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:20:8"
									},
									"returnParameters": {
										"id": 1340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1339,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "844:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1338,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "844:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:6:8"
									},
									"scope": 1342,
									"src": "774:76:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1343,
							"src": "405:447:8",
							"usedErrors": []
						}
					],
					"src": "100:753:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts@4.6.0/utils/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@4.6.0/utils/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							1654
						]
					},
					"id": 1655,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1344,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1345,
								"nodeType": "StructuredDocumentation",
								"src": "285:196:9",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 1654,
							"linearizedBaseContracts": [
								1654
							],
							"name": "SafeMath",
							"nameLocation": "490:8:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1376,
										"nodeType": "Block",
										"src": "717:140:9",
										"statements": [
											{
												"id": 1375,
												"nodeType": "UncheckedBlock",
												"src": "727:124:9",
												"statements": [
													{
														"assignments": [
															1358
														],
														"declarations": [
															{
																"constant": false,
																"id": 1358,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "759:1:9",
																"nodeType": "VariableDeclaration",
																"scope": 1375,
																"src": "751:9:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1357,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "751:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1362,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1361,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1359,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1348,
																"src": "763:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1360,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1350,
																"src": "767:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "763:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "751:17:9"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1365,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1363,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1358,
																"src": "786:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1364,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1348,
																"src": "790:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "786:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1370,
														"nodeType": "IfStatement",
														"src": "782:28:9",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1366,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "801:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1367,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "808:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1368,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "800:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1356,
															"id": 1369,
															"nodeType": "Return",
															"src": "793:17:9"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1371,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "832:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 1372,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1358,
																	"src": "838:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1373,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "831:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1356,
														"id": 1374,
														"nodeType": "Return",
														"src": "824:16:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1346,
										"nodeType": "StructuredDocumentation",
										"src": "505:131:9",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1377,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "650:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1348,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "665:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1377,
												"src": "657:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1347,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1350,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "676:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1377,
												"src": "668:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1349,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "656:22:9"
									},
									"returnParameters": {
										"id": 1356,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1377,
												"src": "702:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1352,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "702:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1355,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1377,
												"src": "708:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1354,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "708:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "701:15:9"
									},
									"scope": 1654,
									"src": "641:216:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1404,
										"nodeType": "Block",
										"src": "1078:113:9",
										"statements": [
											{
												"id": 1403,
												"nodeType": "UncheckedBlock",
												"src": "1088:97:9",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1391,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1389,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1382,
																"src": "1116:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 1390,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1380,
																"src": "1120:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1116:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1396,
														"nodeType": "IfStatement",
														"src": "1112:28:9",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1392,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1131:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1393,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1138:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1394,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1130:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1388,
															"id": 1395,
															"nodeType": "Return",
															"src": "1123:17:9"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1397,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1162:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1400,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1398,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1380,
																		"src": "1168:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1399,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1382,
																		"src": "1172:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1168:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1401,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1161:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1388,
														"id": 1402,
														"nodeType": "Return",
														"src": "1154:20:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1378,
										"nodeType": "StructuredDocumentation",
										"src": "863:134:9",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1405,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "1011:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1380,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1026:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1405,
												"src": "1018:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1379,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1018:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1382,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1037:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1405,
												"src": "1029:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1381,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1029:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1017:22:9"
									},
									"returnParameters": {
										"id": 1388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1385,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1405,
												"src": "1063:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1384,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1063:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1387,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1405,
												"src": "1069:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1386,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1069:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1062:15:9"
									},
									"scope": 1654,
									"src": "1002:189:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1446,
										"nodeType": "Block",
										"src": "1415:417:9",
										"statements": [
											{
												"id": 1445,
												"nodeType": "UncheckedBlock",
												"src": "1425:401:9",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1419,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1417,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1408,
																"src": "1683:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1418,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1688:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1683:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1424,
														"nodeType": "IfStatement",
														"src": "1679:28:9",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 1420,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1699:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 1421,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1705:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1422,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1698:9:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1416,
															"id": 1423,
															"nodeType": "Return",
															"src": "1691:16:9"
														}
													},
													{
														"assignments": [
															1426
														],
														"declarations": [
															{
																"constant": false,
																"id": 1426,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1729:1:9",
																"nodeType": "VariableDeclaration",
																"scope": 1445,
																"src": "1721:9:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1425,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1721:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1430,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1429,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1427,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1408,
																"src": "1733:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1428,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1410,
																"src": "1737:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1733:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1721:17:9"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1435,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1433,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1431,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1426,
																	"src": "1756:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 1432,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1408,
																	"src": "1760:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1756:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 1434,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1410,
																"src": "1765:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1756:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1440,
														"nodeType": "IfStatement",
														"src": "1752:33:9",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1436,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1776:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1437,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1783:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1438,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1775:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1416,
															"id": 1439,
															"nodeType": "Return",
															"src": "1768:17:9"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1441,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1807:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 1442,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1426,
																	"src": "1813:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1443,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1806:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1416,
														"id": 1444,
														"nodeType": "Return",
														"src": "1799:16:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1406,
										"nodeType": "StructuredDocumentation",
										"src": "1197:137:9",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 1447,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1348:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1411,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1408,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1363:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1447,
												"src": "1355:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1407,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1355:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1410,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1374:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1447,
												"src": "1366:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1409,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1366:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1354:22:9"
									},
									"returnParameters": {
										"id": 1416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1413,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1447,
												"src": "1400:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1412,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1400:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1415,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1447,
												"src": "1406:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1406:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1399:15:9"
									},
									"scope": 1654,
									"src": "1339:493:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1474,
										"nodeType": "Block",
										"src": "2057:114:9",
										"statements": [
											{
												"id": 1473,
												"nodeType": "UncheckedBlock",
												"src": "2067:98:9",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1461,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1459,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1452,
																"src": "2095:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1460,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2100:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2095:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1466,
														"nodeType": "IfStatement",
														"src": "2091:29:9",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1462,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2111:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1463,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2118:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1464,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2110:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1458,
															"id": 1465,
															"nodeType": "Return",
															"src": "2103:17:9"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1467,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2142:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1470,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1468,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1450,
																		"src": "2148:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 1469,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1452,
																		"src": "2152:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2148:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1471,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2141:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1458,
														"id": 1472,
														"nodeType": "Return",
														"src": "2134:20:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1448,
										"nodeType": "StructuredDocumentation",
										"src": "1838:138:9",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 1475,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1990:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1450,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2005:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "1997:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1449,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1997:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1452,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2016:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "2008:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1451,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2008:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1996:22:9"
									},
									"returnParameters": {
										"id": 1458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1455,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "2042:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1454,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2042:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1457,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "2048:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2048:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2041:15:9"
									},
									"scope": 1654,
									"src": "1981:190:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1502,
										"nodeType": "Block",
										"src": "2406:114:9",
										"statements": [
											{
												"id": 1501,
												"nodeType": "UncheckedBlock",
												"src": "2416:98:9",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1489,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1487,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1480,
																"src": "2444:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1488,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2449:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2444:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1494,
														"nodeType": "IfStatement",
														"src": "2440:29:9",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1490,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2460:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1491,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2467:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1492,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2459:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1486,
															"id": 1493,
															"nodeType": "Return",
															"src": "2452:17:9"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1495,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2491:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1498,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1496,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1478,
																		"src": "2497:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 1497,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1480,
																		"src": "2501:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2497:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1499,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2490:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1486,
														"id": 1500,
														"nodeType": "Return",
														"src": "2483:20:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1476,
										"nodeType": "StructuredDocumentation",
										"src": "2177:148:9",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 1503,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2339:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1478,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2354:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1503,
												"src": "2346:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1477,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2346:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1480,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2365:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1503,
												"src": "2357:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1479,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2357:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2345:22:9"
									},
									"returnParameters": {
										"id": 1486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1483,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1503,
												"src": "2391:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1482,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2391:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1485,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1503,
												"src": "2397:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1484,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2397:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2390:15:9"
									},
									"scope": 1654,
									"src": "2330:190:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1517,
										"nodeType": "Block",
										"src": "2822:29:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1515,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1513,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1506,
														"src": "2839:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 1514,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1508,
														"src": "2843:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2839:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1512,
												"id": 1516,
												"nodeType": "Return",
												"src": "2832:12:9"
											}
										]
									},
									"documentation": {
										"id": 1504,
										"nodeType": "StructuredDocumentation",
										"src": "2526:224:9",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 1518,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "2764:3:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1509,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1506,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2776:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1518,
												"src": "2768:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1505,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1508,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2787:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1518,
												"src": "2779:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1507,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2779:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2767:22:9"
									},
									"returnParameters": {
										"id": 1512,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1511,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1518,
												"src": "2813:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1510,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2813:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2812:9:9"
									},
									"scope": 1654,
									"src": "2755:96:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1532,
										"nodeType": "Block",
										"src": "3189:29:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1530,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1528,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1521,
														"src": "3206:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1529,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1523,
														"src": "3210:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3206:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1527,
												"id": 1531,
												"nodeType": "Return",
												"src": "3199:12:9"
											}
										]
									},
									"documentation": {
										"id": 1519,
										"nodeType": "StructuredDocumentation",
										"src": "2857:260:9",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1533,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "3131:3:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1524,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1521,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3143:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1533,
												"src": "3135:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1520,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3135:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1523,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3154:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1533,
												"src": "3146:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1522,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3146:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3134:22:9"
									},
									"returnParameters": {
										"id": 1527,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1526,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1533,
												"src": "3180:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1525,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3180:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3179:9:9"
									},
									"scope": 1654,
									"src": "3122:96:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1547,
										"nodeType": "Block",
										"src": "3532:29:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1545,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1543,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1536,
														"src": "3549:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 1544,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1538,
														"src": "3553:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3549:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1542,
												"id": 1546,
												"nodeType": "Return",
												"src": "3542:12:9"
											}
										]
									},
									"documentation": {
										"id": 1534,
										"nodeType": "StructuredDocumentation",
										"src": "3224:236:9",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 1548,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nameLocation": "3474:3:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1536,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3486:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1548,
												"src": "3478:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1535,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3478:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1538,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3497:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1548,
												"src": "3489:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1537,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3489:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3477:22:9"
									},
									"returnParameters": {
										"id": 1542,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1541,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1548,
												"src": "3523:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1540,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3523:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3522:9:9"
									},
									"scope": 1654,
									"src": "3465:96:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1562,
										"nodeType": "Block",
										"src": "3917:29:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1558,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1551,
														"src": "3934:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1559,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1553,
														"src": "3938:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3934:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1557,
												"id": 1561,
												"nodeType": "Return",
												"src": "3927:12:9"
											}
										]
									},
									"documentation": {
										"id": 1549,
										"nodeType": "StructuredDocumentation",
										"src": "3567:278:9",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1563,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "3859:3:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1554,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1551,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3871:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1563,
												"src": "3863:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1550,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3863:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1553,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3882:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1563,
												"src": "3874:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1552,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3874:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3862:22:9"
									},
									"returnParameters": {
										"id": 1557,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1556,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1563,
												"src": "3908:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1555,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3908:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3907:9:9"
									},
									"scope": 1654,
									"src": "3850:96:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1577,
										"nodeType": "Block",
										"src": "4466:29:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1575,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1573,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1566,
														"src": "4483:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 1574,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1568,
														"src": "4487:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4483:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1572,
												"id": 1576,
												"nodeType": "Return",
												"src": "4476:12:9"
											}
										]
									},
									"documentation": {
										"id": 1564,
										"nodeType": "StructuredDocumentation",
										"src": "3952:442:9",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1578,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "4408:3:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1569,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1566,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4420:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1578,
												"src": "4412:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1565,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4412:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1568,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4431:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1578,
												"src": "4423:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1567,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4423:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4411:22:9"
									},
									"returnParameters": {
										"id": 1572,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1571,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1578,
												"src": "4457:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1570,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4457:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4456:9:9"
									},
									"scope": 1654,
									"src": "4399:96:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1602,
										"nodeType": "Block",
										"src": "5084:106:9",
										"statements": [
											{
												"id": 1601,
												"nodeType": "UncheckedBlock",
												"src": "5094:90:9",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1593,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1591,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1583,
																		"src": "5126:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 1592,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1581,
																		"src": "5131:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5126:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1594,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1585,
																	"src": "5134:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1590,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5118:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1595,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5118:29:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1596,
														"nodeType": "ExpressionStatement",
														"src": "5118:29:9"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1599,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1597,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1581,
																"src": "5168:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1598,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1583,
																"src": "5172:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5168:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1589,
														"id": 1600,
														"nodeType": "Return",
														"src": "5161:12:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1579,
										"nodeType": "StructuredDocumentation",
										"src": "4501:453:9",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1603,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "4968:3:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1581,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4989:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1603,
												"src": "4981:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1580,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4981:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1583,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5008:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1603,
												"src": "5000:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1582,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1585,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5033:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1603,
												"src": "5019:26:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1584,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5019:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4971:80:9"
									},
									"returnParameters": {
										"id": 1589,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1588,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1603,
												"src": "5075:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1587,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5074:9:9"
									},
									"scope": 1654,
									"src": "4959:231:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1627,
										"nodeType": "Block",
										"src": "5799:105:9",
										"statements": [
											{
												"id": 1626,
												"nodeType": "UncheckedBlock",
												"src": "5809:89:9",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1618,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1616,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1608,
																		"src": "5841:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1617,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5845:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5841:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1619,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1610,
																	"src": "5848:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1615,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5833:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1620,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5833:28:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1621,
														"nodeType": "ExpressionStatement",
														"src": "5833:28:9"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1624,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1622,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1606,
																"src": "5882:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1623,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1608,
																"src": "5886:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5882:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1614,
														"id": 1625,
														"nodeType": "Return",
														"src": "5875:12:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1604,
										"nodeType": "StructuredDocumentation",
										"src": "5196:473:9",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1628,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "5683:3:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1606,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "5704:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "5696:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1605,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5696:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1608,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5723:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "5715:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1607,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5715:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1610,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5748:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "5734:26:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1609,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5734:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5686:80:9"
									},
									"returnParameters": {
										"id": 1614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1613,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "5790:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1612,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5790:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5789:9:9"
									},
									"scope": 1654,
									"src": "5674:230:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1652,
										"nodeType": "Block",
										"src": "6675:105:9",
										"statements": [
											{
												"id": 1651,
												"nodeType": "UncheckedBlock",
												"src": "6685:89:9",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1643,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1641,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1633,
																		"src": "6717:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1642,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6721:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6717:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1644,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1635,
																	"src": "6724:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1640,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6709:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1645,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6709:28:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1646,
														"nodeType": "ExpressionStatement",
														"src": "6709:28:9"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1649,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1647,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1631,
																"src": "6758:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 1648,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1633,
																"src": "6762:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6758:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1639,
														"id": 1650,
														"nodeType": "Return",
														"src": "6751:12:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1629,
										"nodeType": "StructuredDocumentation",
										"src": "5910:635:9",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1653,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "6559:3:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1631,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6580:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1653,
												"src": "6572:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1630,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6572:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1633,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "6599:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1653,
												"src": "6591:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1632,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6591:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1635,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6624:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1653,
												"src": "6610:26:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1634,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6610:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6562:80:9"
									},
									"returnParameters": {
										"id": 1639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1638,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1653,
												"src": "6666:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1637,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6666:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6665:9:9"
									},
									"scope": 1654,
									"src": "6550:230:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1655,
							"src": "482:6300:9",
							"usedErrors": []
						}
					],
					"src": "107:6676:9"
				},
				"id": 9
			},
			"contracts/Arcade.sol": {
				"ast": {
					"absolutePath": "contracts/Arcade.sol",
					"exportedSymbols": {
						"AccessControl": [
							319
						],
						"Arcade": [
							2611
						],
						"Context": [
							1103
						],
						"ERC165": [
							1330
						],
						"ERC20": [
							978
						],
						"IAccessControl": [
							392
						],
						"IERC165": [
							1342
						],
						"IERC20": [
							1056
						],
						"IERC20Metadata": [
							1081
						],
						"SafeMath": [
							1654
						],
						"Strings": [
							1306
						]
					},
					"id": 2612,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1656,
							"literals": [
								"solidity",
								">=",
								"0.7",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "37:32:10"
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.6.0/access/AccessControl.sol",
							"file": "@openzeppelin/contracts@4.6.0/access/AccessControl.sol",
							"id": 1657,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2612,
							"sourceUnit": 320,
							"src": "71:64:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts@4.6.0/token/ERC20/ERC20.sol",
							"id": 1658,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2612,
							"sourceUnit": 979,
							"src": "136:61:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@4.6.0/utils/math/SafeMath.sol",
							"file": "@openzeppelin/contracts@4.6.0/utils/math/SafeMath.sol",
							"id": 1659,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2612,
							"sourceUnit": 1655,
							"src": "198:63:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1660,
										"name": "AccessControl",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 319,
										"src": "282:13:10"
									},
									"id": 1661,
									"nodeType": "InheritanceSpecifier",
									"src": "282:13:10"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2611,
							"linearizedBaseContracts": [
								2611,
								319,
								1330,
								1342,
								392,
								1103
							],
							"name": "Arcade",
							"nameLocation": "272:6:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1664,
									"libraryName": {
										"id": 1662,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1654,
										"src": "308:8:10"
									},
									"nodeType": "UsingForDirective",
									"src": "302:27:10",
									"typeName": {
										"id": 1663,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "321:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"anonymous": false,
									"id": 1668,
									"name": "CloseGame",
									"nameLocation": "345:9:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1666,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "363:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "355:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1665,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "355:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "354:12:10"
									},
									"src": "339:28:10"
								},
								{
									"anonymous": false,
									"id": 1672,
									"name": "CreateGame",
									"nameLocation": "378:10:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1671,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1670,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "397:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1672,
												"src": "389:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1669,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "389:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "388:12:10"
									},
									"src": "372:29:10"
								},
								{
									"anonymous": false,
									"id": 1676,
									"name": "DeleteGame",
									"nameLocation": "412:10:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1675,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1674,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "431:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1676,
												"src": "423:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1673,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "423:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "422:12:10"
									},
									"src": "406:29:10"
								},
								{
									"anonymous": false,
									"id": 1680,
									"name": "Fee",
									"nameLocation": "446:3:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1679,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1678,
												"indexed": false,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "458:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1680,
												"src": "450:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1677,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "450:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "449:13:10"
									},
									"src": "440:23:10"
								},
								{
									"anonymous": false,
									"id": 1684,
									"name": "OpenGame",
									"nameLocation": "474:8:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1683,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1682,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "491:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1684,
												"src": "483:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1681,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "483:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "482:12:10"
									},
									"src": "468:27:10"
								},
								{
									"anonymous": false,
									"id": 1688,
									"name": "Payout",
									"nameLocation": "506:6:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1686,
												"indexed": false,
												"mutability": "mutable",
												"name": "payout",
												"nameLocation": "521:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1688,
												"src": "513:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1685,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "513:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "512:16:10"
									},
									"src": "500:29:10"
								},
								{
									"anonymous": false,
									"id": 1694,
									"name": "PlacePlayer",
									"nameLocation": "540:11:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1693,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1690,
												"indexed": false,
												"mutability": "mutable",
												"name": "player",
												"nameLocation": "560:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1694,
												"src": "552:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1689,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "552:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1692,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "576:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1694,
												"src": "568:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1691,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "568:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "551:28:10"
									},
									"src": "534:46:10"
								},
								{
									"anonymous": false,
									"id": 1702,
									"name": "Refund",
									"nameLocation": "591:6:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1701,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1696,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "606:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1702,
												"src": "598:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1695,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "598:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1698,
												"indexed": false,
												"mutability": "mutable",
												"name": "player",
												"nameLocation": "618:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1702,
												"src": "610:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1697,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "610:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1700,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "634:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1702,
												"src": "626:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1699,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "626:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "597:44:10"
									},
									"src": "585:57:10"
								},
								{
									"anonymous": false,
									"id": 1708,
									"name": "Register",
									"nameLocation": "653:8:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1704,
												"indexed": true,
												"mutability": "mutable",
												"name": "_player",
												"nameLocation": "678:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "662:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1703,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "662:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1706,
												"indexed": false,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "695:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1708,
												"src": "687:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1705,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "687:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "661:37:10"
									},
									"src": "647:52:10"
								},
								{
									"anonymous": false,
									"id": 1712,
									"name": "RemovePlayer",
									"nameLocation": "710:12:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1711,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1710,
												"indexed": false,
												"mutability": "mutable",
												"name": "player",
												"nameLocation": "731:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1712,
												"src": "723:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1709,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "723:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "722:16:10"
									},
									"src": "704:35:10"
								},
								{
									"constant": true,
									"functionSelector": "f0a3a97c",
									"id": 1717,
									"mutability": "constant",
									"name": "TREASURER_ROLE",
									"nameLocation": "769:14:10",
									"nodeType": "VariableDeclaration",
									"scope": 2611,
									"src": "745:68:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1713,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "745:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5452454153555245525f524f4c45",
												"id": 1715,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "796:16:10",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_3496e2e73c4d42b75d702e60d9e48102720b8691234415963a5a857b86425d07",
													"typeString": "literal_string \"TREASURER_ROLE\""
												},
												"value": "TREASURER_ROLE"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_3496e2e73c4d42b75d702e60d9e48102720b8691234415963a5a857b86425d07",
													"typeString": "literal_string \"TREASURER_ROLE\""
												}
											],
											"id": 1714,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "786:9:10",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1716,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "786:27:10",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "Arcade.GameInfo",
									"id": 1744,
									"members": [
										{
											"constant": false,
											"id": 1719,
											"mutability": "mutable",
											"name": "exchange",
											"nameLocation": "854:8:10",
											"nodeType": "VariableDeclaration",
											"scope": 1744,
											"src": "846:16:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1718,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "846:4:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1721,
											"mutability": "mutable",
											"name": "player_count",
											"nameLocation": "880:12:10",
											"nodeType": "VariableDeclaration",
											"scope": 1744,
											"src": "872:20:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1720,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "872:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1723,
											"mutability": "mutable",
											"name": "player_limit",
											"nameLocation": "910:12:10",
											"nodeType": "VariableDeclaration",
											"scope": 1744,
											"src": "902:20:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1722,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "902:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1725,
											"mutability": "mutable",
											"name": "registration_fee",
											"nameLocation": "940:16:10",
											"nodeType": "VariableDeclaration",
											"scope": 1744,
											"src": "932:24:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1724,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "932:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1727,
											"mutability": "mutable",
											"name": "status",
											"nameLocation": "974:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 1744,
											"src": "966:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1726,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "966:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1729,
											"mutability": "mutable",
											"name": "arcade_token",
											"nameLocation": "998:12:10",
											"nodeType": "VariableDeclaration",
											"scope": 1744,
											"src": "990:20:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1728,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "990:7:10",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1731,
											"mutability": "mutable",
											"name": "total_fee",
											"nameLocation": "1028:9:10",
											"nodeType": "VariableDeclaration",
											"scope": 1744,
											"src": "1020:17:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1730,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1020:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1735,
											"mutability": "mutable",
											"name": "fee",
											"nameLocation": "1075:3:10",
											"nodeType": "VariableDeclaration",
											"scope": 1744,
											"src": "1047:31:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"typeName": {
												"id": 1734,
												"keyType": {
													"id": 1732,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1055:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1047:27:10",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
													"typeString": "mapping(address => uint256)"
												},
												"valueType": {
													"id": 1733,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1066:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1739,
											"mutability": "mutable",
											"name": "paid",
											"nameLocation": "1116:4:10",
											"nodeType": "VariableDeclaration",
											"scope": 1744,
											"src": "1088:32:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"typeName": {
												"id": 1738,
												"keyType": {
													"id": 1736,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1096:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1088:27:10",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
													"typeString": "mapping(address => uint256)"
												},
												"valueType": {
													"id": 1737,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1107:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1743,
											"mutability": "mutable",
											"name": "seats",
											"nameLocation": "1158:5:10",
											"nodeType": "VariableDeclaration",
											"scope": 1744,
											"src": "1130:33:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"typeName": {
												"id": 1742,
												"keyType": {
													"id": 1740,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1138:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1130:27:10",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
													"typeString": "mapping(address => uint256)"
												},
												"valueType": {
													"id": 1741,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1149:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "GameInfo",
									"nameLocation": "827:8:10",
									"nodeType": "StructDefinition",
									"scope": 2611,
									"src": "820:350:10",
									"visibility": "public"
								},
								{
									"canonicalName": "Arcade.ArcadeToken",
									"id": 1752,
									"members": [
										{
											"constant": false,
											"id": 1747,
											"mutability": "mutable",
											"name": "native_token",
											"nameLocation": "1213:12:10",
											"nodeType": "VariableDeclaration",
											"scope": 1752,
											"src": "1205:20:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IERC20_$1056",
												"typeString": "contract IERC20"
											},
											"typeName": {
												"id": 1746,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1745,
													"name": "IERC20",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1056,
													"src": "1205:6:10"
												},
												"referencedDeclaration": 1056,
												"src": "1205:6:10",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$1056",
													"typeString": "contract IERC20"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1749,
											"mutability": "mutable",
											"name": "active",
											"nameLocation": "1243:6:10",
											"nodeType": "VariableDeclaration",
											"scope": 1752,
											"src": "1235:14:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1748,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1235:4:10",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1751,
											"mutability": "mutable",
											"name": "redemption_rate",
											"nameLocation": "1267:15:10",
											"nodeType": "VariableDeclaration",
											"scope": 1752,
											"src": "1259:23:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1750,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1259:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ArcadeToken",
									"nameLocation": "1183:11:10",
									"nodeType": "StructDefinition",
									"scope": 2611,
									"src": "1176:113:10",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b22c376d",
									"id": 1757,
									"mutability": "mutable",
									"name": "acceptedArcadeTokens",
									"nameLocation": "1334:20:10",
									"nodeType": "VariableDeclaration",
									"scope": 2611,
									"src": "1295:59:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_ArcadeToken_$1752_storage_$",
										"typeString": "mapping(address => struct Arcade.ArcadeToken)"
									},
									"typeName": {
										"id": 1756,
										"keyType": {
											"id": 1753,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1303:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1295:31:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_ArcadeToken_$1752_storage_$",
											"typeString": "mapping(address => struct Arcade.ArcadeToken)"
										},
										"valueType": {
											"id": 1755,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1754,
												"name": "ArcadeToken",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1752,
												"src": "1314:11:10"
											},
											"referencedDeclaration": 1752,
											"src": "1314:11:10",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_ArcadeToken_$1752_storage_ptr",
												"typeString": "struct Arcade.ArcadeToken"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "ccaf237f",
									"id": 1762,
									"mutability": "mutable",
									"name": "gameData",
									"nameLocation": "1397:8:10",
									"nodeType": "VariableDeclaration",
									"scope": 2611,
									"src": "1361:44:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
										"typeString": "mapping(uint256 => struct Arcade.GameInfo)"
									},
									"typeName": {
										"id": 1761,
										"keyType": {
											"id": 1758,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1369:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1361:28:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
											"typeString": "mapping(uint256 => struct Arcade.GameInfo)"
										},
										"valueType": {
											"id": 1760,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1759,
												"name": "GameInfo",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1744,
												"src": "1380:8:10"
											},
											"referencedDeclaration": 1744,
											"src": "1380:8:10",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
												"typeString": "struct Arcade.GameInfo"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "313ce567",
									"id": 1765,
									"mutability": "mutable",
									"name": "decimals",
									"nameLocation": "1427:8:10",
									"nodeType": "VariableDeclaration",
									"scope": 2611,
									"src": "1412:28:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1763,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1412:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3138",
										"id": 1764,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1438:2:10",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_18_by_1",
											"typeString": "int_const 18"
										},
										"value": "18"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "c46ed45a",
									"id": 1767,
									"mutability": "mutable",
									"name": "fee_percentage",
									"nameLocation": "1462:14:10",
									"nodeType": "VariableDeclaration",
									"scope": 2611,
									"src": "1447:29:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1766,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1447:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1776,
									"mutability": "mutable",
									"name": "base",
									"nameLocation": "1499:4:10",
									"nodeType": "VariableDeclaration",
									"scope": 2611,
									"src": "1483:46:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1768,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1483:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"id": 1775,
										"isConstant": false,
										"isLValue": false,
										"isPure": false,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "3130",
											"id": 1769,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1506:2:10",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_10_by_1",
												"typeString": "int_const 10"
											},
											"value": "10"
										},
										"nodeType": "BinaryOperation",
										"operator": "**",
										"rightExpression": {
											"components": [
												{
													"arguments": [
														{
															"id": 1772,
															"name": "decimals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1765,
															"src": "1519:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1771,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1511:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint256_$",
															"typeString": "type(uint256)"
														},
														"typeName": {
															"id": 1770,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1511:7:10",
															"typeDescriptions": {}
														}
													},
													"id": 1773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1511:17:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 1774,
											"isConstant": false,
											"isInlineArray": false,
											"isLValue": false,
											"isPure": false,
											"lValueRequested": false,
											"nodeType": "TupleExpression",
											"src": "1510:19:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"src": "1506:23:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "75ca7603",
									"id": 1778,
									"mutability": "mutable",
									"name": "market_maker",
									"nameLocation": "1551:12:10",
									"nodeType": "VariableDeclaration",
									"scope": 2611,
									"src": "1536:27:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1777,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1536:7:10",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 1780,
									"mutability": "mutable",
									"name": "owner",
									"nameLocation": "1585:5:10",
									"nodeType": "VariableDeclaration",
									"scope": 2611,
									"src": "1570:20:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1779,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1570:7:10",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1797,
										"nodeType": "Block",
										"src": "1611:105:10",
										"statements": [
											{
												"expression": {
													"id": 1786,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1783,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1780,
														"src": "1621:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1784,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1093,
															"src": "1629:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 1785,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1629:12:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1621:20:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1787,
												"nodeType": "ExpressionStatement",
												"src": "1621:20:10"
											},
											{
												"expression": {
													"id": 1790,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1788,
														"name": "fee_percentage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1767,
														"src": "1651:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31653137",
														"id": 1789,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1668:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100000000000000000_by_1",
															"typeString": "int_const 100000000000000000"
														},
														"value": "1e17"
													},
													"src": "1651:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1791,
												"nodeType": "ExpressionStatement",
												"src": "1651:21:10"
											},
											{
												"expression": {
													"id": 1795,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1792,
														"name": "market_maker",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1778,
														"src": "1682:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1793,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1093,
															"src": "1697:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 1794,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1697:12:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1682:27:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1796,
												"nodeType": "ExpressionStatement",
												"src": "1682:27:10"
											}
										]
									},
									"id": 1798,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1781,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1608:2:10"
									},
									"returnParameters": {
										"id": 1782,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1611:0:10"
									},
									"scope": 2611,
									"src": "1597:119:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1811,
										"nodeType": "Block",
										"src": "1858:66:10",
										"statements": [
											{
												"expression": {
													"expression": {
														"baseExpression": {
															"id": 1806,
															"name": "acceptedArcadeTokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1757,
															"src": "1875:20:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_ArcadeToken_$1752_storage_$",
																"typeString": "mapping(address => struct Arcade.ArcadeToken storage ref)"
															}
														},
														"id": 1808,
														"indexExpression": {
															"id": 1807,
															"name": "token_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1801,
															"src": "1896:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1875:35:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ArcadeToken_$1752_storage",
															"typeString": "struct Arcade.ArcadeToken storage ref"
														}
													},
													"id": 1809,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "active",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1749,
													"src": "1875:42:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1805,
												"id": 1810,
												"nodeType": "Return",
												"src": "1868:49:10"
											}
										]
									},
									"documentation": {
										"id": 1799,
										"nodeType": "StructuredDocumentation",
										"src": "1722:61:10",
										"text": " @dev Returns {active} for `token_address`."
									},
									"functionSelector": "e6f091f9",
									"id": 1812,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isAccepted",
									"nameLocation": "1797:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1802,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1801,
												"mutability": "mutable",
												"name": "token_address",
												"nameLocation": "1816:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1812,
												"src": "1808:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1800,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1808:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1807:23:10"
									},
									"returnParameters": {
										"id": 1805,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1804,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1812,
												"src": "1852:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1803,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1852:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1851:6:10"
									},
									"scope": 2611,
									"src": "1788:136:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1865,
										"nodeType": "Block",
										"src": "2309:446:10",
										"statements": [
											{
												"expression": {
													"id": 1830,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1825,
																"name": "acceptedArcadeTokens",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1757,
																"src": "2319:20:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_ArcadeToken_$1752_storage_$",
																	"typeString": "mapping(address => struct Arcade.ArcadeToken storage ref)"
																}
															},
															"id": 1827,
															"indexExpression": {
																"id": 1826,
																"name": "token_address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1815,
																"src": "2340:13:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2319:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ArcadeToken_$1752_storage",
																"typeString": "struct Arcade.ArcadeToken storage ref"
															}
														},
														"id": 1828,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "redemption_rate",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1751,
														"src": "2319:51:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1829,
														"name": "redemption_rate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1817,
														"src": "2373:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2319:69:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1831,
												"nodeType": "ExpressionStatement",
												"src": "2319:69:10"
											},
											{
												"expression": {
													"id": 1837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1832,
																"name": "acceptedArcadeTokens",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1757,
																"src": "2398:20:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_ArcadeToken_$1752_storage_$",
																	"typeString": "mapping(address => struct Arcade.ArcadeToken storage ref)"
																}
															},
															"id": 1834,
															"indexExpression": {
																"id": 1833,
																"name": "token_address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1815,
																"src": "2419:13:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2398:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ArcadeToken_$1752_storage",
																"typeString": "struct Arcade.ArcadeToken storage ref"
															}
														},
														"id": 1835,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "active",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1749,
														"src": "2398:42:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1836,
														"name": "_active",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1819,
														"src": "2443:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2398:52:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1838,
												"nodeType": "ExpressionStatement",
												"src": "2398:52:10"
											},
											{
												"assignments": [
													1840
												],
												"declarations": [
													{
														"constant": false,
														"id": 1840,
														"mutability": "mutable",
														"name": "tokenAddress",
														"nameLocation": "2469:12:10",
														"nodeType": "VariableDeclaration",
														"scope": 1865,
														"src": "2461:20:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1839,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2461:7:10",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1845,
												"initialValue": {
													"arguments": [
														{
															"id": 1843,
															"name": "token_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1815,
															"src": "2492:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1842,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2484:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_payable_$",
															"typeString": "type(address payable)"
														},
														"typeName": {
															"id": 1841,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2484:8:10",
															"stateMutability": "payable",
															"typeDescriptions": {}
														}
													},
													"id": 1844,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2484:22:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2461:45:10"
											},
											{
												"expression": {
													"id": 1853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1846,
																"name": "acceptedArcadeTokens",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1757,
																"src": "2517:20:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_ArcadeToken_$1752_storage_$",
																	"typeString": "mapping(address => struct Arcade.ArcadeToken storage ref)"
																}
															},
															"id": 1848,
															"indexExpression": {
																"id": 1847,
																"name": "token_address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1815,
																"src": "2538:13:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2517:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ArcadeToken_$1752_storage",
																"typeString": "struct Arcade.ArcadeToken storage ref"
															}
														},
														"id": 1849,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "native_token",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1747,
														"src": "2517:48:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$1056",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1851,
																"name": "tokenAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1840,
																"src": "2575:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1850,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1056,
															"src": "2568:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$1056_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 1852,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2568:20:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$1056",
															"typeString": "contract IERC20"
														}
													},
													"src": "2517:71:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$1056",
														"typeString": "contract IERC20"
													}
												},
												"id": 1854,
												"nodeType": "ExpressionStatement",
												"src": "2517:71:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1860,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1093,
																"src": "2655:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1861,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2655:12:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "313135373932303839323337333136313935343233353730393835303038363837393037383533323639393834363635363430353634303339343537353834303037393133313239363339393335",
															"id": 1862,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2669:78:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564039457584007913129639935_by_1",
																"typeString": "int_const 1157...(70 digits omitted)...9935"
															},
															"value": "115792089237316195423570985008687907853269984665640564039457584007913129639935"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564039457584007913129639935_by_1",
																"typeString": "int_const 1157...(70 digits omitted)...9935"
															}
														],
														"expression": {
															"expression": {
																"baseExpression": {
																	"id": 1855,
																	"name": "acceptedArcadeTokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1757,
																	"src": "2598:20:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_ArcadeToken_$1752_storage_$",
																		"typeString": "mapping(address => struct Arcade.ArcadeToken storage ref)"
																	}
																},
																"id": 1857,
																"indexExpression": {
																	"id": 1856,
																	"name": "token_address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1815,
																	"src": "2619:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "2598:35:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ArcadeToken_$1752_storage",
																	"typeString": "struct Arcade.ArcadeToken storage ref"
																}
															},
															"id": 1858,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "native_token",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1747,
															"src": "2598:48:10",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$1056",
																"typeString": "contract IERC20"
															}
														},
														"id": 1859,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "approve",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1043,
														"src": "2598:56:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 1863,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2598:150:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1864,
												"nodeType": "ExpressionStatement",
												"src": "2598:150:10"
											}
										]
									},
									"documentation": {
										"id": 1813,
										"nodeType": "StructuredDocumentation",
										"src": "1930:256:10",
										"text": " @dev Adds token to {acceptedArcadeTokens} Require `token_address` for proxy balance exchange.  \n `redemption_rate` is set and determines the rate that proxy balance is exchanged.  \n Set `active` to reflect status of exchange."
									},
									"functionSelector": "06602a48",
									"id": 1866,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1822,
													"name": "TREASURER_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1717,
													"src": "2293:14:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 1823,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1821,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "2284:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "2284:24:10"
										}
									],
									"name": "addArcadeToken",
									"nameLocation": "2200:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1820,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1815,
												"mutability": "mutable",
												"name": "token_address",
												"nameLocation": "2223:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1866,
												"src": "2215:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1814,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2215:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1817,
												"mutability": "mutable",
												"name": "redemption_rate",
												"nameLocation": "2246:15:10",
												"nodeType": "VariableDeclaration",
												"scope": 1866,
												"src": "2238:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1816,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2238:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1819,
												"mutability": "mutable",
												"name": "_active",
												"nameLocation": "2268:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1866,
												"src": "2263:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1818,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2263:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2214:62:10"
									},
									"returnParameters": {
										"id": 1824,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2309:0:10"
									},
									"scope": 2611,
									"src": "2191:564:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1882,
										"nodeType": "Block",
										"src": "2913:67:10",
										"statements": [
											{
												"expression": {
													"id": 1880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1875,
																"name": "acceptedArcadeTokens",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1757,
																"src": "2923:20:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_ArcadeToken_$1752_storage_$",
																	"typeString": "mapping(address => struct Arcade.ArcadeToken storage ref)"
																}
															},
															"id": 1877,
															"indexExpression": {
																"id": 1876,
																"name": "token_address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1869,
																"src": "2944:13:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2923:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ArcadeToken_$1752_storage",
																"typeString": "struct Arcade.ArcadeToken storage ref"
															}
														},
														"id": 1878,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "active",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1749,
														"src": "2923:42:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1879,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2968:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2923:50:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1881,
												"nodeType": "ExpressionStatement",
												"src": "2923:50:10"
											}
										]
									},
									"documentation": {
										"id": 1867,
										"nodeType": "StructuredDocumentation",
										"src": "2761:65:10",
										"text": " @dev Disable token for proxy balance exchange."
									},
									"functionSelector": "3e16518f",
									"id": 1883,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1872,
													"name": "TREASURER_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1717,
													"src": "2897:14:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 1873,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1871,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "2888:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "2888:24:10"
										}
									],
									"name": "removeArcadeToken",
									"nameLocation": "2840:17:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1870,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1869,
												"mutability": "mutable",
												"name": "token_address",
												"nameLocation": "2866:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1883,
												"src": "2858:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1868,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2858:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2857:23:10"
									},
									"returnParameters": {
										"id": 1874,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2913:0:10"
									},
									"scope": 2611,
									"src": "2831:149:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1903,
										"nodeType": "Block",
										"src": "3145:121:10",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1893,
																	"name": "acceptedArcadeTokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1757,
																	"src": "3163:20:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_ArcadeToken_$1752_storage_$",
																		"typeString": "mapping(address => struct Arcade.ArcadeToken storage ref)"
																	}
																},
																"id": 1895,
																"indexExpression": {
																	"id": 1894,
																	"name": "token_address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1886,
																	"src": "3184:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3163:35:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ArcadeToken_$1752_storage",
																	"typeString": "struct Arcade.ArcadeToken storage ref"
																}
															},
															"id": 1896,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "active",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1749,
															"src": "3163:42:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1897,
																	"name": "acceptedArcadeTokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1757,
																	"src": "3207:20:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_ArcadeToken_$1752_storage_$",
																		"typeString": "mapping(address => struct Arcade.ArcadeToken storage ref)"
																	}
																},
																"id": 1899,
																"indexExpression": {
																	"id": 1898,
																	"name": "token_address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1886,
																	"src": "3228:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3207:35:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ArcadeToken_$1752_storage",
																	"typeString": "struct Arcade.ArcadeToken storage ref"
																}
															},
															"id": 1900,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "redemption_rate",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1751,
															"src": "3207:51:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1901,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "3162:97:10",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 1892,
												"id": 1902,
												"nodeType": "Return",
												"src": "3155:104:10"
											}
										]
									},
									"documentation": {
										"id": 1884,
										"nodeType": "StructuredDocumentation",
										"src": "2986:72:10",
										"text": " @dev Returns {Stablecoin} struct for `token_address`."
									},
									"functionSelector": "4575624b",
									"id": 1904,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStablecoin",
									"nameLocation": "3072:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1887,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1886,
												"mutability": "mutable",
												"name": "token_address",
												"nameLocation": "3094:13:10",
												"nodeType": "VariableDeclaration",
												"scope": 1904,
												"src": "3086:21:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1885,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3086:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3085:23:10"
									},
									"returnParameters": {
										"id": 1892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1889,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1904,
												"src": "3130:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1888,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3130:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1891,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1904,
												"src": "3136:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1890,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3136:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3129:15:10"
									},
									"scope": 2611,
									"src": "3063:203:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1924,
										"nodeType": "Block",
										"src": "3410:79:10",
										"statements": [
											{
												"expression": {
													"id": 1918,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1913,
																"name": "gameData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "3420:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																	"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																}
															},
															"id": 1915,
															"indexExpression": {
																"id": 1914,
																"name": "game_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1907,
																"src": "3429:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3420:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																"typeString": "struct Arcade.GameInfo storage ref"
															}
														},
														"id": 1916,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "status",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1727,
														"src": "3420:24:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1917,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3447:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3420:28:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1919,
												"nodeType": "ExpressionStatement",
												"src": "3420:28:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1921,
															"name": "game_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1907,
															"src": "3474:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1920,
														"name": "CloseGame",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1668,
														"src": "3464:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1922,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3464:18:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1923,
												"nodeType": "EmitStatement",
												"src": "3459:23:10"
											}
										]
									},
									"documentation": {
										"id": 1905,
										"nodeType": "StructuredDocumentation",
										"src": "3272:61:10",
										"text": " @dev Returns {active} for `token_address`."
									},
									"functionSelector": "2d6ef310",
									"id": 1925,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1910,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "3390:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 1911,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1909,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "3381:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "3381:28:10"
										}
									],
									"name": "closeGame",
									"nameLocation": "3347:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1908,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1907,
												"mutability": "mutable",
												"name": "game_id",
												"nameLocation": "3365:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1925,
												"src": "3357:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1906,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3357:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3356:17:10"
									},
									"returnParameters": {
										"id": 1912,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3410:0:10"
									},
									"scope": 2611,
									"src": "3338:151:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1995,
										"nodeType": "Block",
										"src": "3719:385:10",
										"statements": [
											{
												"expression": {
													"id": 1947,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1942,
																"name": "gameData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "3729:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																	"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																}
															},
															"id": 1944,
															"indexExpression": {
																"id": 1943,
																"name": "game_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "3738:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3729:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																"typeString": "struct Arcade.GameInfo storage ref"
															}
														},
														"id": 1945,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "status",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1727,
														"src": "3729:24:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1946,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3756:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3729:28:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1948,
												"nodeType": "ExpressionStatement",
												"src": "3729:28:10"
											},
											{
												"expression": {
													"id": 1954,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1949,
																"name": "gameData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "3767:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																	"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																}
															},
															"id": 1951,
															"indexExpression": {
																"id": 1950,
																"name": "game_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "3776:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3767:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																"typeString": "struct Arcade.GameInfo storage ref"
															}
														},
														"id": 1952,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "total_fee",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1731,
														"src": "3767:27:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1953,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3797:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3767:31:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1955,
												"nodeType": "ExpressionStatement",
												"src": "3767:31:10"
											},
											{
												"expression": {
													"id": 1961,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1956,
																"name": "gameData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "3808:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																	"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																}
															},
															"id": 1958,
															"indexExpression": {
																"id": 1957,
																"name": "game_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "3817:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3808:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																"typeString": "struct Arcade.GameInfo storage ref"
															}
														},
														"id": 1959,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "registration_fee",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1725,
														"src": "3808:34:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1960,
														"name": "registration_fee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1930,
														"src": "3845:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3808:53:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1962,
												"nodeType": "ExpressionStatement",
												"src": "3808:53:10"
											},
											{
												"expression": {
													"id": 1968,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1963,
																"name": "gameData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "3871:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																	"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																}
															},
															"id": 1965,
															"indexExpression": {
																"id": 1964,
																"name": "game_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "3880:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3871:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																"typeString": "struct Arcade.GameInfo storage ref"
															}
														},
														"id": 1966,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "arcade_token",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1729,
														"src": "3871:30:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1967,
														"name": "arcade_token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1932,
														"src": "3904:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3871:45:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1969,
												"nodeType": "ExpressionStatement",
												"src": "3871:45:10"
											},
											{
												"expression": {
													"id": 1975,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1970,
																"name": "gameData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "3926:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																	"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																}
															},
															"id": 1972,
															"indexExpression": {
																"id": 1971,
																"name": "game_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "3935:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3926:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																"typeString": "struct Arcade.GameInfo storage ref"
															}
														},
														"id": 1973,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "player_count",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1721,
														"src": "3926:30:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1974,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3959:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3926:34:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1976,
												"nodeType": "ExpressionStatement",
												"src": "3926:34:10"
											},
											{
												"expression": {
													"id": 1982,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1977,
																"name": "gameData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "3970:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																	"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																}
															},
															"id": 1979,
															"indexExpression": {
																"id": 1978,
																"name": "game_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "3979:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3970:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																"typeString": "struct Arcade.GameInfo storage ref"
															}
														},
														"id": 1980,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "player_limit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1723,
														"src": "3970:30:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1981,
														"name": "player_limit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1934,
														"src": "4003:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3970:45:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1983,
												"nodeType": "ExpressionStatement",
												"src": "3970:45:10"
											},
											{
												"expression": {
													"id": 1989,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1984,
																"name": "gameData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "4025:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																	"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																}
															},
															"id": 1986,
															"indexExpression": {
																"id": 1985,
																"name": "game_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "4034:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4025:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																"typeString": "struct Arcade.GameInfo storage ref"
															}
														},
														"id": 1987,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "exchange",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1719,
														"src": "4025:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1988,
														"name": "exchange",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1936,
														"src": "4054:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4025:37:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1990,
												"nodeType": "ExpressionStatement",
												"src": "4025:37:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1992,
															"name": "game_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1928,
															"src": "4089:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1991,
														"name": "CreateGame",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1672,
														"src": "4078:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1993,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4078:19:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1994,
												"nodeType": "EmitStatement",
												"src": "4073:24:10"
											}
										]
									},
									"documentation": {
										"id": 1926,
										"nodeType": "StructuredDocumentation",
										"src": "3495:61:10",
										"text": " @dev Returns {active} for `token_address`."
									},
									"functionSelector": "f336ee3c",
									"id": 1996,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1939,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "3699:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 1940,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1938,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "3690:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "3690:28:10"
										}
									],
									"name": "createGame",
									"nameLocation": "3570:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1928,
												"mutability": "mutable",
												"name": "game_id",
												"nameLocation": "3589:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1996,
												"src": "3581:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1927,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3581:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1930,
												"mutability": "mutable",
												"name": "registration_fee",
												"nameLocation": "3606:16:10",
												"nodeType": "VariableDeclaration",
												"scope": 1996,
												"src": "3598:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1929,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3598:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1932,
												"mutability": "mutable",
												"name": "arcade_token",
												"nameLocation": "3632:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 1996,
												"src": "3624:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1931,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3624:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1934,
												"mutability": "mutable",
												"name": "player_limit",
												"nameLocation": "3654:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 1996,
												"src": "3646:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1933,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3646:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1936,
												"mutability": "mutable",
												"name": "exchange",
												"nameLocation": "3673:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1996,
												"src": "3668:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1935,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3668:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3580:102:10"
									},
									"returnParameters": {
										"id": 1941,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3719:0:10"
									},
									"scope": 2611,
									"src": "3561:543:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2014,
										"nodeType": "Block",
										"src": "4249:76:10",
										"statements": [
											{
												"expression": {
													"id": 2008,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "4259:24:10",
													"subExpression": {
														"baseExpression": {
															"id": 2005,
															"name": "gameData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1762,
															"src": "4266:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
															}
														},
														"id": 2007,
														"indexExpression": {
															"id": 2006,
															"name": "game_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1999,
															"src": "4275:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4266:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
															"typeString": "struct Arcade.GameInfo storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2009,
												"nodeType": "ExpressionStatement",
												"src": "4259:24:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2011,
															"name": "game_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1999,
															"src": "4310:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2010,
														"name": "DeleteGame",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1676,
														"src": "4299:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 2012,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4299:19:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2013,
												"nodeType": "EmitStatement",
												"src": "4294:24:10"
											}
										]
									},
									"documentation": {
										"id": 1997,
										"nodeType": "StructuredDocumentation",
										"src": "4110:61:10",
										"text": " @dev Returns {active} for `token_address`."
									},
									"functionSelector": "248a55a1",
									"id": 2015,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 2002,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "4229:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 2003,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2001,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "4220:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "4220:28:10"
										}
									],
									"name": "deleteGame",
									"nameLocation": "4185:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2000,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1999,
												"mutability": "mutable",
												"name": "game_id",
												"nameLocation": "4204:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2015,
												"src": "4196:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1998,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4196:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4195:17:10"
									},
									"returnParameters": {
										"id": 2004,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4249:0:10"
									},
									"scope": 2611,
									"src": "4176:149:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2035,
										"nodeType": "Block",
										"src": "4468:78:10",
										"statements": [
											{
												"expression": {
													"id": 2029,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 2024,
																"name": "gameData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "4478:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																	"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																}
															},
															"id": 2026,
															"indexExpression": {
																"id": 2025,
																"name": "game_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2018,
																"src": "4487:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4478:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																"typeString": "struct Arcade.GameInfo storage ref"
															}
														},
														"id": 2027,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "status",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1727,
														"src": "4478:24:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 2028,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4505:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4478:28:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2030,
												"nodeType": "ExpressionStatement",
												"src": "4478:28:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2032,
															"name": "game_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2018,
															"src": "4531:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2031,
														"name": "OpenGame",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1684,
														"src": "4522:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 2033,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4522:17:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2034,
												"nodeType": "EmitStatement",
												"src": "4517:22:10"
											}
										]
									},
									"documentation": {
										"id": 2016,
										"nodeType": "StructuredDocumentation",
										"src": "4331:61:10",
										"text": " @dev Returns {active} for `token_address`."
									},
									"functionSelector": "00f5544f",
									"id": 2036,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 2021,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "4448:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 2022,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2020,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "4439:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "4439:28:10"
										}
									],
									"name": "openGame",
									"nameLocation": "4406:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2018,
												"mutability": "mutable",
												"name": "game_id",
												"nameLocation": "4423:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2036,
												"src": "4415:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2017,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4415:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4414:17:10"
									},
									"returnParameters": {
										"id": 2023,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4468:0:10"
									},
									"scope": 2611,
									"src": "4397:149:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2073,
										"nodeType": "Block",
										"src": "4708:191:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2055,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 2048,
																			"name": "gameData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1762,
																			"src": "4726:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																				"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																			}
																		},
																		"id": 2050,
																		"indexExpression": {
																			"id": 2049,
																			"name": "game_id",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2039,
																			"src": "4735:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "4726:17:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																			"typeString": "struct Arcade.GameInfo storage ref"
																		}
																	},
																	"id": 2051,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "seats",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1743,
																	"src": "4726:23:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 2053,
																"indexExpression": {
																	"id": 2052,
																	"name": "player",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2041,
																	"src": "4750:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4726:31:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "31",
																"id": 2054,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4761:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "4726:36:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54726f706879204b696e67204172636164653a20416c7265616479207365617465642e",
															"id": 2056,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4764:37:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8c3de74f867a9f0113ab9f6165670a02e14fcdbe846e7e2cd68321bd2a24213a",
																"typeString": "literal_string \"Trophy King Arcade: Already seated.\""
															},
															"value": "Trophy King Arcade: Already seated."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8c3de74f867a9f0113ab9f6165670a02e14fcdbe846e7e2cd68321bd2a24213a",
																"typeString": "literal_string \"Trophy King Arcade: Already seated.\""
															}
														],
														"id": 2047,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4718:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2057,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4718:84:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2058,
												"nodeType": "ExpressionStatement",
												"src": "4718:84:10"
											},
											{
												"expression": {
													"id": 2066,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 2059,
																	"name": "gameData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1762,
																	"src": "4813:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																		"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																	}
																},
																"id": 2061,
																"indexExpression": {
																	"id": 2060,
																	"name": "game_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2039,
																	"src": "4822:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4813:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																	"typeString": "struct Arcade.GameInfo storage ref"
																}
															},
															"id": 2062,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "seats",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1743,
															"src": "4813:23:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 2064,
														"indexExpression": {
															"id": 2063,
															"name": "player",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2041,
															"src": "4837:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4813:31:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 2065,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4847:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4813:35:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2067,
												"nodeType": "ExpressionStatement",
												"src": "4813:35:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2069,
															"name": "player",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2041,
															"src": "4876:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2070,
															"name": "game_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2039,
															"src": "4884:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2068,
														"name": "PlacePlayer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1694,
														"src": "4864:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 2071,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4864:28:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2072,
												"nodeType": "EmitStatement",
												"src": "4859:33:10"
											}
										]
									},
									"documentation": {
										"id": 2037,
										"nodeType": "StructuredDocumentation",
										"src": "4552:61:10",
										"text": " @dev Returns {active} for `token_address`."
									},
									"functionSelector": "b9888d89",
									"id": 2074,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 2044,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "4688:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 2045,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2043,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "4679:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "4679:28:10"
										}
									],
									"name": "placePlayer",
									"nameLocation": "4627:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2042,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2039,
												"mutability": "mutable",
												"name": "game_id",
												"nameLocation": "4647:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2074,
												"src": "4639:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2038,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4639:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2041,
												"mutability": "mutable",
												"name": "player",
												"nameLocation": "4664:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2074,
												"src": "4656:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2040,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4656:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4638:33:10"
									},
									"returnParameters": {
										"id": 2046,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4708:0:10"
									},
									"scope": 2611,
									"src": "4618:281:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2108,
										"nodeType": "Block",
										"src": "5028:232:10",
										"statements": [
											{
												"assignments": [
													2082
												],
												"declarations": [
													{
														"constant": false,
														"id": 2082,
														"mutability": "mutable",
														"name": "balance",
														"nameLocation": "5046:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 2108,
														"src": "5038:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2081,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5038:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2088,
												"initialValue": {
													"expression": {
														"arguments": [
															{
																"id": 2085,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "5064:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_Arcade_$2611",
																	"typeString": "contract Arcade"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_Arcade_$2611",
																	"typeString": "contract Arcade"
																}
															],
															"id": 2084,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5056:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2083,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5056:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 2086,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5056:13:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 2087,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "5056:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5038:39:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2091,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2089,
														"name": "balance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2082,
														"src": "5092:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2090,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5102:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5092:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2107,
												"nodeType": "IfStatement",
												"src": "5088:166:10",
												"trueBody": {
													"id": 2106,
													"nodeType": "Block",
													"src": "5105:149:10",
													"statements": [
														{
															"assignments": [
																2093,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2093,
																	"mutability": "mutable",
																	"name": "success",
																	"nameLocation": "5125:7:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 2106,
																	"src": "5120:12:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 2092,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "5120:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																null
															],
															"id": 2100,
															"initialValue": {
																"arguments": [
																	{
																		"hexValue": "",
																		"id": 2098,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5167:2:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																				"typeString": "literal_string \"\""
																			}
																		],
																		"expression": {
																			"id": 2094,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1780,
																			"src": "5138:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 2095,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "call",
																		"nodeType": "MemberAccess",
																		"src": "5138:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																		}
																	},
																	"id": 2097,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"id": 2096,
																			"name": "balance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2082,
																			"src": "5157:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "5138:28:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 2099,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5138:32:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5119:51:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2102,
																		"name": "success",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2093,
																		"src": "5192:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "54726f706879204b696e67204172636164653a20556e61626c6520746f207472616e736665722e",
																		"id": 2103,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5201:41:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_baab7bb41e4b9169c526c16bbcbffefe20545b9868a1d3f2c8420ac42ec1aa91",
																			"typeString": "literal_string \"Trophy King Arcade: Unable to transfer.\""
																		},
																		"value": "Trophy King Arcade: Unable to transfer."
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_baab7bb41e4b9169c526c16bbcbffefe20545b9868a1d3f2c8420ac42ec1aa91",
																			"typeString": "literal_string \"Trophy King Arcade: Unable to transfer.\""
																		}
																	],
																	"id": 2101,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5184:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2104,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5184:59:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2105,
															"nodeType": "ExpressionStatement",
															"src": "5184:59:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2075,
										"nodeType": "StructuredDocumentation",
										"src": "4905:61:10",
										"text": " @dev Returns {active} for `token_address`."
									},
									"functionSelector": "8f0d7e35",
									"id": 2109,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 2078,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "5008:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 2079,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2077,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "4999:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "4999:28:10"
										}
									],
									"name": "reconcile",
									"nameLocation": "4980:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2076,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4989:2:10"
									},
									"returnParameters": {
										"id": 2080,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5028:0:10"
									},
									"scope": 2611,
									"src": "4971:289:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2200,
										"nodeType": "Block",
										"src": "5417:607:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 2120,
																"name": "gameData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "5431:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																	"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																}
															},
															"id": 2122,
															"indexExpression": {
																"id": 2121,
																"name": "game_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2112,
																"src": "5440:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5431:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																"typeString": "struct Arcade.GameInfo storage ref"
															}
														},
														"id": 2123,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "exchange",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1719,
														"src": "5431:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "66616c7365",
														"id": 2124,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5461:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "5431:35:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2199,
												"nodeType": "IfStatement",
												"src": "5427:591:10",
												"trueBody": {
													"id": 2198,
													"nodeType": "Block",
													"src": "5468:550:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2134,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"baseExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 2127,
																						"name": "gameData",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1762,
																						"src": "5490:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																							"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																						}
																					},
																					"id": 2129,
																					"indexExpression": {
																						"id": 2128,
																						"name": "game_id",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2112,
																						"src": "5499:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "5490:17:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																						"typeString": "struct Arcade.GameInfo storage ref"
																					}
																				},
																				"id": 2130,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "paid",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1739,
																				"src": "5490:22:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 2132,
																			"indexExpression": {
																				"id": 2131,
																				"name": "player",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2114,
																				"src": "5513:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5490:30:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2133,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5524:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "5490:35:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "54726f706879204b696e67204172636164653a204e6f74207265676973746572656420666f7220746869732067616d652e",
																		"id": 2135,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5527:51:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e8476f6de5c6ff2c50776cc215cd09f73b5d88379dbf65821b397a78399f15ea",
																			"typeString": "literal_string \"Trophy King Arcade: Not registered for this game.\""
																		},
																		"value": "Trophy King Arcade: Not registered for this game."
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e8476f6de5c6ff2c50776cc215cd09f73b5d88379dbf65821b397a78399f15ea",
																			"typeString": "literal_string \"Trophy King Arcade: Not registered for this game.\""
																		}
																	],
																	"id": 2126,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5482:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2136,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5482:97:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2137,
															"nodeType": "ExpressionStatement",
															"src": "5482:97:10"
														},
														{
															"assignments": [
																2140
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2140,
																	"mutability": "mutable",
																	"name": "gi",
																	"nameLocation": "5611:2:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 2198,
																	"src": "5594:19:10",
																	"stateVariable": false,
																	"storageLocation": "storage",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
																		"typeString": "struct Arcade.GameInfo"
																	},
																	"typeName": {
																		"id": 2139,
																		"nodeType": "UserDefinedTypeName",
																		"pathNode": {
																			"id": 2138,
																			"name": "GameInfo",
																			"nodeType": "IdentifierPath",
																			"referencedDeclaration": 1744,
																			"src": "5594:8:10"
																		},
																		"referencedDeclaration": 1744,
																		"src": "5594:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
																			"typeString": "struct Arcade.GameInfo"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2144,
															"initialValue": {
																"baseExpression": {
																	"id": 2141,
																	"name": "gameData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1762,
																	"src": "5616:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																		"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																	}
																},
																"id": 2143,
																"indexExpression": {
																	"id": 2142,
																	"name": "game_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2112,
																	"src": "5625:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5616:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																	"typeString": "struct Arcade.GameInfo storage ref"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "5594:39:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"expression": {
																					"argumentTypes": [],
																					"id": 2153,
																					"name": "_msgSender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1093,
																					"src": "5718:10:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																						"typeString": "function () view returns (address)"
																					}
																				},
																				"id": 2154,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5718:12:10",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"expression": {
																					"id": 2155,
																					"name": "gi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2140,
																					"src": "5732:2:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
																						"typeString": "struct Arcade.GameInfo storage pointer"
																					}
																				},
																				"id": 2156,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "registration_fee",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1725,
																				"src": "5732:19:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"expression": {
																					"baseExpression": {
																						"id": 2146,
																						"name": "acceptedArcadeTokens",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1757,
																						"src": "5656:20:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_address_$_t_struct$_ArcadeToken_$1752_storage_$",
																							"typeString": "mapping(address => struct Arcade.ArcadeToken storage ref)"
																						}
																					},
																					"id": 2150,
																					"indexExpression": {
																						"components": [
																							{
																								"expression": {
																									"id": 2147,
																									"name": "gi",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2140,
																									"src": "5678:2:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
																										"typeString": "struct Arcade.GameInfo storage pointer"
																									}
																								},
																								"id": 2148,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "arcade_token",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 1729,
																								"src": "5678:15:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							}
																						],
																						"id": 2149,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "5677:17:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "5656:39:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ArcadeToken_$1752_storage",
																						"typeString": "struct Arcade.ArcadeToken storage ref"
																					}
																				},
																				"id": 2151,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "native_token",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1747,
																				"src": "5656:52:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$1056",
																					"typeString": "contract IERC20"
																				}
																			},
																			"id": 2152,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "transfer",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1023,
																			"src": "5656:61:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																				"typeString": "function (address,uint256) external returns (bool)"
																			}
																		},
																		"id": 2157,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5656:96:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "54726f706879204b696e67204172636164653a20526566756e64206661696c65642e",
																		"id": 2158,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5754:36:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e85a8c2eacb2c795304c1ccf2f876604537ff8637a554b73c978582d5d39df6c",
																			"typeString": "literal_string \"Trophy King Arcade: Refund failed.\""
																		},
																		"value": "Trophy King Arcade: Refund failed."
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e85a8c2eacb2c795304c1ccf2f876604537ff8637a554b73c978582d5d39df6c",
																			"typeString": "literal_string \"Trophy King Arcade: Refund failed.\""
																		}
																	],
																	"id": 2145,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5648:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2159,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5648:143:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2160,
															"nodeType": "ExpressionStatement",
															"src": "5648:143:10"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 2162,
																		"name": "game_id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2112,
																		"src": "5818:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 2163,
																		"name": "player",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2114,
																		"src": "5827:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2164,
																			"name": "gi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2140,
																			"src": "5835:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
																				"typeString": "struct Arcade.GameInfo storage pointer"
																			}
																		},
																		"id": 2165,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "registration_fee",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1725,
																		"src": "5835:19:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2161,
																	"name": "Refund",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1702,
																	"src": "5811:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (uint256,address,uint256)"
																	}
																},
																"id": 2166,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5811:44:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2167,
															"nodeType": "EmitStatement",
															"src": "5806:49:10"
														},
														{
															"expression": {
																"id": 2174,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 2168,
																		"name": "gi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2140,
																		"src": "5870:2:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
																			"typeString": "struct Arcade.GameInfo storage pointer"
																		}
																	},
																	"id": 2170,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "total_fee",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1731,
																	"src": "5870:12:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"components": [
																		{
																			"expression": {
																				"id": 2171,
																				"name": "gi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2140,
																				"src": "5887:2:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
																					"typeString": "struct Arcade.GameInfo storage pointer"
																				}
																			},
																			"id": 2172,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "registration_fee",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1725,
																			"src": "5887:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2173,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "5886:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5870:37:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2175,
															"nodeType": "ExpressionStatement",
															"src": "5870:37:10"
														},
														{
															"expression": {
																"id": 2182,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"id": 2176,
																			"name": "gi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2140,
																			"src": "5922:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
																				"typeString": "struct Arcade.GameInfo storage pointer"
																			}
																		},
																		"id": 2179,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "fee",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1735,
																		"src": "5922:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 2180,
																	"indexExpression": {
																		"id": 2178,
																		"name": "player",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2114,
																		"src": "5929:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "5922:14:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 2181,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5939:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5922:18:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2183,
															"nodeType": "ExpressionStatement",
															"src": "5922:18:10"
														},
														{
															"expression": {
																"id": 2190,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"expression": {
																			"id": 2184,
																			"name": "gi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2140,
																			"src": "5954:2:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
																				"typeString": "struct Arcade.GameInfo storage pointer"
																			}
																		},
																		"id": 2187,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "paid",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1739,
																		"src": "5954:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 2188,
																	"indexExpression": {
																		"id": 2186,
																		"name": "player",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2114,
																		"src": "5962:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "5954:15:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 2189,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5972:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5954:19:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2191,
															"nodeType": "ExpressionStatement",
															"src": "5954:19:10"
														},
														{
															"expression": {
																"id": 2196,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 2192,
																		"name": "gi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2140,
																		"src": "5987:2:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
																			"typeString": "struct Arcade.GameInfo storage pointer"
																		}
																	},
																	"id": 2194,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "player_count",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1721,
																	"src": "5987:15:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 2195,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6006:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "5987:20:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2197,
															"nodeType": "ExpressionStatement",
															"src": "5987:20:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2110,
										"nodeType": "StructuredDocumentation",
										"src": "5266:61:10",
										"text": " @dev Returns {active} for `token_address`."
									},
									"functionSelector": "7ad226dc",
									"id": 2201,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 2117,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "5397:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 2118,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2116,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "5388:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "5388:28:10"
										}
									],
									"name": "refund",
									"nameLocation": "5341:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2112,
												"mutability": "mutable",
												"name": "game_id",
												"nameLocation": "5356:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2201,
												"src": "5348:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2111,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5348:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2114,
												"mutability": "mutable",
												"name": "player",
												"nameLocation": "5373:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2201,
												"src": "5365:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5365:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5347:33:10"
									},
									"returnParameters": {
										"id": 2119,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5417:0:10"
									},
									"scope": 2611,
									"src": "5332:692:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2252,
										"nodeType": "Block",
										"src": "6182:250:10",
										"statements": [
											{
												"assignments": [
													2213
												],
												"declarations": [
													{
														"constant": false,
														"id": 2213,
														"mutability": "mutable",
														"name": "gi",
														"nameLocation": "6209:2:10",
														"nodeType": "VariableDeclaration",
														"scope": 2252,
														"src": "6192:19:10",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
															"typeString": "struct Arcade.GameInfo"
														},
														"typeName": {
															"id": 2212,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2211,
																"name": "GameInfo",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1744,
																"src": "6192:8:10"
															},
															"referencedDeclaration": 1744,
															"src": "6192:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
																"typeString": "struct Arcade.GameInfo"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2217,
												"initialValue": {
													"baseExpression": {
														"id": 2214,
														"name": "gameData",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1762,
														"src": "6214:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
															"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
														}
													},
													"id": 2216,
													"indexExpression": {
														"id": 2215,
														"name": "game_id",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2204,
														"src": "6223:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6214:17:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
														"typeString": "struct Arcade.GameInfo storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6192:39:10"
											},
											{
												"expression": {
													"id": 2222,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 2218,
															"name": "gi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2213,
															"src": "6242:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
																"typeString": "struct Arcade.GameInfo storage pointer"
															}
														},
														"id": 2220,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "player_count",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1721,
														"src": "6242:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 2221,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6261:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "6242:20:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2223,
												"nodeType": "ExpressionStatement",
												"src": "6242:20:10"
											},
											{
												"expression": {
													"id": 2230,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"expression": {
																"id": 2224,
																"name": "gi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2213,
																"src": "6272:2:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
																	"typeString": "struct Arcade.GameInfo storage pointer"
																}
															},
															"id": 2227,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "fee",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1735,
															"src": "6272:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 2228,
														"indexExpression": {
															"id": 2226,
															"name": "player_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2206,
															"src": "6279:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "6272:22:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2229,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2208,
														"src": "6297:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6272:31:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2231,
												"nodeType": "ExpressionStatement",
												"src": "6272:31:10"
											},
											{
												"expression": {
													"id": 2238,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"expression": {
																"id": 2232,
																"name": "gi",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2213,
																"src": "6313:2:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
																	"typeString": "struct Arcade.GameInfo storage pointer"
																}
															},
															"id": 2235,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "paid",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1739,
															"src": "6313:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 2236,
														"indexExpression": {
															"id": 2234,
															"name": "player_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2206,
															"src": "6321:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "6313:23:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 2237,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6339:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "6313:27:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2239,
												"nodeType": "ExpressionStatement",
												"src": "6313:27:10"
											},
											{
												"expression": {
													"id": 2244,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 2240,
															"name": "gi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2213,
															"src": "6350:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_GameInfo_$1744_storage_ptr",
																"typeString": "struct Arcade.GameInfo storage pointer"
															}
														},
														"id": 2242,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "total_fee",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1731,
														"src": "6350:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 2243,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2208,
														"src": "6366:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6350:22:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2245,
												"nodeType": "ExpressionStatement",
												"src": "6350:22:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 2247,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6405:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2248,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6405:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2249,
															"name": "game_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2204,
															"src": "6417:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2246,
														"name": "Register",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1708,
														"src": "6396:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 2250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6396:29:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2251,
												"nodeType": "EmitStatement",
												"src": "6391:34:10"
											}
										]
									},
									"documentation": {
										"id": 2202,
										"nodeType": "StructuredDocumentation",
										"src": "6031:61:10",
										"text": " @dev Returns {active} for `token_address`."
									},
									"id": 2253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_register",
									"nameLocation": "6106:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2204,
												"mutability": "mutable",
												"name": "game_id",
												"nameLocation": "6124:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2253,
												"src": "6116:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6116:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2206,
												"mutability": "mutable",
												"name": "player_address",
												"nameLocation": "6141:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 2253,
												"src": "6133:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6133:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2208,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6165:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2253,
												"src": "6157:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2207,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6157:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6115:57:10"
									},
									"returnParameters": {
										"id": 2210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6182:0:10"
									},
									"scope": 2611,
									"src": "6097:335:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2352,
										"nodeType": "Block",
										"src": "6546:803:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2268,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 2260,
																			"name": "gameData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1762,
																			"src": "6564:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																				"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																			}
																		},
																		"id": 2262,
																		"indexExpression": {
																			"id": 2261,
																			"name": "game_id",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2256,
																			"src": "6573:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6564:17:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																			"typeString": "struct Arcade.GameInfo storage ref"
																		}
																	},
																	"id": 2263,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "seats",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1743,
																	"src": "6564:23:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 2266,
																"indexExpression": {
																	"expression": {
																		"id": 2264,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "6588:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 2265,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "6588:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6564:35:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 2267,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6603:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "6564:40:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54726f706879204b696e67204172636164653a20556e617574686f72697a65642e",
															"id": 2269,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6606:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e58036a9a85e0ff3f290e73b4e692a530d20a26bcd7f7164c38ae84b13bd5f10",
																"typeString": "literal_string \"Trophy King Arcade: Unauthorized.\""
															},
															"value": "Trophy King Arcade: Unauthorized."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e58036a9a85e0ff3f290e73b4e692a530d20a26bcd7f7164c38ae84b13bd5f10",
																"typeString": "literal_string \"Trophy King Arcade: Unauthorized.\""
															}
														],
														"id": 2259,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6556:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6556:86:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2271,
												"nodeType": "ExpressionStatement",
												"src": "6556:86:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2278,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 2273,
																		"name": "gameData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "6660:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																			"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																		}
																	},
																	"id": 2275,
																	"indexExpression": {
																		"id": 2274,
																		"name": "game_id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2256,
																		"src": "6669:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6660:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																		"typeString": "struct Arcade.GameInfo storage ref"
																	}
																},
																"id": 2276,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "status",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1727,
																"src": "6660:24:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 2277,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6688:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "6660:29:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54726f706879204b696e67204172636164653a2047616d6520636c6f7365642e",
															"id": 2279,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6691:34:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3147508d713f5a0416c0b9397acc0c7db67afd004656b898ef9a7aadad32b0ba",
																"typeString": "literal_string \"Trophy King Arcade: Game closed.\""
															},
															"value": "Trophy King Arcade: Game closed."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3147508d713f5a0416c0b9397acc0c7db67afd004656b898ef9a7aadad32b0ba",
																"typeString": "literal_string \"Trophy King Arcade: Game closed.\""
															}
														],
														"id": 2272,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6652:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2280,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6652:74:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2281,
												"nodeType": "ExpressionStatement",
												"src": "6652:74:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2291,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 2283,
																		"name": "gameData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "6744:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																			"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																		}
																	},
																	"id": 2285,
																	"indexExpression": {
																		"id": 2284,
																		"name": "game_id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2256,
																		"src": "6753:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6744:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																		"typeString": "struct Arcade.GameInfo storage ref"
																	}
																},
																"id": 2286,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "player_limit",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1723,
																"src": "6744:30:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 2287,
																		"name": "gameData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "6777:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																			"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																		}
																	},
																	"id": 2289,
																	"indexExpression": {
																		"id": 2288,
																		"name": "game_id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2256,
																		"src": "6786:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6777:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																		"typeString": "struct Arcade.GameInfo storage ref"
																	}
																},
																"id": 2290,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "player_count",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1721,
																"src": "6777:30:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6744:63:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54726f706879204b696e67204172636164653a2047616d652066756c6c2e202054727920616761696e2e",
															"id": 2292,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6809:44:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d67db45e25e45128e972499cd5e2f048a2288ba2b56fc714cdb6f6fba6c95241",
																"typeString": "literal_string \"Trophy King Arcade: Game full.  Try again.\""
															},
															"value": "Trophy King Arcade: Game full.  Try again."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d67db45e25e45128e972499cd5e2f048a2288ba2b56fc714cdb6f6fba6c95241",
																"typeString": "literal_string \"Trophy King Arcade: Game full.  Try again.\""
															}
														],
														"id": 2282,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6736:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2293,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6736:118:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2294,
												"nodeType": "ExpressionStatement",
												"src": "6736:118:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2304,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 2296,
																			"name": "gameData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1762,
																			"src": "6872:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																				"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																			}
																		},
																		"id": 2298,
																		"indexExpression": {
																			"id": 2297,
																			"name": "game_id",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2256,
																			"src": "6881:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "6872:17:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																			"typeString": "struct Arcade.GameInfo storage ref"
																		}
																	},
																	"id": 2299,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "paid",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1739,
																	"src": "6872:22:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 2302,
																"indexExpression": {
																	"expression": {
																		"id": 2300,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "6895:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 2301,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "6895:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6872:34:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2303,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6910:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6872:39:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54726f706879204b696e67204172636164653a20416c726561647920726567697374657265642e",
															"id": 2305,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6913:41:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_39f6ad3a7ba6df7f1bd7790fcaefdbe707fc60fa099bee994b9d93fd1123c24c",
																"typeString": "literal_string \"Trophy King Arcade: Already registered.\""
															},
															"value": "Trophy King Arcade: Already registered."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_39f6ad3a7ba6df7f1bd7790fcaefdbe707fc60fa099bee994b9d93fd1123c24c",
																"typeString": "literal_string \"Trophy King Arcade: Already registered.\""
															}
														],
														"id": 2295,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6864:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2306,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6864:91:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2307,
												"nodeType": "ExpressionStatement",
												"src": "6864:91:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2314,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 2309,
																		"name": "gameData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "6973:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																			"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																		}
																	},
																	"id": 2311,
																	"indexExpression": {
																		"id": 2310,
																		"name": "game_id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2256,
																		"src": "6982:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6973:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																		"typeString": "struct Arcade.GameInfo storage ref"
																	}
																},
																"id": 2312,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "player_limit",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1723,
																"src": "6973:30:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2313,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7006:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6973:34:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54726f706879204b696e67204172636164653a2047616d65206e6f7420666f756e642e",
															"id": 2315,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7009:37:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_dc0f7ef317f79a478ce2f0f5bc392d176cd738d07b68b36645f9677e62b68e9f",
																"typeString": "literal_string \"Trophy King Arcade: Game not found.\""
															},
															"value": "Trophy King Arcade: Game not found."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_dc0f7ef317f79a478ce2f0f5bc392d176cd738d07b68b36645f9677e62b68e9f",
																"typeString": "literal_string \"Trophy King Arcade: Game not found.\""
															}
														],
														"id": 2308,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6965:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6965:82:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2317,
												"nodeType": "ExpressionStatement",
												"src": "6965:82:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2328,
																		"name": "_msgSender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1093,
																		"src": "7146:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																			"typeString": "function () view returns (address)"
																		}
																	},
																	"id": 2329,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7146:12:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 2332,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "7168:4:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Arcade_$2611",
																				"typeString": "contract Arcade"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Arcade_$2611",
																				"typeString": "contract Arcade"
																			}
																		],
																		"id": 2331,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "7160:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2330,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "7160:7:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2333,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7160:13:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"expression": {
																		"baseExpression": {
																			"id": 2334,
																			"name": "gameData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1762,
																			"src": "7175:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																				"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																			}
																		},
																		"id": 2336,
																		"indexExpression": {
																			"id": 2335,
																			"name": "game_id",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2256,
																			"src": "7184:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7175:17:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																			"typeString": "struct Arcade.GameInfo storage ref"
																		}
																	},
																	"id": 2337,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "registration_fee",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1725,
																	"src": "7175:34:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"expression": {
																		"baseExpression": {
																			"id": 2319,
																			"name": "acceptedArcadeTokens",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1757,
																			"src": "7065:20:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_struct$_ArcadeToken_$1752_storage_$",
																				"typeString": "mapping(address => struct Arcade.ArcadeToken storage ref)"
																			}
																		},
																		"id": 2325,
																		"indexExpression": {
																			"components": [
																				{
																					"expression": {
																						"baseExpression": {
																							"id": 2320,
																							"name": "gameData",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1762,
																							"src": "7087:8:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																								"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																							}
																						},
																						"id": 2322,
																						"indexExpression": {
																							"id": 2321,
																							"name": "game_id",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2256,
																							"src": "7096:7:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "7087:17:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																							"typeString": "struct Arcade.GameInfo storage ref"
																						}
																					},
																					"id": 2323,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "arcade_token",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1729,
																					"src": "7087:30:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"id": 2324,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "7086:32:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7065:54:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ArcadeToken_$1752_storage",
																			"typeString": "struct Arcade.ArcadeToken storage ref"
																		}
																	},
																	"id": 2326,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "native_token",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1747,
																	"src": "7065:67:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$1056",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 2327,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "transferFrom",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1055,
																"src": "7065:80:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256) external returns (bool)"
																}
															},
															"id": 2338,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7065:145:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54726f706879204b696e67204172636164653a204d75737420617070726f766520726567697374726174696f6e206665652e",
															"id": 2339,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7212:52:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_757df3aca1a1c0adbe7add59c897e665a7e972e40c26169ae2b9960374a84d83",
																"typeString": "literal_string \"Trophy King Arcade: Must approve registration fee.\""
															},
															"value": "Trophy King Arcade: Must approve registration fee."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_757df3aca1a1c0adbe7add59c897e665a7e972e40c26169ae2b9960374a84d83",
																"typeString": "literal_string \"Trophy King Arcade: Must approve registration fee.\""
															}
														],
														"id": 2318,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7057:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7057:208:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2341,
												"nodeType": "ExpressionStatement",
												"src": "7057:208:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2343,
															"name": "game_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2256,
															"src": "7286:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 2344,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "7295:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2345,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "7295:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 2346,
																	"name": "gameData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1762,
																	"src": "7307:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																		"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																	}
																},
																"id": 2348,
																"indexExpression": {
																	"id": 2347,
																	"name": "game_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2256,
																	"src": "7316:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7307:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																	"typeString": "struct Arcade.GameInfo storage ref"
																}
															},
															"id": 2349,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "registration_fee",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1725,
															"src": "7307:34:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2342,
														"name": "_register",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2253,
														"src": "7276:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,address,uint256)"
														}
													},
													"id": 2350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7276:66:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2351,
												"nodeType": "ExpressionStatement",
												"src": "7276:66:10"
											}
										]
									},
									"documentation": {
										"id": 2254,
										"nodeType": "StructuredDocumentation",
										"src": "6438:61:10",
										"text": " @dev Returns {active} for `token_address`."
									},
									"functionSelector": "f207564e",
									"id": 2353,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "register",
									"nameLocation": "6513:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2256,
												"mutability": "mutable",
												"name": "game_id",
												"nameLocation": "6530:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2353,
												"src": "6522:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6522:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6521:17:10"
									},
									"returnParameters": {
										"id": 2258,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6546:0:10"
									},
									"scope": 2611,
									"src": "6504:845:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2453,
										"nodeType": "Block",
										"src": "7467:820:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2368,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 2360,
																			"name": "gameData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1762,
																			"src": "7485:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																				"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																			}
																		},
																		"id": 2362,
																		"indexExpression": {
																			"id": 2361,
																			"name": "game_id",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2356,
																			"src": "7494:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7485:17:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																			"typeString": "struct Arcade.GameInfo storage ref"
																		}
																	},
																	"id": 2363,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "seats",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1743,
																	"src": "7485:23:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 2366,
																"indexExpression": {
																	"expression": {
																		"id": 2364,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "7509:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 2365,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "7509:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7485:35:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 2367,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7524:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "7485:40:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54726f706879204b696e67204172636164653a20556e617574686f72697a65642e",
															"id": 2369,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7527:35:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e58036a9a85e0ff3f290e73b4e692a530d20a26bcd7f7164c38ae84b13bd5f10",
																"typeString": "literal_string \"Trophy King Arcade: Unauthorized.\""
															},
															"value": "Trophy King Arcade: Unauthorized."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e58036a9a85e0ff3f290e73b4e692a530d20a26bcd7f7164c38ae84b13bd5f10",
																"typeString": "literal_string \"Trophy King Arcade: Unauthorized.\""
															}
														],
														"id": 2359,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7477:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2370,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7477:86:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2371,
												"nodeType": "ExpressionStatement",
												"src": "7477:86:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 2373,
																		"name": "gameData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "7581:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																			"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																		}
																	},
																	"id": 2375,
																	"indexExpression": {
																		"id": 2374,
																		"name": "game_id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2356,
																		"src": "7590:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "7581:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																		"typeString": "struct Arcade.GameInfo storage ref"
																	}
																},
																"id": 2376,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "status",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1727,
																"src": "7581:24:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 2377,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7609:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "7581:29:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54726f706879204b696e67204172636164653a2047616d6520636c6f7365642e",
															"id": 2379,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7612:34:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3147508d713f5a0416c0b9397acc0c7db67afd004656b898ef9a7aadad32b0ba",
																"typeString": "literal_string \"Trophy King Arcade: Game closed.\""
															},
															"value": "Trophy King Arcade: Game closed."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3147508d713f5a0416c0b9397acc0c7db67afd004656b898ef9a7aadad32b0ba",
																"typeString": "literal_string \"Trophy King Arcade: Game closed.\""
															}
														],
														"id": 2372,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7573:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2380,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7573:74:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2381,
												"nodeType": "ExpressionStatement",
												"src": "7573:74:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2391,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 2383,
																		"name": "gameData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "7665:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																			"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																		}
																	},
																	"id": 2385,
																	"indexExpression": {
																		"id": 2384,
																		"name": "game_id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2356,
																		"src": "7674:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "7665:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																		"typeString": "struct Arcade.GameInfo storage ref"
																	}
																},
																"id": 2386,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "player_limit",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1723,
																"src": "7665:30:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 2387,
																		"name": "gameData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "7698:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																			"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																		}
																	},
																	"id": 2389,
																	"indexExpression": {
																		"id": 2388,
																		"name": "game_id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2356,
																		"src": "7707:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "7698:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																		"typeString": "struct Arcade.GameInfo storage ref"
																	}
																},
																"id": 2390,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "player_count",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1721,
																"src": "7698:30:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7665:63:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54726f706879204b696e67204172636164653a2047616d652066756c6c2e202054727920616761696e2e",
															"id": 2392,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7730:44:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d67db45e25e45128e972499cd5e2f048a2288ba2b56fc714cdb6f6fba6c95241",
																"typeString": "literal_string \"Trophy King Arcade: Game full.  Try again.\""
															},
															"value": "Trophy King Arcade: Game full.  Try again."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d67db45e25e45128e972499cd5e2f048a2288ba2b56fc714cdb6f6fba6c95241",
																"typeString": "literal_string \"Trophy King Arcade: Game full.  Try again.\""
															}
														],
														"id": 2382,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7657:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2393,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7657:118:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2394,
												"nodeType": "ExpressionStatement",
												"src": "7657:118:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2404,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 2396,
																			"name": "gameData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1762,
																			"src": "7793:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																				"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																			}
																		},
																		"id": 2398,
																		"indexExpression": {
																			"id": 2397,
																			"name": "game_id",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2356,
																			"src": "7802:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7793:17:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																			"typeString": "struct Arcade.GameInfo storage ref"
																		}
																	},
																	"id": 2399,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "paid",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1739,
																	"src": "7793:22:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 2402,
																"indexExpression": {
																	"expression": {
																		"id": 2400,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "7816:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 2401,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "7816:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7793:34:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2403,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7831:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7793:39:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54726f706879204b696e67204172636164653a20416c726561647920726567697374657265642e",
															"id": 2405,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7834:41:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_39f6ad3a7ba6df7f1bd7790fcaefdbe707fc60fa099bee994b9d93fd1123c24c",
																"typeString": "literal_string \"Trophy King Arcade: Already registered.\""
															},
															"value": "Trophy King Arcade: Already registered."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_39f6ad3a7ba6df7f1bd7790fcaefdbe707fc60fa099bee994b9d93fd1123c24c",
																"typeString": "literal_string \"Trophy King Arcade: Already registered.\""
															}
														],
														"id": 2395,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7785:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2406,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7785:91:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2407,
												"nodeType": "ExpressionStatement",
												"src": "7785:91:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2414,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 2409,
																		"name": "gameData",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1762,
																		"src": "7894:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																			"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																		}
																	},
																	"id": 2411,
																	"indexExpression": {
																		"id": 2410,
																		"name": "game_id",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2356,
																		"src": "7903:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "7894:17:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																		"typeString": "struct Arcade.GameInfo storage ref"
																	}
																},
																"id": 2412,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "player_limit",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1723,
																"src": "7894:30:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2413,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7927:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7894:34:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54726f706879204b696e67204172636164653a2047616d65206e6f7420666f756e642e",
															"id": 2415,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7930:37:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_dc0f7ef317f79a478ce2f0f5bc392d176cd738d07b68b36645f9677e62b68e9f",
																"typeString": "literal_string \"Trophy King Arcade: Game not found.\""
															},
															"value": "Trophy King Arcade: Game not found."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_dc0f7ef317f79a478ce2f0f5bc392d176cd738d07b68b36645f9677e62b68e9f",
																"typeString": "literal_string \"Trophy King Arcade: Game not found.\""
															}
														],
														"id": 2408,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7886:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7886:82:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2417,
												"nodeType": "ExpressionStatement",
												"src": "7886:82:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2419,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "7986:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 2420,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "7986:9:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"components": [
																	{
																		"expression": {
																			"baseExpression": {
																				"id": 2421,
																				"name": "gameData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1762,
																				"src": "8000:8:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																					"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																				}
																			},
																			"id": 2423,
																			"indexExpression": {
																				"id": 2422,
																				"name": "game_id",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2356,
																				"src": "8009:7:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "8000:17:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																				"typeString": "struct Arcade.GameInfo storage ref"
																			}
																		},
																		"id": 2424,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "registration_fee",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1725,
																		"src": "8000:34:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2425,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "7999:36:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7986:49:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54726f706879204b696e67204172636164653a204d757374206d6174636820726567697374726174696f6e206665652e",
															"id": 2427,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8037:50:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cb75b40a399681329a67f3d89d82402c347679ed34e9b8342ad54ec973c1d7b3",
																"typeString": "literal_string \"Trophy King Arcade: Must match registration fee.\""
															},
															"value": "Trophy King Arcade: Must match registration fee."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cb75b40a399681329a67f3d89d82402c347679ed34e9b8342ad54ec973c1d7b3",
																"typeString": "literal_string \"Trophy King Arcade: Must match registration fee.\""
															}
														],
														"id": 2418,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7978:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7978:110:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2429,
												"nodeType": "ExpressionStatement",
												"src": "7978:110:10"
											},
											{
												"assignments": [
													2431,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 2431,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "8105:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 2453,
														"src": "8100:12:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2430,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "8100:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 2439,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 2437,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8156:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 2432,
																"name": "market_maker",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1778,
																"src": "8118:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2433,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "8118:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2436,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"expression": {
																	"id": 2434,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "8144:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 2435,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "8144:9:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "8118:37:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2438,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8118:41:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8099:60:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2441,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2431,
															"src": "8177:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54726f706879204b696e67204172636164653a20556e61626c6520746f207472616e736665722e",
															"id": 2442,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8186:41:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baab7bb41e4b9169c526c16bbcbffefe20545b9868a1d3f2c8420ac42ec1aa91",
																"typeString": "literal_string \"Trophy King Arcade: Unable to transfer.\""
															},
															"value": "Trophy King Arcade: Unable to transfer."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baab7bb41e4b9169c526c16bbcbffefe20545b9868a1d3f2c8420ac42ec1aa91",
																"typeString": "literal_string \"Trophy King Arcade: Unable to transfer.\""
															}
														],
														"id": 2440,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8169:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2443,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8169:59:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2444,
												"nodeType": "ExpressionStatement",
												"src": "8169:59:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2446,
															"name": "game_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2356,
															"src": "8249:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 2447,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "8258:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2448,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "8258:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 2449,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "8270:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2450,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "8270:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2445,
														"name": "_register",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2253,
														"src": "8239:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,address,uint256)"
														}
													},
													"id": 2451,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8239:41:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2452,
												"nodeType": "ExpressionStatement",
												"src": "8239:41:10"
											}
										]
									},
									"documentation": {
										"id": 2354,
										"nodeType": "StructuredDocumentation",
										"src": "7355:61:10",
										"text": " @dev Returns {active} for `token_address`."
									},
									"functionSelector": "94b918de",
									"id": 2454,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nameLocation": "7430:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2356,
												"mutability": "mutable",
												"name": "game_id",
												"nameLocation": "7443:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2454,
												"src": "7435:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2355,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7435:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7434:17:10"
									},
									"returnParameters": {
										"id": 2358,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7467:0:10"
									},
									"scope": 2611,
									"src": "7421:866:10",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2478,
										"nodeType": "Block",
										"src": "8450:88:10",
										"statements": [
											{
												"expression": {
													"id": 2472,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 2465,
																	"name": "gameData",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1762,
																	"src": "8460:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																		"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																	}
																},
																"id": 2467,
																"indexExpression": {
																	"id": 2466,
																	"name": "game_id",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2457,
																	"src": "8469:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "8460:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																	"typeString": "struct Arcade.GameInfo storage ref"
																}
															},
															"id": 2468,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "seats",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1743,
															"src": "8460:23:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 2470,
														"indexExpression": {
															"id": 2469,
															"name": "player",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2459,
															"src": "8484:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8460:31:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 2471,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8494:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8460:35:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2473,
												"nodeType": "ExpressionStatement",
												"src": "8460:35:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2475,
															"name": "player",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2459,
															"src": "8524:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2474,
														"name": "RemovePlayer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1712,
														"src": "8511:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 2476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8511:20:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2477,
												"nodeType": "EmitStatement",
												"src": "8506:25:10"
											}
										]
									},
									"documentation": {
										"id": 2455,
										"nodeType": "StructuredDocumentation",
										"src": "8293:61:10",
										"text": " @dev Returns {active} for `token_address`."
									},
									"functionSelector": "2ba67100",
									"id": 2479,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 2462,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "8430:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 2463,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2461,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "8421:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "8421:28:10"
										}
									],
									"name": "removePlayer",
									"nameLocation": "8368:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2457,
												"mutability": "mutable",
												"name": "game_id",
												"nameLocation": "8389:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2479,
												"src": "8381:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8381:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2459,
												"mutability": "mutable",
												"name": "player",
												"nameLocation": "8406:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2479,
												"src": "8398:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2458,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8398:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8380:33:10"
									},
									"returnParameters": {
										"id": 2464,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8450:0:10"
									},
									"scope": 2611,
									"src": "8359:179:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2492,
										"nodeType": "Block",
										"src": "8698:44:10",
										"statements": [
											{
												"expression": {
													"id": 2490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2488,
														"name": "fee_percentage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1767,
														"src": "8708:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2489,
														"name": "percentage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2482,
														"src": "8725:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8708:27:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2491,
												"nodeType": "ExpressionStatement",
												"src": "8708:27:10"
											}
										]
									},
									"documentation": {
										"id": 2480,
										"nodeType": "StructuredDocumentation",
										"src": "8544:61:10",
										"text": " @dev Returns {active} for `token_address`."
									},
									"functionSelector": "2ac5016f",
									"id": 2493,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 2485,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "8678:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 2486,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2484,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "8669:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "8669:28:10"
										}
									],
									"name": "setArcadeFeePercentage",
									"nameLocation": "8619:22:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2482,
												"mutability": "mutable",
												"name": "percentage",
												"nameLocation": "8650:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 2493,
												"src": "8642:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2481,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8642:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8641:20:10"
									},
									"returnParameters": {
										"id": 2487,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8698:0:10"
									},
									"scope": 2611,
									"src": "8610:132:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2506,
										"nodeType": "Block",
										"src": "8892:40:10",
										"statements": [
											{
												"expression": {
													"id": 2504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2502,
														"name": "market_maker",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1778,
														"src": "8902:12:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2503,
														"name": "incoming",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2496,
														"src": "8917:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8902:23:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2505,
												"nodeType": "ExpressionStatement",
												"src": "8902:23:10"
											}
										]
									},
									"documentation": {
										"id": 2494,
										"nodeType": "StructuredDocumentation",
										"src": "8748:61:10",
										"text": " @dev Returns {active} for `token_address`."
									},
									"functionSelector": "f54c42d7",
									"id": 2507,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 2499,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "8872:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 2500,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2498,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "8863:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "8863:28:10"
										}
									],
									"name": "setMarketMaker",
									"nameLocation": "8823:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2496,
												"mutability": "mutable",
												"name": "incoming",
												"nameLocation": "8846:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2507,
												"src": "8838:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8838:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8837:18:10"
									},
									"returnParameters": {
										"id": 2501,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8892:0:10"
									},
									"scope": 2611,
									"src": "8814:118:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2609,
										"nodeType": "Block",
										"src": "9092:778:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2523,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 2518,
																"name": "gameData",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "9106:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																	"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																}
															},
															"id": 2520,
															"indexExpression": {
																"id": 2519,
																"name": "game_id",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2510,
																"src": "9115:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9106:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																"typeString": "struct Arcade.GameInfo storage ref"
															}
														},
														"id": 2521,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "exchange",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1719,
														"src": "9106:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "66616c7365",
														"id": 2522,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9136:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "9106:35:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2604,
												"nodeType": "IfStatement",
												"src": "9102:733:10",
												"trueBody": {
													"id": 2603,
													"nodeType": "Block",
													"src": "9143:692:10",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"baseExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 2525,
																					"name": "gameData",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1762,
																					"src": "9166:8:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																						"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																					}
																				},
																				"id": 2527,
																				"indexExpression": {
																					"id": 2526,
																					"name": "game_id",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2510,
																					"src": "9175:7:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "9166:17:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																					"typeString": "struct Arcade.GameInfo storage ref"
																				}
																			},
																			"id": 2528,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "fee",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1735,
																			"src": "9166:21:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																				"typeString": "mapping(address => uint256)"
																			}
																		},
																		"id": 2530,
																		"indexExpression": {
																			"id": 2529,
																			"name": "winner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2512,
																			"src": "9188:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "9166:29:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2524,
																	"name": "Fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1680,
																	"src": "9162:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256)"
																	}
																},
																"id": 2531,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9162:34:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2532,
															"nodeType": "EmitStatement",
															"src": "9157:39:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2541,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"baseExpression": {
																				"expression": {
																					"baseExpression": {
																						"id": 2534,
																						"name": "gameData",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1762,
																						"src": "9219:8:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																							"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																						}
																					},
																					"id": 2536,
																					"indexExpression": {
																						"id": 2535,
																						"name": "game_id",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2510,
																						"src": "9228:7:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "9219:17:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																						"typeString": "struct Arcade.GameInfo storage ref"
																					}
																				},
																				"id": 2537,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "paid",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1739,
																				"src": "9219:22:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 2539,
																			"indexExpression": {
																				"id": 2538,
																				"name": "winner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2512,
																				"src": "9242:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "9219:30:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2540,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9253:1:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9219:35:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "54726f706879204b696e67204172636164653a204e6f74207265676973746572656420666f7220746869732067616d65",
																		"id": 2542,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9256:50:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_ae12d68cb90f20b0d133f70a3a8f97b96ec1725ea66930b92c795330ec4e1b2e",
																			"typeString": "literal_string \"Trophy King Arcade: Not registered for this game\""
																		},
																		"value": "Trophy King Arcade: Not registered for this game"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_ae12d68cb90f20b0d133f70a3a8f97b96ec1725ea66930b92c795330ec4e1b2e",
																			"typeString": "literal_string \"Trophy King Arcade: Not registered for this game\""
																		}
																	],
																	"id": 2533,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "9211:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2543,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9211:96:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2544,
															"nodeType": "ExpressionStatement",
															"src": "9211:96:10"
														},
														{
															"assignments": [
																2546
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2546,
																	"mutability": "mutable",
																	"name": "arcade_fee",
																	"nameLocation": "9330:10:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 2603,
																	"src": "9322:18:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2545,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "9322:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2558,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2557,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2555,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2552,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"baseExpression": {
																							"id": 2547,
																							"name": "gameData",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1762,
																							"src": "9344:8:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																								"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																							}
																						},
																						"id": 2549,
																						"indexExpression": {
																							"id": 2548,
																							"name": "game_id",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2510,
																							"src": "9353:7:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "IndexAccess",
																						"src": "9344:17:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																							"typeString": "struct Arcade.GameInfo storage ref"
																						}
																					},
																					"id": 2550,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "total_fee",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1731,
																					"src": "9344:27:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "*",
																				"rightExpression": {
																					"id": 2551,
																					"name": "fee_percentage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1767,
																					"src": "9374:14:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9344:44:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 2553,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "9343:46:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2554,
																		"name": "base",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1776,
																		"src": "9392:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "9343:53:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2556,
																	"name": "base",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1776,
																	"src": "9399:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9343:60:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "9322:81:10"
														},
														{
															"assignments": [
																2560
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2560,
																	"mutability": "mutable",
																	"name": "payout",
																	"nameLocation": "9425:6:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 2603,
																	"src": "9417:14:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2559,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "9417:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2567,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2566,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"baseExpression": {
																			"id": 2561,
																			"name": "gameData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1762,
																			"src": "9434:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_GameInfo_$1744_storage_$",
																				"typeString": "mapping(uint256 => struct Arcade.GameInfo storage ref)"
																			}
																		},
																		"id": 2563,
																		"indexExpression": {
																			"id": 2562,
																			"name": "game_id",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2510,
																			"src": "9443:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "9434:17:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_GameInfo_$1744_storage",
																			"typeString": "struct Arcade.GameInfo storage ref"
																		}
																	},
																	"id": 2564,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "total_fee",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1731,
																	"src": "9434:27:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 2565,
																	"name": "arcade_fee",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2546,
																	"src": "9464:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9434:40:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "9417:57:10"
														},
														{
															"assignments": [
																2569
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2569,
																	"mutability": "mutable",
																	"name": "contract_balance",
																	"nameLocation": "9496:16:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 2603,
																	"src": "9488:24:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2568,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "9488:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2575,
															"initialValue": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2572,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "9523:4:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Arcade_$2611",
																				"typeString": "contract Arcade"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Arcade_$2611",
																				"typeString": "contract Arcade"
																			}
																		],
																		"id": 2571,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "9515:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2570,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "9515:7:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2573,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9515:13:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 2574,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "9515:21:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "9488:48:10"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2578,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2576,
																	"name": "contract_balance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2569,
																	"src": "9555:16:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 2577,
																	"name": "payout",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2560,
																	"src": "9574:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9555:25:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2584,
															"nodeType": "IfStatement",
															"src": "9551:89:10",
															"trueBody": {
																"id": 2583,
																"nodeType": "Block",
																"src": "9582:58:10",
																"statements": [
																	{
																		"expression": {
																			"id": 2581,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 2579,
																				"name": "payout",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2560,
																				"src": "9600:6:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 2580,
																				"name": "contract_balance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2569,
																				"src": "9609:16:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9600:25:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 2582,
																		"nodeType": "ExpressionStatement",
																		"src": "9600:25:10"
																	}
																]
															}
														},
														{
															"assignments": [
																2586,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2586,
																	"mutability": "mutable",
																	"name": "success",
																	"nameLocation": "9660:7:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 2603,
																	"src": "9655:12:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 2585,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "9655:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																null
															],
															"id": 2593,
															"initialValue": {
																"arguments": [
																	{
																		"hexValue": "",
																		"id": 2591,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9702:2:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																				"typeString": "literal_string \"\""
																			}
																		],
																		"expression": {
																			"id": 2587,
																			"name": "winner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2512,
																			"src": "9673:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 2588,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "call",
																		"nodeType": "MemberAccess",
																		"src": "9673:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																		}
																	},
																	"id": 2590,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"id": 2589,
																			"name": "payout",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2560,
																			"src": "9693:6:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "9673:28:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 2592,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9673:32:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "9654:51:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2595,
																		"name": "success",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2586,
																		"src": "9727:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "54726f706879204b696e67204172636164653a20556e61626c6520746f207472616e736665722e",
																		"id": 2596,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9736:41:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_baab7bb41e4b9169c526c16bbcbffefe20545b9868a1d3f2c8420ac42ec1aa91",
																			"typeString": "literal_string \"Trophy King Arcade: Unable to transfer.\""
																		},
																		"value": "Trophy King Arcade: Unable to transfer."
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_baab7bb41e4b9169c526c16bbcbffefe20545b9868a1d3f2c8420ac42ec1aa91",
																			"typeString": "literal_string \"Trophy King Arcade: Unable to transfer.\""
																		}
																	],
																	"id": 2594,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "9719:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2597,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9719:59:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2598,
															"nodeType": "ExpressionStatement",
															"src": "9719:59:10"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 2600,
																		"name": "payout",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2560,
																		"src": "9817:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2599,
																	"name": "Payout",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1688,
																	"src": "9810:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256)"
																	}
																},
																"id": 2601,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9810:14:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2602,
															"nodeType": "EmitStatement",
															"src": "9805:19:10"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2606,
															"name": "game_id",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2510,
															"src": "9855:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2605,
														"name": "closeGame",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1925,
														"src": "9845:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 2607,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9845:18:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2608,
												"nodeType": "ExpressionStatement",
												"src": "9845:18:10"
											}
										]
									},
									"documentation": {
										"id": 2508,
										"nodeType": "StructuredDocumentation",
										"src": "8938:61:10",
										"text": " @dev Returns {active} for `token_address`."
									},
									"functionSelector": "9c623683",
									"id": 2610,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 2515,
													"name": "DEFAULT_ADMIN_ROLE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 27,
													"src": "9072:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 2516,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2514,
												"name": "onlyRole",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 38,
												"src": "9063:8:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "9063:28:10"
										}
									],
									"name": "setWinner",
									"nameLocation": "9013:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2510,
												"mutability": "mutable",
												"name": "game_id",
												"nameLocation": "9031:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2610,
												"src": "9023:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2509,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9023:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2512,
												"mutability": "mutable",
												"name": "winner",
												"nameLocation": "9048:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2610,
												"src": "9040:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2511,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9040:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9022:33:10"
									},
									"returnParameters": {
										"id": 2517,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9092:0:10"
									},
									"scope": 2611,
									"src": "9004:866:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 2612,
							"src": "263:9609:10",
							"usedErrors": []
						}
					],
					"src": "37:9836:10"
				},
				"id": 10
			}
		}
	}
}